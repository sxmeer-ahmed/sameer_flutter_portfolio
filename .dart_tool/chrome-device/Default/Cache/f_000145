define(['dart_sdk', 'packages/vector_math/vector_math.dart'], (function load__packages__flutter_wgl__src__core__lib_dart(dart_sdk, packages__vector_math__vector_math$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const web_gl = dart_sdk.web_gl;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  var lib = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $keys = dartx.keys;
  var $_get = dartx._get;
  var $containsKey = dartx.containsKey;
  var $add = dartx.add;
  var $codeUnitAt = dartx.codeUnitAt;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $truncate = dartx.truncate;
  var $join = dartx.join;
  var $buffer = dartx.buffer;
  var $indexOf = dartx.indexOf;
  var $contains = dartx.contains;
  var $sort = dartx.sort;
  var $isEmpty = dartx.isEmpty;
  var $addAll = dartx.addAll;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $startsWith = dartx.startsWith;
  var $sublist = dartx.sublist;
  var $modulo = dartx['%'];
  var $putIfAbsent = dartx.putIfAbsent;
  var $last = dartx.last;
  var $values = dartx.values;
  var $fillRange = dartx.fillRange;
  var $split = dartx.split;
  var $asInt32List = dartx.asInt32List;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    IdentityMapOfStringL$ObjectL: () => (T.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ObjectL())))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    LinkedHashSetOfStringL: () => (T.LinkedHashSetOfStringL = dart.constFn(collection.LinkedHashSet$(T.StringL())))(),
    ProgramL: () => (T.ProgramL = dart.constFn(dart.legacy(web_gl.Program)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    TheStencilFunctionL: () => (T.TheStencilFunctionL = dart.constFn(dart.legacy(lib.TheStencilFunction)))(),
    TheStencilOpL: () => (T.TheStencilOpL = dart.constFn(dart.legacy(lib.TheStencilOp)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    TheBlendEquationL: () => (T.TheBlendEquationL = dart.constFn(dart.legacy(lib.TheBlendEquation)))(),
    ListOfboolL: () => (T.ListOfboolL = dart.constFn(core.List$(T.boolL())))(),
    ListLOfboolL: () => (T.ListLOfboolL = dart.constFn(dart.legacy(T.ListOfboolL())))(),
    UniformLocationL: () => (T.UniformLocationL = dart.constFn(dart.legacy(web_gl.UniformLocation)))(),
    Int32ListL: () => (T.Int32ListL = dart.constFn(dart.legacy(typed_data.Int32List)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    Float32ListL: () => (T.Float32ListL = dart.constFn(dart.legacy(typed_data.Float32List)))(),
    Matrix4L: () => (T.Matrix4L = dart.constFn(dart.legacy(vector_math.Matrix4)))(),
    Matrix3L: () => (T.Matrix3L = dart.constFn(dart.legacy(vector_math.Matrix3)))(),
    Vector4L: () => (T.Vector4L = dart.constFn(dart.legacy(vector_math.Vector4)))(),
    Vector3L: () => (T.Vector3L = dart.constFn(dart.legacy(vector_math.Vector3)))(),
    Vector2L: () => (T.Vector2L = dart.constFn(dart.legacy(vector_math.Vector2)))(),
    TextureL: () => (T.TextureL = dart.constFn(dart.legacy(lib.Texture)))(),
    TextureL$1: () => (T.TextureL$1 = dart.constFn(dart.legacy(web_gl.Texture)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    MaterialL: () => (T.MaterialL = dart.constFn(dart.legacy(lib.Material)))(),
    IdentityMapOfStringL$Float32ListL: () => (T.IdentityMapOfStringL$Float32ListL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.Float32ListL())))(),
    BufferL: () => (T.BufferL = dart.constFn(dart.legacy(web_gl.Buffer)))(),
    VertexArrayObjectL: () => (T.VertexArrayObjectL = dart.constFn(dart.legacy(web_gl.VertexArrayObject)))(),
    TypedDataL: () => (T.TypedDataL = dart.constFn(dart.legacy(typed_data.TypedData)))(),
    FramebufferL: () => (T.FramebufferL = dart.constFn(dart.legacy(web_gl.Framebuffer)))(),
    Uint16ListL: () => (T.Uint16ListL = dart.constFn(dart.legacy(typed_data.Uint16List)))(),
    Uint32ListL: () => (T.Uint32ListL = dart.constFn(dart.legacy(typed_data.Uint32List)))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    TransformFeedbackL: () => (T.TransformFeedbackL = dart.constFn(dart.legacy(web_gl.TransformFeedback)))(),
    SamplerL: () => (T.SamplerL = dart.constFn(dart.legacy(web_gl.Sampler)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    IdentityMapOfStringL$intL: () => (T.IdentityMapOfStringL$intL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.intL())))(),
    Edge3L: () => (T.Edge3L = dart.constFn(dart.legacy(lib.Edge3)))(),
    Face3L: () => (T.Face3L = dart.constFn(dart.legacy(lib.Face3)))(),
    JSArrayOfFace3L: () => (T.JSArrayOfFace3L = dart.constFn(_interceptors.JSArray$(T.Face3L())))(),
    Face4L: () => (T.Face4L = dart.constFn(dart.legacy(lib.Face4)))(),
    JSArrayOfFace4L: () => (T.JSArrayOfFace4L = dart.constFn(_interceptors.JSArray$(T.Face4L())))(),
    JSArrayOfVector3L: () => (T.JSArrayOfVector3L = dart.constFn(_interceptors.JSArray$(T.Vector3L())))(),
    IdentityMapOfStringL$ListL: () => (T.IdentityMapOfStringL$ListL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ListL())))(),
    JSArrayOfVector2L: () => (T.JSArrayOfVector2L = dart.constFn(_interceptors.JSArray$(T.Vector2L())))(),
    JSArrayOfVector4L: () => (T.JSArrayOfVector4L = dart.constFn(_interceptors.JSArray$(T.Vector4L())))(),
    JSArrayOfdoubleL: () => (T.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T.doubleL())))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    JSArrayOfListLOfintL: () => (T.JSArrayOfListLOfintL = dart.constFn(_interceptors.JSArray$(T.ListLOfintL())))(),
    ListOfdoubleL: () => (T.ListOfdoubleL = dart.constFn(core.List$(T.doubleL())))(),
    ListLOfdoubleL: () => (T.ListLOfdoubleL = dart.constFn(dart.legacy(T.ListOfdoubleL())))(),
    ListOfVector2L: () => (T.ListOfVector2L = dart.constFn(core.List$(T.Vector2L())))(),
    ListLOfVector2L: () => (T.ListLOfVector2L = dart.constFn(dart.legacy(T.ListOfVector2L())))(),
    ListOfVector3L: () => (T.ListOfVector3L = dart.constFn(core.List$(T.Vector3L())))(),
    ListLOfVector3L: () => (T.ListLOfVector3L = dart.constFn(dart.legacy(T.ListOfVector3L())))(),
    ListOfVector4L: () => (T.ListOfVector4L = dart.constFn(core.List$(T.Vector4L())))(),
    ListLOfVector4L: () => (T.ListLOfVector4L = dart.constFn(dart.legacy(T.ListOfVector4L())))(),
    LinkedMapOfVector3L$Vector3L: () => (T.LinkedMapOfVector3L$Vector3L = dart.constFn(_js_helper.LinkedMap$(T.Vector3L(), T.Vector3L())))(),
    intLAndVector3LTovoid: () => (T.intLAndVector3LTovoid = dart.constFn(dart.fnType(dart.void, [T.intL(), T.Vector3L()])))(),
    LinkedMapOfEdge3L$ObjectL: () => (T.LinkedMapOfEdge3L$ObjectL = dart.constFn(_js_helper.LinkedMap$(T.Edge3L(), T.ObjectL())))(),
    VoidToObjectL: () => (T.VoidToObjectL = dart.constFn(dart.fnType(T.ObjectL(), [])))(),
    Vector3LAndVector3LAndObjectLToboolL: () => (T.Vector3LAndVector3LAndObjectLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.Vector3L(), T.Vector3L(), T.ObjectL()])))(),
    LinkedHashMapOfVector3L$ListLOfVector3L: () => (T.LinkedHashMapOfVector3L$ListLOfVector3L = dart.constFn(collection.LinkedHashMap$(T.Vector3L(), T.ListLOfVector3L())))(),
    Vector3LTointL: () => (T.Vector3LTointL = dart.constFn(dart.fnType(T.intL(), [T.Vector3L()])))(),
    VoidToListLOfVector3L: () => (T.VoidToListLOfVector3L = dart.constFn(dart.fnType(T.ListLOfVector3L(), [])))(),
    ListLOfVector3LToboolL: () => (T.ListLOfVector3LToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ListLOfVector3L()])))(),
    LightL: () => (T.LightL = dart.constFn(dart.legacy(lib.Light)))(),
    JSArrayOfLightL: () => (T.JSArrayOfLightL = dart.constFn(_interceptors.JSArray$(T.LightL())))(),
    ShaderL: () => (T.ShaderL = dart.constFn(dart.legacy(web_gl.Shader)))(),
    ListOfListLOfintL: () => (T.ListOfListLOfintL = dart.constFn(core.List$(T.ListLOfintL())))(),
    ListLOfListLOfintL: () => (T.ListLOfListLOfintL = dart.constFn(dart.legacy(T.ListOfListLOfintL())))(),
    ShaderVarDescL: () => (T.ShaderVarDescL = dart.constFn(dart.legacy(lib.ShaderVarDesc)))(),
    IdentityMapOfStringL$ShaderVarDescL: () => (T.IdentityMapOfStringL$ShaderVarDescL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ShaderVarDescL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(lib.hashVector3, T.Vector3LTointL());
    },
    get C1() {
      return C[1] = dart.constList([34070, 34069, 34072, 34071, 34074, 34073], T.intL());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: ""
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "vec3"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "per vertex color",
        [type$0]: "vec3"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "per vertex color",
        [type$0]: "vec4"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "vertex coordinates",
        [type$0]: "vec3"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "texture uvs",
        [type$0]: "vec2"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "vertex normals",
        [type$0]: "vec3"
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "vertex binormals",
        [type$0]: "vec3"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "for wireframe",
        [type$0]: "vec4"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "float"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "vec4"
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "vertex tangents",
        [type$0]: "vec3"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "vertex btangents",
        [type$0]: "vec3"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "vec2"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "delta from light",
        [type$0]: "vec4"
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "depth for shadowmaps",
        [type$0]: "float"
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "mat4"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "mat3"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "sampler2DShadow"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "sampler2D"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "",
        [type$0]: "samplerCube"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "time since program start in sec",
        [type$0]: "float"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 128,
        [purpose$]: "",
        [type$0]: "mat4"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 4,
        [purpose$]: "",
        [type$0]: "mat4"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 4,
        [purpose$]: "",
        [type$0]: "float"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "for bump maps",
        [type$0]: "float"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: lib.ShaderVarDesc.prototype,
        [arraySize$]: 0,
        [purpose$]: "for normal maps",
        [type$0]: "float"
      });
    }
  }, false);
  var C = Array(29).fill(void 0);
  var I = [
    "package:flutter_wgl/src/core/lib.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/render_program.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/mesh_data.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/textures.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/abstractions.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/framebuffer.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/flutterWGL.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/shader_object.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/geometry_builder.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/core/illumination.dart"
  ];
  var name$ = dart.privateName(lib, "DrawStats.name");
  var numInstances$ = dart.privateName(lib, "DrawStats.numInstances");
  var numItems$ = dart.privateName(lib, "DrawStats.numItems");
  var drawMode$ = dart.privateName(lib, "DrawStats.drawMode");
  var duration$ = dart.privateName(lib, "DrawStats.duration");
  lib.DrawStats = class DrawStats extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get numInstances() {
      return this[numInstances$];
    }
    set numInstances(value) {
      super.numInstances = value;
    }
    get numItems() {
      return this[numItems$];
    }
    set numItems(value) {
      super.numItems = value;
    }
    get drawMode() {
      return this[drawMode$];
    }
    set drawMode(value) {
      super.drawMode = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    toString() {
      return "[" + dart.str(this.name) + "] " + dart.str(this.numInstances) + " " + dart.str(this.numItems) + " mode:" + dart.str(this.drawMode) + " [" + dart.str(this.duration.inMicroseconds) + "usec]";
    }
  };
  (lib.DrawStats.new = function(name, numInstances, numItems, drawMode, duration) {
    this[name$] = name;
    this[numInstances$] = numInstances;
    this[numItems$] = numItems;
    this[drawMode$] = drawMode;
    this[duration$] = duration;
    ;
  }).prototype = lib.DrawStats.prototype;
  dart.addTypeTests(lib.DrawStats);
  dart.addTypeCaches(lib.DrawStats);
  dart.setMethodSignature(lib.DrawStats, () => ({
    __proto__: dart.getMethods(lib.DrawStats.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.DrawStats, I[0]);
  dart.setFieldSignature(lib.DrawStats, () => ({
    __proto__: dart.getFields(lib.DrawStats.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    numInstances: dart.finalFieldType(dart.legacy(core.int)),
    numItems: dart.finalFieldType(dart.legacy(core.int)),
    drawMode: dart.finalFieldType(dart.legacy(core.int)),
    duration: dart.finalFieldType(dart.legacy(core.Duration))
  }));
  dart.defineExtensionMethods(lib.DrawStats, ['toString']);
  var _uniformLocations = dart.privateName(lib, "_uniformLocations");
  var _uniformsInitialized = dart.privateName(lib, "_uniformsInitialized");
  var _attributesInitialized = dart.privateName(lib, "_attributesInitialized");
  var _nextTextureUnit = dart.privateName(lib, "_nextTextureUnit");
  var _cgl$ = dart.privateName(lib, "_cgl");
  var _shaderObjectV$ = dart.privateName(lib, "_shaderObjectV");
  var _shaderObjectF$ = dart.privateName(lib, "_shaderObjectF");
  var _program = dart.privateName(lib, "_program");
  var _attributes = dart.privateName(lib, "_attributes");
  var _ClearState = dart.privateName(lib, "_ClearState");
  var _HasUniform = dart.privateName(lib, "_HasUniform");
  var _SetControl = dart.privateName(lib, "_SetControl");
  var _SetUniform = dart.privateName(lib, "_SetUniform");
  var _ActivateUniforms = dart.privateName(lib, "_ActivateUniforms");
  var name$0 = dart.privateName(lib, "NamedEntity.name");
  var debug = dart.privateName(lib, "NamedEntity.debug");
  var enabled = dart.privateName(lib, "NamedEntity.enabled");
  lib.NamedEntity = class NamedEntity extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get debug() {
      return this[debug];
    }
    set debug(value) {
      this[debug] = value;
    }
    get enabled() {
      return this[enabled];
    }
    set enabled(value) {
      this[enabled] = value;
    }
  };
  (lib.NamedEntity.new = function(name) {
    this[debug] = false;
    this[enabled] = true;
    this[name$0] = name;
    ;
  }).prototype = lib.NamedEntity.prototype;
  dart.addTypeTests(lib.NamedEntity);
  dart.addTypeCaches(lib.NamedEntity);
  dart.setLibraryUri(lib.NamedEntity, I[0]);
  dart.setFieldSignature(lib.NamedEntity, () => ({
    __proto__: dart.getFields(lib.NamedEntity.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    debug: dart.fieldType(dart.legacy(core.bool)),
    enabled: dart.fieldType(dart.legacy(core.bool))
  }));
  lib.RenderProgram = class RenderProgram extends lib.NamedEntity {
    get shaderObjectV() {
      return this[_shaderObjectV$];
    }
    get shaderObjectF() {
      return this[_shaderObjectF$];
    }
    GetTransformBindingIndex(canonical) {
      return this[_shaderObjectV$].GetTransformBindingIndex(canonical);
    }
    MakeMeshData(name, drawMode) {
      return new lib.MeshData.new(name, this[_cgl$], drawMode, this[_shaderObjectV$].GetAttributeLayoutMap());
    }
    HasCompatibleAttributesTo(other) {
      let a = this[_shaderObjectV$].GetAttributeLayoutMap();
      let b = other[_shaderObjectV$].GetAttributeLayoutMap();
      if (a[$length] != b[$length]) return false;
      for (let key of a[$keys]) {
        if (a[$_get](key) != b[$_get](key)) return false;
      }
      return true;
    }
    HasDownwardCompatibleAttributesTo(other) {
      let a = this[_shaderObjectV$].GetAttributeLayoutMap();
      let b = other[_shaderObjectV$].GetAttributeLayoutMap();
      for (let key of a[$keys]) {
        if (a[$_get](key) != b[$_get](key)) {
          return false;
        }
      }
      return true;
    }
    [_ClearState]() {
      this[_nextTextureUnit] = 0;
    }
    getContext() {
      return this[_cgl$];
    }
    [_HasUniform](canonical) {
      return this[_uniformLocations][$containsKey](canonical);
    }
    [_SetControl](canonical, val) {
      switch (canonical) {
        case "cDepthTest":
        {
          if (dart.equals(val, true)) {
            this[_cgl$].enable(2929);
          } else {
            this[_cgl$].disable(2929);
          }
          break;
        }
        case "cDepthFunc":
        {
          this[_cgl$].depthFunc(T.intL().as(val));
          break;
        }
        case "cStencilFunc":
        {
          let sfun = T.TheStencilFunctionL().as(val);
          if (sfun.func === 1281) {
            this[_cgl$].disable(2960);
          } else {
            this[_cgl$].enable(2960);
            this[_cgl$].stencilFunc(sfun.func, sfun.value, sfun.mask);
          }
          break;
        }
        case "cStencilOp":
        {
          let op = T.TheStencilOpL().as(val);
          this[_cgl$].stencilOp(op.fail, op.zfail, op.zpass);
          break;
        }
        case "cDepthWrite":
        {
          this[_cgl$].depthMask(T.boolL().as(val));
          break;
        }
        case "cBlendEquation":
        {
          let beq = T.TheBlendEquationL().as(val);
          if (beq.equation === 1281) {
            this[_cgl$].disable(3042);
          } else {
            this[_cgl$].enable(3042);
            this[_cgl$].blendFunc(beq.srcFactor, beq.dstFactor);
            this[_cgl$].blendEquation(beq.equation);
          }
          break;
        }
        case "cColorWrite":
        {
          let bb = T.ListLOfboolL().as(val);
          this[_cgl$].colorMask(bb[$_get](0), bb[$_get](1), bb[$_get](2), bb[$_get](3));
          break;
        }
        case "cStencilWrite":
        {
          this[_cgl$].stencilMask(T.intL().as(val));
          break;
        }
        default:
        {
          if (!false) dart.assertFailed("unknown control canonical " + dart.str(canonical), I[1], 146, 16, "false");
        }
      }
    }
    [_SetUniform](group, canonical, val) {
      if (dart.test(this[_uniformsInitialized][$containsKey](canonical))) {
        lib.LogError(dart.str(this.name) + ":  " + dart.str(canonical) + " : group [" + dart.str(group) + "] overwrites [" + dart.str(canonical) + "] (" + dart.str(this[_uniformsInitialized][$_get](canonical)) + ")");
      }
      this[_uniformsInitialized][$_set](canonical, group);
      let desc = lib.RetrieveShaderVarDesc(canonical);
      if (desc == null) dart.throw("unknown " + dart.str(canonical));
      if (!dart.test(this[_uniformLocations][$containsKey](canonical))) dart.assertFailed(null, I[1], 162, 12, "_uniformLocations.containsKey(canonical)");
      let l = this[_uniformLocations][$_get](canonical);
      switch (desc.type) {
        case "int":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniform1i(T.UniformLocationL().as(l), T.intL().as(val));
          } else if (T.Int32ListL().is(val)) {
            this[_cgl$].uniform1iv(T.UniformLocationL().as(l), val);
          }
          break;
        }
        case "float":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniform1f(T.UniformLocationL().as(l), T.doubleL().as(val));
          } else if (T.Float32ListL().is(val)) {
            this[_cgl$].uniform1fv(T.UniformLocationL().as(l), val);
          }
          break;
        }
        case "mat4":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniformMatrix4fv(T.UniformLocationL().as(l), false, T.Matrix4L().as(val).storage);
          } else if (T.Float32ListL().is(val)) {
            this[_cgl$].uniformMatrix4fv(T.UniformLocationL().as(l), false, val);
          } else {
            if (!false) dart.assertFailed("bad unform: " + dart.str(canonical), I[1], 185, 18, "false");
          }
          break;
        }
        case "mat3":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniformMatrix3fv(T.UniformLocationL().as(l), false, T.Matrix3L().as(val).storage);
          } else if (T.Float32ListL().is(val)) {
            this[_cgl$].uniformMatrix3fv(T.UniformLocationL().as(l), false, val);
          } else {
            if (!false) dart.assertFailed("bad unform: " + dart.str(canonical), I[1], 194, 18, "false");
          }
          break;
        }
        case "vec4":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniform4fv(T.UniformLocationL().as(l), T.Vector4L().as(val).storage);
          } else {
            this[_cgl$].uniform4fv(T.UniformLocationL().as(l), T.Float32ListL().as(val));
          }
          break;
        }
        case "vec3":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniform3fv(T.UniformLocationL().as(l), T.Vector3L().as(val).storage);
          } else {
            this[_cgl$].uniform3fv(T.UniformLocationL().as(l), T.Float32ListL().as(val));
          }
          break;
        }
        case "vec2":
        {
          if (desc.arraySize === 0) {
            this[_cgl$].uniform2fv(T.UniformLocationL().as(l), T.Vector2L().as(val).storage);
          } else {
            this[_cgl$].uniform2fv(T.UniformLocationL().as(l), T.Float32ListL().as(val));
          }
          break;
        }
        case "sampler2D":
        case "sampler2DShadow":
        {
          this[_cgl$].activeTexture(33984 + dart.notNull(this[_nextTextureUnit]));
          this[_cgl$].bindTexture(3553, T.TextureL$1().as(T.TextureL().as(val).GetTexture()));
          this[_cgl$].uniform1i(T.UniformLocationL().as(l), this[_nextTextureUnit]);
          this[_nextTextureUnit] = dart.notNull(this[_nextTextureUnit]) + 1;
          break;
        }
        case "samplerCube":
        {
          if (!(canonical === "uCubeTexture")) dart.assertFailed(null, I[1], 226, 16, "canonical == uCubeTexture");
          this[_cgl$].activeTexture(33984 + dart.notNull(this[_nextTextureUnit]));
          this[_cgl$].bindTexture(34067, T.TextureL$1().as(T.TextureL().as(val).GetTexture()));
          this[_cgl$].uniform1i(T.UniformLocationL().as(l), this[_nextTextureUnit]);
          this[_nextTextureUnit] = dart.notNull(this[_nextTextureUnit]) + 1;
          break;
        }
        default:
        {
          core.print("Error: unknow uniform type: " + dart.str(desc.type));
          if (!false) dart.assertFailed(null, I[1], 234, 16, "false");
        }
      }
    }
    UninitializedInputs() {
      if (this[_uniformsInitialized][$length] == this[_uniformLocations][$length] && this[_attributesInitialized][$length] == this[_attributes][$length]) return T.JSArrayOfStringL().of([]);
      let out = T.JSArrayOfStringL().of([]);
      for (let u of this[_uniformLocations][$keys]) {
        if (!dart.test(this[_uniformsInitialized][$containsKey](u))) out[$add](u);
      }
      for (let u of this[_attributes]) {
        if (!dart.test(this[_attributesInitialized].contains(u))) out[$add](u);
      }
      return out;
    }
    [_ActivateUniforms](group, inputs) {
      let count = 0;
      let start = new core.DateTime.now();
      for (let canonical of inputs[$keys]) {
        switch (canonical[$codeUnitAt](0)) {
          case 117:
          {
            if (dart.test(this[_HasUniform](canonical))) {
              this[_SetUniform](group, canonical, inputs[$_get](canonical));
              count = count + 1;
            }
            break;
          }
          case 99:
          {
            this[_SetControl](canonical, inputs[$_get](canonical));
            count = count + 1;
            break;
          }
        }
      }
      let delta = new core.DateTime.now().difference(start);
      lib.LogDebug("setting " + dart.str(count) + " var in " + dart.str(delta));
    }
    Draw(md, uniforms, stats = null) {
      let start = new core.DateTime.now();
      this[_cgl$].useProgram(T.ProgramL().as(this[_program]));
      this[_ClearState]();
      this[_uniformsInitialized][$clear]();
      let haveSeenMaterial = false;
      for (let u of uniforms) {
        this[_ActivateUniforms](u.name, u.GetUniforms());
        if (T.MaterialL().is(u)) {
          if (!!haveSeenMaterial) dart.assertFailed("in program " + dart.str(this.name) + ": multiple materials specified", I[1], 284, 16, "!haveSeenMaterial");
          haveSeenMaterial = true;
        }
      }
      this[_attributesInitialized].clear();
      for (let a of md.GetAttributes()) {
        this[_attributesInitialized].add(a);
      }
      if (dart.test(this.debug)) core.print("[" + dart.str(this.name) + "] draw points: " + dart.str(md.drawMode) + " instances" + dart.str(md.GetNumInstances()));
      let uninitialized = this.UninitializedInputs();
      if (dart.test(uninitialized[$isNotEmpty])) {
        let mesg = dart.str(this.name) + " " + dart.str(md.drawMode) + ": uninitialized inputs: " + dart.str(uninitialized);
        lib.LogError(mesg);
      }
      md.Activate();
      let hasTransforms = dart.notNull(this[_shaderObjectV$].transformVars[$length]) > 0;
      this[_cgl$].draw(md.drawMode, md.GetNumItems(), md.elementArrayBufferType, 0, md.GetNumInstances(), hasTransforms);
      if (dart.test(this.debug)) core.print(this[_cgl$].getProgramInfoLog(T.ProgramL().as(this[_program])));
      if (stats != null) {
        stats[$add](new lib.DrawStats.new(this.name, md.GetNumInstances(), md.GetNumItems(), md.drawMode, new core.DateTime.now().difference(start)));
      }
    }
  };
  (lib.RenderProgram.new = function(name, _cgl, _shaderObjectV, _shaderObjectF) {
    this[_uniformLocations] = new (T.IdentityMapOfStringL$ObjectL()).new();
    this[_uniformsInitialized] = new (T.IdentityMapOfStringL$StringL()).new();
    this[_attributesInitialized] = T.LinkedHashSetOfStringL().new();
    this[_nextTextureUnit] = null;
    this[_cgl$] = _cgl;
    this[_shaderObjectV$] = _shaderObjectV;
    this[_shaderObjectF$] = _shaderObjectF;
    this[_program] = _cgl.CompileWholeProgram(_shaderObjectV.shader, _shaderObjectF.shader, _shaderObjectV.transformVars);
    this[_attributes] = T.LinkedHashSetOfStringL().from(_shaderObjectV.attributeVars);
    lib.RenderProgram.__proto__.new.call(this, name);
    for (let v of this[_shaderObjectV$].uniformVars) {
      this[_uniformLocations][$_set](v, this[_cgl$].getUniformLocation(T.ProgramL().as(this[_program]), v));
    }
    for (let v of this[_shaderObjectF$].uniformVars) {
      this[_uniformLocations][$_set](v, this[_cgl$].getUniformLocation(T.ProgramL().as(this[_program]), v));
    }
  }).prototype = lib.RenderProgram.prototype;
  dart.addTypeTests(lib.RenderProgram);
  dart.addTypeCaches(lib.RenderProgram);
  dart.setMethodSignature(lib.RenderProgram, () => ({
    __proto__: dart.getMethods(lib.RenderProgram.__proto__),
    GetTransformBindingIndex: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)]),
    MakeMeshData: dart.fnType(dart.legacy(lib.MeshData), [dart.legacy(core.String), dart.legacy(core.int)]),
    HasCompatibleAttributesTo: dart.fnType(dart.legacy(core.bool), [dart.legacy(lib.RenderProgram)]),
    HasDownwardCompatibleAttributesTo: dart.fnType(dart.legacy(core.bool), [dart.legacy(lib.RenderProgram)]),
    [_ClearState]: dart.fnType(dart.void, []),
    getContext: dart.fnType(dart.legacy(lib.FlutterWGL), []),
    [_HasUniform]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    [_SetControl]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.Object)]),
    [_SetUniform]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.Object)]),
    UninitializedInputs: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), []),
    [_ActivateUniforms]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))]),
    Draw: dart.fnType(dart.void, [dart.legacy(lib.MeshData), dart.legacy(core.List$(dart.legacy(lib.UniformGroup)))], [dart.legacy(core.List$(dart.legacy(lib.DrawStats)))])
  }));
  dart.setGetterSignature(lib.RenderProgram, () => ({
    __proto__: dart.getGetters(lib.RenderProgram.__proto__),
    shaderObjectV: dart.legacy(lib.ShaderObject),
    shaderObjectF: dart.legacy(lib.ShaderObject)
  }));
  dart.setLibraryUri(lib.RenderProgram, I[0]);
  dart.setFieldSignature(lib.RenderProgram, () => ({
    __proto__: dart.getFields(lib.RenderProgram.__proto__),
    [_cgl$]: dart.finalFieldType(dart.legacy(lib.FlutterWGL)),
    [_shaderObjectV$]: dart.finalFieldType(dart.legacy(lib.ShaderObject)),
    [_shaderObjectF$]: dart.finalFieldType(dart.legacy(lib.ShaderObject)),
    [_program]: dart.finalFieldType(dart.legacy(core.Object)),
    [_attributes]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core.String)))),
    [_uniformLocations]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))),
    [_uniformsInitialized]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    [_attributesInitialized]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core.String)))),
    [_nextTextureUnit]: dart.fieldType(dart.legacy(core.int))
  }));
  var _buffers = dart.privateName(lib, "_buffers");
  var _indexBuffer = dart.privateName(lib, "_indexBuffer");
  var _instances = dart.privateName(lib, "_instances");
  var _indexBufferType = dart.privateName(lib, "_indexBufferType");
  var _vertices = dart.privateName(lib, "_vertices");
  var _faces = dart.privateName(lib, "_faces");
  var _drawMode$ = dart.privateName(lib, "_drawMode");
  var _locationMap$ = dart.privateName(lib, "_locationMap");
  var _vao = dart.privateName(lib, "_vao");
  lib.MeshData = class MeshData extends lib.NamedEntity {
    clearData() {
      for (let canonical of this[_buffers][$keys]) {
        this[_cgl$].deleteBuffer(T.BufferL().as(this[_buffers][$_get](canonical)));
      }
      if (this[_indexBuffer] != null) {
        this[_cgl$].deleteBuffer(T.BufferL().as(this[_indexBuffer]));
      }
    }
    ChangeAttribute(canonical, data, width) {
      if (dart.test(this.debug)) core.print("ChangeBuffer " + dart.str(canonical) + " " + dart.str(data[$length]));
      if (canonical[$codeUnitAt](0) === 105) {
        if (!((dart.notNull(data[$length]) / dart.notNull(width))[$truncate]() === this[_instances])) dart.assertFailed("ChangeAttribute " + dart.str(this[_instances]), I[2], 92, 11, "data.length ~/ width == _instances");
      } else {
        if (!((dart.notNull(data[$length]) / dart.notNull(width))[$truncate]() === (dart.notNull(this[_vertices][$length]) / 3)[$truncate]())) dart.assertFailed("wrong size for attribute: " + dart.str(canonical) + " expected: " + dart.str((dart.notNull(this[_vertices][$length]) / 3)[$truncate]()) + " got: " + dart.str((dart.notNull(data[$length]) / dart.notNull(width))[$truncate]()), I[2], 94, 14, "data.length ~/ width == _vertices.length ~/ 3");
      }
      this[_attributes][$_set](canonical, T.Float32ListL().as(data));
      this[_cgl$].ChangeArrayBuffer(T.BufferL().as(this[_buffers][$_get](canonical)), data);
    }
    ChangeVertices(data) {
      let canonical = "aPosition";
      this[_vertices] = data;
      this.ChangeAttribute(canonical, data, 3);
    }
    SupportsAttribute(canonical) {
      return this[_locationMap$][$containsKey](canonical);
    }
    get drawMode() {
      return this[_drawMode$];
    }
    get elementArrayBufferType() {
      return this[_indexBufferType];
    }
    GetNumItems() {
      if (this[_faces] != null) {
        return this[_faces][$length];
      }
      return (dart.notNull(this[_vertices][$length]) / 3)[$truncate]();
    }
    GetNumInstances() {
      return this[_instances];
    }
    GetAttribute(canonical) {
      return this[_attributes][$_get](canonical);
    }
    GetBuffer(canonical) {
      return this[_buffers][$_get](canonical);
    }
    AddAttribute(canonical, data, width) {
      let instanced = canonical[$codeUnitAt](0) === 105;
      if (instanced && this[_instances] === 0) {
        this[_instances] = (dart.notNull(data[$length]) / dart.notNull(width))[$truncate]();
      }
      this[_buffers][$_set](canonical, this[_cgl$].createBuffer());
      this.ChangeAttribute(canonical, data, width);
      let desc = lib.RetrieveShaderVarDesc(canonical);
      if (desc == null) dart.throw("Unknown canonical " + dart.str(canonical));
      if (!dart.test(this[_locationMap$][$containsKey](canonical))) dart.assertFailed("unexpected attribute " + dart.str(canonical), I[2], 143, 12, "_locationMap.containsKey(canonical)");
      let index = this[_locationMap$][$_get](canonical);
      this[_cgl$].bindVertexArray(T.VertexArrayObjectL().as(this[_vao]));
      this[_cgl$].enableVertexAttribArray(index, instanced ? 1 : 0);
      this[_cgl$].vertexAttribPointer(T.BufferL().as(this[_buffers][$_get](canonical)), index, desc.GetSize(), 5126, false, 0, 0);
    }
    AddVertices(data) {
      let canonical = "aPosition";
      this[_buffers][$_set](canonical, this[_cgl$].createBuffer());
      this.ChangeVertices(data);
      let desc = lib.RetrieveShaderVarDesc(canonical);
      if (desc == null) dart.throw("Unknown canonical " + canonical);
      if (!dart.test(this[_locationMap$][$containsKey](canonical))) dart.assertFailed(null, I[2], 159, 12, "_locationMap.containsKey(canonical)");
      let index = this[_locationMap$][$_get](canonical);
      this[_cgl$].bindVertexArray(T.VertexArrayObjectL().as(this[_vao]));
      this[_cgl$].enableVertexAttribArray(index, 0);
      this[_cgl$].vertexAttribPointer(T.BufferL().as(this[_buffers][$_get](canonical)), index, desc.GetSize(), 5126, false, 0, 0);
    }
    ChangeFaces(faces) {
      if (!(this[_vertices] != null)) dart.assertFailed(null, I[2], 168, 12, "_vertices != null");
      if (dart.notNull(this[_vertices][$length]) < 3 * 256) {
        this[_faces] = _native_typed_data.NativeUint8List.fromList(faces);
        this[_indexBufferType] = 5121;
      } else if (dart.notNull(this[_vertices][$length]) < 3 * 65536) {
        this[_faces] = _native_typed_data.NativeUint16List.fromList(faces);
        this[_indexBufferType] = 5123;
      } else {
        this[_faces] = _native_typed_data.NativeUint32List.fromList(faces);
        this[_indexBufferType] = 5125;
      }
      this[_cgl$].bindVertexArray(T.VertexArrayObjectL().as(this[_vao]));
      this[_cgl$].ChangeElementArrayBuffer(T.BufferL().as(this[_indexBuffer]), T.TypedDataL().as(this[_faces]));
    }
    AddFaces(faces) {
      this[_indexBuffer] = this[_cgl$].createBuffer();
      this.ChangeFaces(faces);
    }
    Activate() {
      this[_cgl$].bindVertexArray(T.VertexArrayObjectL().as(this[_vao]));
    }
    GetAttributes() {
      return this[_attributes][$keys];
    }
    toString() {
      let nf = this[_faces] == null ? 0 : this[_faces][$length];
      let lst = T.JSArrayOfStringL().of(["Faces:" + dart.str(nf)]);
      for (let c of this[_attributes][$keys]) {
        lst[$add](dart.str(c) + ":" + dart.str(this[_attributes][$_get](c)[$length]));
      }
      return "MESH[" + dart.str(this.name) + "] " + dart.notNull(lst[$join]("  "));
    }
  };
  (lib.MeshData.new = function(name, _cgl, _drawMode, _locationMap) {
    this[_buffers] = new (T.IdentityMapOfStringL$ObjectL()).new();
    this[_indexBuffer] = null;
    this[_instances] = 0;
    this[_indexBufferType] = -1;
    this[_vertices] = null;
    this[_faces] = null;
    this[_attributes] = new (T.IdentityMapOfStringL$Float32ListL()).new();
    this[_cgl$] = _cgl;
    this[_drawMode$] = _drawMode;
    this[_locationMap$] = _locationMap;
    this[_vao] = _cgl.createVertexArray();
    lib.MeshData.__proto__.new.call(this, "meshdata:" + dart.notNull(name));
    ;
  }).prototype = lib.MeshData.prototype;
  dart.addTypeTests(lib.MeshData);
  dart.addTypeCaches(lib.MeshData);
  dart.setMethodSignature(lib.MeshData, () => ({
    __proto__: dart.getMethods(lib.MeshData.__proto__),
    clearData: dart.fnType(dart.void, []),
    ChangeAttribute: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List), dart.legacy(core.int)]),
    ChangeVertices: dart.fnType(dart.void, [dart.legacy(typed_data.Float32List)]),
    SupportsAttribute: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    GetNumItems: dart.fnType(dart.legacy(core.int), []),
    GetNumInstances: dart.fnType(dart.legacy(core.int), []),
    GetAttribute: dart.fnType(dart.legacy(typed_data.Float32List), [dart.legacy(core.String)]),
    GetBuffer: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    AddAttribute: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List), dart.legacy(core.int)]),
    AddVertices: dart.fnType(dart.void, [dart.legacy(typed_data.Float32List)]),
    ChangeFaces: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int)))]),
    AddFaces: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int)))]),
    Activate: dart.fnType(dart.void, []),
    GetAttributes: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(core.String))), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(lib.MeshData, () => ({
    __proto__: dart.getGetters(lib.MeshData.__proto__),
    drawMode: dart.legacy(core.int),
    elementArrayBufferType: dart.legacy(core.int)
  }));
  dart.setLibraryUri(lib.MeshData, I[0]);
  dart.setFieldSignature(lib.MeshData, () => ({
    __proto__: dart.getFields(lib.MeshData.__proto__),
    [_cgl$]: dart.finalFieldType(dart.legacy(lib.FlutterWGL)),
    [_vao]: dart.finalFieldType(dart.legacy(core.Object)),
    [_drawMode$]: dart.finalFieldType(dart.legacy(core.int)),
    [_buffers]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))),
    [_locationMap$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.int)))),
    [_indexBuffer]: dart.fieldType(dart.legacy(core.Object)),
    [_instances]: dart.fieldType(dart.legacy(core.int)),
    [_indexBufferType]: dart.fieldType(dart.legacy(core.int)),
    [_vertices]: dart.fieldType(dart.legacy(typed_data.Float32List)),
    [_faces]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    [_attributes]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(typed_data.Float32List))))
  }));
  dart.defineExtensionMethods(lib.MeshData, ['toString']);
  var mipmap = dart.privateName(lib, "TextureProperties.mipmap");
  var clamp = dart.privateName(lib, "TextureProperties.clamp");
  var shadow = dart.privateName(lib, "TextureProperties.shadow");
  var flipY = dart.privateName(lib, "TextureProperties.flipY");
  var anisotropicFilterLevel = dart.privateName(lib, "TextureProperties.anisotropicFilterLevel");
  var minFilter = dart.privateName(lib, "TextureProperties.minFilter");
  var magFilter = dart.privateName(lib, "TextureProperties.magFilter");
  lib.TextureProperties = class TextureProperties extends core.Object {
    get mipmap() {
      return this[mipmap];
    }
    set mipmap(value) {
      this[mipmap] = value;
    }
    get clamp() {
      return this[clamp];
    }
    set clamp(value) {
      this[clamp] = value;
    }
    get shadow() {
      return this[shadow];
    }
    set shadow(value) {
      this[shadow] = value;
    }
    get flipY() {
      return this[flipY];
    }
    set flipY(value) {
      this[flipY] = value;
    }
    get anisotropicFilterLevel() {
      return this[anisotropicFilterLevel];
    }
    set anisotropicFilterLevel(value) {
      this[anisotropicFilterLevel] = value;
    }
    get minFilter() {
      return this[minFilter];
    }
    set minFilter(value) {
      this[minFilter] = value;
    }
    get magFilter() {
      return this[magFilter];
    }
    set magFilter(value) {
      this[magFilter] = value;
    }
    SetFilterNearest() {
      this.minFilter = 9728;
      this.magFilter = 9728;
    }
    SetMipmapLinear() {
      this.mipmap = true;
      this.minFilter = 9987;
      this.magFilter = 9729;
    }
    InstallEarly(cgl, type) {
      cgl.pixelStorei(37440, dart.test(this.flipY) ? 1 : 0);
    }
    InstallLate(cgl, type) {
      if (this.anisotropicFilterLevel !== 1) {
        cgl.texParameterf(type, 34046, dart.notNull(this.anisotropicFilterLevel) + 0.0);
      }
      cgl.texParameteri(type, 10240, this.magFilter);
      cgl.texParameteri(type, 10241, this.minFilter);
      if (dart.test(this.clamp)) {
        cgl.texParameteri(type, 10242, 33071);
        cgl.texParameteri(type, 10243, 33071);
      }
      if (dart.test(this.mipmap)) {
        cgl.generateMipmap(type);
      }
      if (dart.test(this.shadow)) {
        cgl.texParameteri(type, 34892, 34894);
      }
    }
  };
  (lib.TextureProperties.new = function() {
    this[mipmap] = false;
    this[clamp] = false;
    this[shadow] = false;
    this[flipY] = true;
    this[anisotropicFilterLevel] = 1;
    this[minFilter] = 9729;
    this[magFilter] = 9729;
    ;
  }).prototype = lib.TextureProperties.prototype;
  dart.addTypeTests(lib.TextureProperties);
  dart.addTypeCaches(lib.TextureProperties);
  dart.setMethodSignature(lib.TextureProperties, () => ({
    __proto__: dart.getMethods(lib.TextureProperties.__proto__),
    SetFilterNearest: dart.fnType(dart.void, []),
    SetMipmapLinear: dart.fnType(dart.void, []),
    InstallEarly: dart.fnType(dart.void, [dart.legacy(lib.FlutterWGL), dart.legacy(core.int)]),
    InstallLate: dart.fnType(dart.void, [dart.legacy(lib.FlutterWGL), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lib.TextureProperties, I[0]);
  dart.setFieldSignature(lib.TextureProperties, () => ({
    __proto__: dart.getFields(lib.TextureProperties.__proto__),
    mipmap: dart.fieldType(dart.legacy(core.bool)),
    clamp: dart.fieldType(dart.legacy(core.bool)),
    shadow: dart.fieldType(dart.legacy(core.bool)),
    flipY: dart.fieldType(dart.legacy(core.bool)),
    anisotropicFilterLevel: dart.fieldType(dart.legacy(core.int)),
    minFilter: dart.fieldType(dart.legacy(core.int)),
    magFilter: dart.fieldType(dart.legacy(core.int))
  }));
  var properties$ = dart.privateName(lib, "Texture.properties");
  var _textureType$ = dart.privateName(lib, "_textureType");
  var _url$ = dart.privateName(lib, "_url");
  var _texture = dart.privateName(lib, "_texture");
  lib.Texture = class Texture extends core.Object {
    get properties() {
      return this[properties$];
    }
    set properties(value) {
      super.properties = value;
    }
    CopyFromFramebuffer2D(x, y, w, h) {
      this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
      this[_cgl$].copyTexImage2D(this[_textureType$], 0, 6408, x, y, w, h);
      this.Install();
    }
    Install() {
      this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
      this.properties.InstallLate(this[_cgl$], this[_textureType$]);
      let err = this[_cgl$].getError();
      if (!(err === 0)) dart.assertFailed(null, I[3], 136, 12, "err == GL_NO_ERROR");
    }
    GetTextureType() {
      return this[_textureType$];
    }
    GetTexture() {
      return this[_texture];
    }
    toString() {
      return "Texture[" + dart.str(this[_url$]) + ", " + dart.str(this[_textureType$]) + "]";
    }
  };
  (lib.Texture.new = function(_cgl, _textureType, _url, properties) {
    this[_cgl$] = _cgl;
    this[_textureType$] = _textureType;
    this[_url$] = _url;
    this[properties$] = properties;
    this[_texture] = _cgl.createTexture();
    ;
  }).prototype = lib.Texture.prototype;
  dart.addTypeTests(lib.Texture);
  dart.addTypeCaches(lib.Texture);
  dart.setMethodSignature(lib.Texture, () => ({
    __proto__: dart.getMethods(lib.Texture.__proto__),
    CopyFromFramebuffer2D: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    Install: dart.fnType(dart.void, []),
    GetTextureType: dart.fnType(dart.legacy(core.int), []),
    GetTexture: dart.fnType(dart.legacy(core.Object), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.Texture, I[0]);
  dart.setFieldSignature(lib.Texture, () => ({
    __proto__: dart.getFields(lib.Texture.__proto__),
    [_url$]: dart.finalFieldType(dart.legacy(core.String)),
    [_texture]: dart.finalFieldType(dart.legacy(core.Object)),
    [_textureType$]: dart.finalFieldType(dart.legacy(core.int)),
    [_cgl$]: dart.finalFieldType(dart.legacy(lib.FlutterWGL)),
    properties: dart.finalFieldType(dart.legacy(lib.TextureProperties))
  }));
  dart.defineExtensionMethods(lib.Texture, ['toString']);
  var _width$ = dart.privateName(lib, "_width");
  var _height$ = dart.privateName(lib, "_height");
  var _internalFormat$ = dart.privateName(lib, "_internalFormat");
  lib.TypedTexture = class TypedTexture extends lib.Texture {
    toString() {
      return "TypedTexture[" + dart.str(this[_url$]) + ", " + dart.str(this[_internalFormat$]) + ", " + dart.str(this[_width$]) + " X " + dart.str(this[_height$]) + "]";
    }
  };
  (lib.TypedTexture.new = function(cgl, url, _width, _height, _internalFormat, prop) {
    this[_width$] = _width;
    this[_height$] = _height;
    this[_internalFormat$] = _internalFormat;
    lib.TypedTexture.__proto__.new.call(this, cgl, 3553, url, prop);
    this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
    this[_cgl$].texStorage2D(3553, 1, this[_internalFormat$], this[_width$], this[_height$]);
    this.properties.InstallLate(this[_cgl$], this[_textureType$]);
    let err = this[_cgl$].getError();
    if (!(err === 0)) dart.assertFailed("texture error " + dart.str(err), I[3], 160, 12, "err == GL_NO_ERROR");
    this[_cgl$].bindTexture(this[_textureType$], null);
  }).prototype = lib.TypedTexture.prototype;
  dart.addTypeTests(lib.TypedTexture);
  dart.addTypeCaches(lib.TypedTexture);
  dart.setLibraryUri(lib.TypedTexture, I[0]);
  dart.setFieldSignature(lib.TypedTexture, () => ({
    __proto__: dart.getFields(lib.TypedTexture.__proto__),
    [_width$]: dart.finalFieldType(dart.legacy(core.int)),
    [_height$]: dart.finalFieldType(dart.legacy(core.int)),
    [_internalFormat$]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(lib.TypedTexture, ['toString']);
  lib.TypedTextureMutable = class TypedTextureMutable extends lib.Texture {
    UpdateContent(data, format, datatype) {
      this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
      this[_cgl$].texImage2D(3553, 0, this[_internalFormat$], this[_width$], this[_height$], 0, format, datatype, data);
      this[_cgl$].bindTexture(this[_textureType$], null);
    }
    UpdateContentPartial(data, formatType, scalarType, x, y, w, h) {
      this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
      this[_cgl$].texSubImage2D(3553, 0, x, y, w, h, formatType, scalarType, data);
      this[_cgl$].bindTexture(this[_textureType$], null);
    }
    toString() {
      return "TypedTextureMutable[" + dart.str(this[_url$]) + ", " + dart.str(this[_internalFormat$]) + ", " + dart.str(this[_width$]) + " X " + dart.str(this[_height$]) + "]";
    }
  };
  (lib.TypedTextureMutable.new = function(cgl, url, _width, _height, _internalFormat, prop, format, datatype, data) {
    this[_width$] = _width;
    this[_height$] = _height;
    this[_internalFormat$] = _internalFormat;
    lib.TypedTextureMutable.__proto__.new.call(this, cgl, 3553, url, prop);
    this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
    this[_cgl$].texImage2D(3553, 0, this[_internalFormat$], this[_width$], this[_height$], 0, format, datatype, data);
    this.properties.InstallLate(this[_cgl$], this[_textureType$]);
    let err = this[_cgl$].getError();
    if (!(err === 0)) dart.assertFailed("texture error " + dart.str(err), I[3], 198, 12, "err == GL_NO_ERROR");
    this[_cgl$].bindTexture(this[_textureType$], null);
  }).prototype = lib.TypedTextureMutable.prototype;
  dart.addTypeTests(lib.TypedTextureMutable);
  dart.addTypeCaches(lib.TypedTextureMutable);
  dart.setMethodSignature(lib.TypedTextureMutable, () => ({
    __proto__: dart.getMethods(lib.TypedTextureMutable.__proto__),
    UpdateContent: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.int), dart.legacy(core.int)]),
    UpdateContentPartial: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lib.TypedTextureMutable, I[0]);
  dart.setFieldSignature(lib.TypedTextureMutable, () => ({
    __proto__: dart.getFields(lib.TypedTextureMutable.__proto__),
    [_width$]: dart.finalFieldType(dart.legacy(core.int)),
    [_height$]: dart.finalFieldType(dart.legacy(core.int)),
    [_internalFormat$]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(lib.TypedTextureMutable, ['toString']);
  var _element$ = dart.privateName(lib, "_element");
  lib.ImageTexture = class ImageTexture extends lib.Texture {
    SetImageData(data) {
      this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
      this[_cgl$].texImage2Dweb(this[_textureType$], 0, 6408, 6408, 5121, data);
    }
    Update() {
      this.SetImageData(this[_element$]);
      this[_cgl$].bindTexture(this[_textureType$], null);
    }
  };
  (lib.ImageTexture.new = function(cgl, url, _element, tp = null, textureType = 3553) {
    this[_element$] = _element;
    lib.ImageTexture.__proto__.new.call(this, cgl, textureType, url, tp == null ? new lib.TextureProperties.new() : tp);
    this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
    this.properties.InstallEarly(this[_cgl$], this[_textureType$]);
    this.SetImageData(this[_element$]);
    this.properties.InstallLate(this[_cgl$], this[_textureType$]);
    let err = this[_cgl$].getError();
    if (!(err === 0)) dart.assertFailed(null, I[3], 257, 12, "err == GL_NO_ERROR");
    this[_cgl$].bindTexture(this[_textureType$], null);
  }).prototype = lib.ImageTexture.prototype;
  dart.addTypeTests(lib.ImageTexture);
  dart.addTypeCaches(lib.ImageTexture);
  dart.setMethodSignature(lib.ImageTexture, () => ({
    __proto__: dart.getMethods(lib.ImageTexture.__proto__),
    SetImageData: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    Update: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(lib.ImageTexture, I[0]);
  dart.setFieldSignature(lib.ImageTexture, () => ({
    __proto__: dart.getFields(lib.ImageTexture.__proto__),
    [_element$]: dart.fieldType(dart.dynamic)
  }));
  lib.CubeTexture = class CubeTexture extends lib.Texture {};
  (lib.CubeTexture.new = function(cgl, url, images) {
    let t0;
    lib.CubeTexture.__proto__.new.call(this, cgl, 34067, url, (t0 = new lib.TextureProperties.new(), (() => {
      t0.clamp = true;
      return t0;
    })()));
    if (!(images[$length] == lib._kCubeModifier[$length])) dart.assertFailed(null, I[3], 289, 12, "images.length == _kCubeModifier.length");
    this.properties.InstallEarly(this[_cgl$], this[_textureType$]);
    this[_cgl$].bindTexture(this[_textureType$], T.TextureL$1().as(this[_texture]));
    for (let i = 0; i < dart.notNull(lib._kCubeModifier[$length]); i = i + 1) {
      this[_cgl$].texImage2Dweb(lib._kCubeModifier[$_get](i), 0, 6408, 6408, 5121, images[$_get](i));
    }
    this.properties.InstallLate(this[_cgl$], this[_textureType$]);
    let err = this[_cgl$].getError();
    if (!(err === 0)) dart.assertFailed(null, I[3], 299, 12, "err == GL_NO_ERROR");
    this[_cgl$].bindTexture(this[_textureType$], null);
    this.properties.clamp = true;
  }).prototype = lib.CubeTexture.prototype;
  dart.addTypeTests(lib.CubeTexture);
  dart.addTypeCaches(lib.CubeTexture);
  dart.setLibraryUri(lib.CubeTexture, I[0]);
  var func$ = dart.privateName(lib, "TheStencilFunction.func");
  var value$ = dart.privateName(lib, "TheStencilFunction.value");
  var mask$ = dart.privateName(lib, "TheStencilFunction.mask");
  lib.TheStencilFunction = class TheStencilFunction extends core.Object {
    get func() {
      return this[func$];
    }
    set func(value) {
      this[func$] = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      this[value$] = value;
    }
    get mask() {
      return this[mask$];
    }
    set mask(value) {
      this[mask$] = value;
    }
  };
  (lib.TheStencilFunction.new = function(func, value, mask) {
    this[func$] = func;
    this[value$] = value;
    this[mask$] = mask;
    ;
  }).prototype = lib.TheStencilFunction.prototype;
  dart.addTypeTests(lib.TheStencilFunction);
  dart.addTypeCaches(lib.TheStencilFunction);
  dart.setLibraryUri(lib.TheStencilFunction, I[0]);
  dart.setFieldSignature(lib.TheStencilFunction, () => ({
    __proto__: dart.getFields(lib.TheStencilFunction.__proto__),
    func: dart.fieldType(dart.legacy(core.int)),
    value: dart.fieldType(dart.legacy(core.int)),
    mask: dart.fieldType(dart.legacy(core.int))
  }));
  var fail$ = dart.privateName(lib, "TheStencilOp.fail");
  var zfail$ = dart.privateName(lib, "TheStencilOp.zfail");
  var zpass$ = dart.privateName(lib, "TheStencilOp.zpass");
  lib.TheStencilOp = class TheStencilOp extends core.Object {
    get fail() {
      return this[fail$];
    }
    set fail(value) {
      this[fail$] = value;
    }
    get zfail() {
      return this[zfail$];
    }
    set zfail(value) {
      this[zfail$] = value;
    }
    get zpass() {
      return this[zpass$];
    }
    set zpass(value) {
      this[zpass$] = value;
    }
  };
  (lib.TheStencilOp.new = function(fail, zfail, zpass) {
    this[fail$] = fail;
    this[zfail$] = zfail;
    this[zpass$] = zpass;
    ;
  }).prototype = lib.TheStencilOp.prototype;
  dart.addTypeTests(lib.TheStencilOp);
  dart.addTypeCaches(lib.TheStencilOp);
  dart.setLibraryUri(lib.TheStencilOp, I[0]);
  dart.setFieldSignature(lib.TheStencilOp, () => ({
    __proto__: dart.getFields(lib.TheStencilOp.__proto__),
    fail: dart.fieldType(dart.legacy(core.int)),
    zfail: dart.fieldType(dart.legacy(core.int)),
    zpass: dart.fieldType(dart.legacy(core.int))
  }));
  var equation$ = dart.privateName(lib, "TheBlendEquation.equation");
  var srcFactor$ = dart.privateName(lib, "TheBlendEquation.srcFactor");
  var dstFactor$ = dart.privateName(lib, "TheBlendEquation.dstFactor");
  lib.TheBlendEquation = class TheBlendEquation extends core.Object {
    get equation() {
      return this[equation$];
    }
    set equation(value) {
      this[equation$] = value;
    }
    get srcFactor() {
      return this[srcFactor$];
    }
    set srcFactor(value) {
      this[srcFactor$] = value;
    }
    get dstFactor() {
      return this[dstFactor$];
    }
    set dstFactor(value) {
      this[dstFactor$] = value;
    }
  };
  (lib.TheBlendEquation.new = function(equation, srcFactor, dstFactor) {
    this[equation$] = equation;
    this[srcFactor$] = srcFactor;
    this[dstFactor$] = dstFactor;
    ;
  }).prototype = lib.TheBlendEquation.prototype;
  dart.addTypeTests(lib.TheBlendEquation);
  dart.addTypeCaches(lib.TheBlendEquation);
  dart.setLibraryUri(lib.TheBlendEquation, I[0]);
  dart.setFieldSignature(lib.TheBlendEquation, () => ({
    __proto__: dart.getFields(lib.TheBlendEquation.__proto__),
    equation: dart.fieldType(dart.legacy(core.int)),
    srcFactor: dart.fieldType(dart.legacy(core.int)),
    dstFactor: dart.fieldType(dart.legacy(core.int))
  }));
  var _uniforms = dart.privateName(lib, "_uniforms");
  lib.UniformGroup = class UniformGroup extends lib.NamedEntity {
    SetUniform(canonical, val) {
      if (!!dart.test(this[_uniforms][$containsKey](canonical))) dart.assertFailed("uniform " + dart.str(canonical) + " already set", I[4], 34, 9, "!_uniforms.containsKey(canonical)");
      this.ForceUniform(canonical, val);
    }
    ForceUniform(canonical, val) {
      this[_uniforms][$_set](canonical, val);
    }
    HasUniform(canonical) {
      return this[_uniforms][$containsKey](canonical);
    }
    GetUniforms() {
      return this[_uniforms];
    }
    toString() {
      let out = T.JSArrayOfStringL().of(["{" + dart.str(this.runtimeType) + "}[" + dart.str(this.name) + "]"]);
      for (let key of this[_uniforms][$keys]) {
        out[$add](dart.str(key) + ": " + dart.str(this[_uniforms][$_get](key)));
      }
      return out[$join]("\n");
    }
  };
  (lib.UniformGroup.new = function(name) {
    this[_uniforms] = new (T.IdentityMapOfStringL$ObjectL()).new();
    lib.UniformGroup.__proto__.new.call(this, name);
    ;
  }).prototype = lib.UniformGroup.prototype;
  dart.addTypeTests(lib.UniformGroup);
  dart.addTypeCaches(lib.UniformGroup);
  dart.setMethodSignature(lib.UniformGroup, () => ({
    __proto__: dart.getMethods(lib.UniformGroup.__proto__),
    SetUniform: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.Object)]),
    ForceUniform: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.Object)]),
    HasUniform: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    GetUniforms: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.UniformGroup, I[0]);
  dart.setFieldSignature(lib.UniformGroup, () => ({
    __proto__: dart.getFields(lib.UniformGroup.__proto__),
    [_uniforms]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))))
  }));
  dart.defineExtensionMethods(lib.UniformGroup, ['toString']);
  lib.Material = class Material extends lib.UniformGroup {};
  (lib.Material.new = function(name) {
    lib.Material.__proto__.new.call(this, name);
    this.SetUniform("cDepthFunc", 513);
    this.SetUniform("cDepthTest", true);
    this.SetUniform("cDepthWrite", true);
    this.SetUniform("cBlendEquation", lib.BlendEquationNone);
  }).prototype = lib.Material.prototype;
  (lib.Material.Transparent = function(name, beq) {
    lib.Material.__proto__.new.call(this, name);
    this.SetUniform("cDepthFunc", 513);
    this.SetUniform("cDepthTest", true);
    this.SetUniform("cDepthWrite", false);
    this.SetUniform("cBlendEquation", beq);
  }).prototype = lib.Material.prototype;
  (lib.Material.Empty = function(name) {
    lib.Material.__proto__.new.call(this, name);
    ;
  }).prototype = lib.Material.prototype;
  dart.addTypeTests(lib.Material);
  dart.addTypeCaches(lib.Material);
  dart.setLibraryUri(lib.Material, I[0]);
  var format$ = dart.privateName(lib, "FramebufferFormat.format");
  var channels$ = dart.privateName(lib, "FramebufferFormat.channels");
  var type$ = dart.privateName(lib, "FramebufferFormat.type");
  lib.FramebufferFormat = class FramebufferFormat extends core.Object {
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get channels() {
      return this[channels$];
    }
    set channels(value) {
      this[channels$] = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    toString() {
      return "FB-FMT: " + dart.str(lib._FormatName(this.format)) + " [" + dart.str(this.channels) + "] " + dart.str(lib._TypeName(this.type));
    }
  };
  (lib.FramebufferFormat.new = function(format, channels, type) {
    this[format$] = format;
    this[channels$] = channels;
    this[type$] = type;
    ;
  }).prototype = lib.FramebufferFormat.prototype;
  (lib.FramebufferFormat.fromActive = function(cgl) {
    this[channels$] = null;
    this[format$] = T.intL().as(cgl.getParameter(35739));
    this[type$] = T.intL().as(cgl.getParameter(35738));
    this.channels = lib.TextureChannelsByType(this.format);
  }).prototype = lib.FramebufferFormat.prototype;
  dart.addTypeTests(lib.FramebufferFormat);
  dart.addTypeCaches(lib.FramebufferFormat);
  dart.setMethodSignature(lib.FramebufferFormat, () => ({
    __proto__: dart.getMethods(lib.FramebufferFormat.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.FramebufferFormat, I[0]);
  dart.setFieldSignature(lib.FramebufferFormat, () => ({
    __proto__: dart.getFields(lib.FramebufferFormat.__proto__),
    format: dart.finalFieldType(dart.legacy(core.int)),
    channels: dart.fieldType(dart.legacy(core.int)),
    type: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(lib.FramebufferFormat, ['toString']);
  var colorTexture$ = dart.privateName(lib, "Framebuffer.colorTexture");
  var depthTexture$ = dart.privateName(lib, "Framebuffer.depthTexture");
  var stencilTexture$ = dart.privateName(lib, "Framebuffer.stencilTexture");
  var _framebuffer = dart.privateName(lib, "_framebuffer");
  lib.Framebuffer = class Framebuffer extends core.Object {
    get colorTexture() {
      return this[colorTexture$];
    }
    set colorTexture(value) {
      this[colorTexture$] = value;
    }
    get depthTexture() {
      return this[depthTexture$];
    }
    set depthTexture(value) {
      this[depthTexture$] = value;
    }
    get stencilTexture() {
      return this[stencilTexture$];
    }
    set stencilTexture(value) {
      this[stencilTexture$] = value;
    }
    Activate(clear_mode, viewPortX, viewPortY, viewPortW, viewPortH) {
      this[_cgl$].bindFramebuffer(36160, T.FramebufferL().as(this[_framebuffer]));
      if (!(dart.notNull(viewPortW) > 0 && dart.notNull(viewPortH) > 0)) dart.assertFailed("width and height must be > 0: " + dart.str(viewPortW) + " " + dart.str(viewPortW), I[5], 131, 12, "viewPortW > 0 && viewPortH > 0");
      this[_cgl$].viewport(viewPortX, viewPortY, viewPortW, viewPortH);
      if (clear_mode !== 0) {
        this[_cgl$].clear(clear_mode);
      }
    }
    ExtractFloatData(buf, x, y, w, h) {
      this[_cgl$].bindFramebuffer(36160, T.FramebufferL().as(this[_framebuffer]));
      if (buf == null) {
        buf = _native_typed_data.NativeFloat32List.new(4 * dart.notNull(w) * dart.notNull(h));
      }
      this[_cgl$].readPixels(x, y, w, h, 6408, 5126, buf);
      this[_cgl$].bindFramebuffer(36160, null);
      return buf;
    }
    ExtractByteData(buf, x, y, w, h) {
      this[_cgl$].bindFramebuffer(36160, T.FramebufferL().as(this[_framebuffer]));
      if (buf == null) {
        buf = _native_typed_data.NativeUint8List.new(4 * dart.notNull(w) * dart.notNull(h));
      }
      this[_cgl$].readPixels(x, y, w, h, 6408, 5121, buf);
      this[_cgl$].bindFramebuffer(36160, null);
      return buf;
    }
  };
  (lib.Framebuffer.new = function(_cgl, colorTexture, depthTexture = null, stencilTexture = null, depthStencilCombined = false) {
    this[_framebuffer] = null;
    this[_cgl$] = _cgl;
    this[colorTexture$] = colorTexture;
    this[depthTexture$] = depthTexture;
    this[stencilTexture$] = stencilTexture;
    this[_framebuffer] = this[_cgl$].createFramebuffer();
    this[_cgl$].bindFramebuffer(36160, T.FramebufferL().as(this[_framebuffer]));
    if (this.colorTexture != null) {
      this[_cgl$].framebufferTexture2D(36160, 36064, 3553, T.TextureL$1().as(this.colorTexture.GetTexture()), 0);
    }
    if (this.depthTexture != null) {
      this[_cgl$].framebufferTexture2D(36160, dart.test(depthStencilCombined) ? 33306 : 36096, 3553, T.TextureL$1().as(this.depthTexture.GetTexture()), 0);
    }
    if (this.stencilTexture != null) {
      if (!!dart.test(depthStencilCombined)) dart.assertFailed("in combined mode - the stencil parameter must be null", I[5], 90, 14, "!depthStencilCombined");
      this[_cgl$].framebufferTexture2D(36160, 36128, 3553, T.TextureL$1().as(this.stencilTexture.GetTexture()), 0);
    }
    let err = this[_cgl$].checkFramebufferStatus(36160);
    if (!(err === 36053)) dart.assertFailed("framebuffer error: " + dart.str(err), I[5], 97, 12, "err == GL_FRAMEBUFFER_COMPLETE");
    if (err !== 36053) {
      dart.throw("Error Incomplete Framebuffer: " + dart.str(err));
    }
    this[_cgl$].bindFramebuffer(36160, null);
  }).prototype = lib.Framebuffer.prototype;
  (lib.Framebuffer.Screen = function(_cgl) {
    this[stencilTexture$] = null;
    this[depthTexture$] = null;
    this[colorTexture$] = null;
    this[_cgl$] = _cgl;
    this[_framebuffer] = null;
    ;
  }).prototype = lib.Framebuffer.prototype;
  (lib.Framebuffer.Default = function(cgl, w, h) {
    lib.Framebuffer.new.call(this, cgl, new lib.TypedTexture.new(cgl, "frame::color", w, h, 32856, lib.TexturePropertiesFramebuffer), new lib.TypedTexture.new(cgl, "frame::depth", w, h, 33190, lib.TexturePropertiesFramebuffer));
  }).prototype = lib.Framebuffer.prototype;
  (lib.Framebuffer.Effect = function(cgl, w, h) {
    lib.Framebuffer.new.call(this, cgl, new lib.TypedTexture.new(cgl, "frame::color", w, h, 32856, lib.TexturePropertiesFramebuffer));
  }).prototype = lib.Framebuffer.prototype;
  dart.addTypeTests(lib.Framebuffer);
  dart.addTypeCaches(lib.Framebuffer);
  dart.setMethodSignature(lib.Framebuffer, () => ({
    __proto__: dart.getMethods(lib.Framebuffer.__proto__),
    Activate: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    ExtractFloatData: dart.fnType(dart.legacy(typed_data.Float32List), [dart.legacy(typed_data.Float32List), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    ExtractByteData: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(typed_data.Uint8List), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lib.Framebuffer, I[0]);
  dart.setFieldSignature(lib.Framebuffer, () => ({
    __proto__: dart.getFields(lib.Framebuffer.__proto__),
    [_cgl$]: dart.fieldType(dart.legacy(lib.FlutterWGL)),
    [_framebuffer]: dart.fieldType(dart.dynamic),
    colorTexture: dart.fieldType(dart.legacy(lib.Texture)),
    depthTexture: dart.fieldType(dart.legacy(lib.Texture)),
    stencilTexture: dart.fieldType(dart.legacy(lib.Texture))
  }));
  var _gl = dart.privateName(lib, "_gl");
  var _canvas$ = dart.privateName(lib, "_canvas");
  lib.FlutterWGL = class FlutterWGL extends core.Object {
    CompileWholeProgram(vertShaderText, fragShaderText, transformVarying) {
      let program = T.ProgramL().as(dart.dsend(this[_gl], 'createProgram', []));
      let vs = lib._CompileShader(this[_gl], 35633, vertShaderText);
      dart.dsend(this[_gl], 'attachShader', [program, vs]);
      let fs = lib._CompileShader(this[_gl], 35632, fragShaderText);
      dart.dsend(this[_gl], 'attachShader', [program, fs]);
      if (dart.notNull(transformVarying[$length]) > 0) {
        dart.dsend(this[_gl], 'transformFeedbackVaryings', [program, transformVarying, 35980]);
      }
      dart.dsend(this[_gl], 'linkProgram', [program]);
      if (!dart.dtest(dart.dsend(this[_gl], 'getProgramParameter', [program, 35714]))) {
        dart.throw(dart.dsend(this[_gl], 'getProgramInfoLog', [program]));
      }
      return program;
    }
    ChangeArrayBuffer(buffer, data) {
      dart.dsend(this[_gl], 'bindBuffer', [34962, buffer]);
      dart.dsend(this[_gl], 'bufferData', [34962, data, 35048]);
    }
    GetArrayBuffer(buffer, data) {
      dart.dsend(this[_gl], 'bindBuffer', [34962, buffer]);
      dart.dsend(this[_gl], 'getBufferSubData', [34962, 0, data]);
    }
    BufferDataSetSize(kind, buf, size, usage) {
      dart.dsend(this[_gl], 'bindBuffer', [kind, buf]);
      dart.dsend(this[_gl], 'bufferData', [kind, size, usage]);
      dart.dsend(this[_gl], 'bindBuffer', [kind, null]);
    }
    GetTransformBuffer(buf, data) {
      dart.dsend(this[_gl], 'bindBuffer', [35982, buf]);
      dart.dsend(this[_gl], 'getBufferSubData', [35982, 0, data[$buffer]]);
    }
    createBuffer() {
      return T.BufferL().as(dart.dsend(this[_gl], 'createBuffer', []));
    }
    ChangeElementArrayBuffer(buf, data) {
      if (!(T.Uint16ListL().is(data) || T.Uint32ListL().is(data) || T.Uint8ListL().is(data))) dart.assertFailed(null, I[6], 129, 12, "(data is Uint16List) || (data is Uint32List) || (data is Uint8List)");
      dart.dsend(this[_gl], 'bindBuffer', [34963, buf]);
      dart.dsend(this[_gl], 'bufferData', [34963, data, 35048]);
    }
    ChangeTransformBuffer(buffer, data) {
      dart.dsend(this[_gl], 'bindBuffer', [35982, buffer]);
      dart.dsend(this[_gl], 'bufferData', [35982, data, 35048]);
    }
    deleteBuffer(buffer) {
      dart.dsend(this[_gl], 'deleteBuffer', [buffer]);
    }
    bindBuffer(kind, buffer) {
      dart.dsend(this[_gl], 'bindBuffer', [kind, buffer]);
    }
    createVertexArray() {
      return T.VertexArrayObjectL().as(dart.dsend(this[_gl], 'createVertexArray', []));
    }
    bindVertexArray(vao) {
      dart.dsend(this[_gl], 'bindVertexArray', [vao]);
    }
    copyBufferSubData(srcBuffer, dstBuffer, srcOffset, dstOffset, size) {
      dart.dsend(this[_gl], 'copyBufferSubData', [srcBuffer, dstBuffer, srcOffset, dstOffset, size]);
    }
    createFramebuffer() {
      return T.FramebufferL().as(dart.dsend(this[_gl], 'createFramebuffer', []));
    }
    bindFramebuffer(kind, framebuffer) {
      dart.dsend(this[_gl], 'bindFramebuffer', [kind, framebuffer]);
    }
    checkFramebufferStatus(kind) {
      return T.intL().as(dart.dsend(this[_gl], 'checkFramebufferStatus', [kind]));
    }
    framebufferTexture2D(target, attachment, textarget, texture, level) {
      dart.dsend(this[_gl], 'framebufferTexture2D', [target, attachment, textarget, texture, level]);
    }
    createTexture() {
      return T.TextureL$1().as(dart.dsend(this[_gl], 'createTexture', []));
    }
    bindTexture(kind, texture) {
      dart.dsend(this[_gl], 'bindTexture', [kind, texture]);
    }
    createTransformFeedback() {
      return T.TransformFeedbackL().as(dart.dsend(this[_gl], 'createTransformFeedback', []));
    }
    bindTransformFeedback(transform) {
      dart.dsend(this[_gl], 'bindTransformFeedback', [36386, transform]);
    }
    bindBufferBase(kind, offset, buffer) {
      dart.dsend(this[_gl], 'bindBufferBase', [kind, offset, buffer]);
    }
    viewport(x, y, w, h) {
      dart.dsend(this[_gl], 'viewport', [x, y, w, h]);
    }
    enable(kind) {
      dart.dsend(this[_gl], 'enable', [kind]);
    }
    cullFace(kind) {
      dart.dsend(this[_gl], 'cullFace', [kind]);
    }
    disable(kind) {
      dart.dsend(this[_gl], 'disable', [kind]);
    }
    depthMask(flag) {
      dart.dsend(this[_gl], 'depthMask', [flag]);
    }
    depthFunc(func) {
      dart.dsend(this[_gl], 'depthFunc', [func]);
    }
    blendFunc(srcFactor, dstFactor) {
      dart.dsend(this[_gl], 'blendFunc', [srcFactor, dstFactor]);
    }
    blendEquation(equation) {
      dart.dsend(this[_gl], 'blendEquation', [equation]);
    }
    stencilFunc(func, value, mask) {
      dart.dsend(this[_gl], 'stencilFunc', [func, value, mask]);
    }
    enableVertexAttribArray(index, divisor) {
      dart.dsend(this[_gl], 'enableVertexAttribArray', [index]);
      if (dart.notNull(divisor) > 0) dart.dsend(this[_gl], 'vertexAttribDivisor', [index, divisor]);
    }
    stencilOp(fail, zfail, zpass) {
      dart.dsend(this[_gl], 'stencilOp', [fail, zfail, zpass]);
    }
    stencilMask(mask) {
      dart.dsend(this[_gl], 'stencilMask', [mask]);
    }
    colorMask(r, g, b, a) {
      dart.dsend(this[_gl], 'colorMask', [r, g, b, a]);
    }
    clear(kind) {
      dart.dsend(this[_gl], 'clear', [kind]);
    }
    setLineWidth(w) {
      dart.dsend(this[_gl], 'lineWidth', [w]);
    }
    generateMipmap(kind) {
      dart.dsend(this[_gl], 'generateMipmap', [kind]);
    }
    texParameteri(kind1, kind2, val) {
      dart.dsend(this[_gl], 'texParameteri', [kind1, kind2, val]);
    }
    texParameterf(kind1, kind2, val) {
      dart.dsend(this[_gl], 'texParameterf', [kind1, kind2, val]);
    }
    getParameter(kind) {
      return dart.dsend(this[_gl], 'getParameter', [kind]);
    }
    vertexAttribPointer(buffer, index, size, type, normalized, stride, offset) {
      dart.dsend(this[_gl], 'bindBuffer', [34962, buffer]);
      dart.dsend(this[_gl], 'vertexAttribPointer', [index, size, type, normalized, stride, offset]);
    }
    texImage2Dweb(target, level, iformat, format, type, data) {
      dart.dsend(this[_gl], 'texImage2D', [target, level, iformat, format, type, data]);
    }
    texImage2D(target, level, iformat, w, h, border, format, type, data) {
      dart.dsend(this[_gl], 'texImage2D', [target, level, iformat, w, h, border, format, type, data]);
    }
    texStorage2D(target, level, iformat, w, h) {
      dart.dsend(this[_gl], 'texStorage2D', [target, level, iformat, w, h]);
    }
    texSubImage2D(target, level, x, y, w, h, format, type, data) {
      dart.dsend(this[_gl], 'texSubImage2D', [target, level, x, y, w, h, format, type, data]);
    }
    copyTexImage2D(target, level, format, x, y, w, h) {
      dart.dsend(this[_gl], 'copyTexImage2D', [target, level, format, x, y, w, h, 0]);
    }
    activeTexture(target) {
      dart.dsend(this[_gl], 'activeTexture', [target]);
    }
    createProgram() {
      return dart.dsend(this[_gl], 'createProgram', []);
    }
    linkProgram(obj) {
      dart.dsend(this[_gl], 'linkProgram', [obj]);
    }
    useProgram(obj) {
      dart.dsend(this[_gl], 'useProgram', [obj]);
    }
    createShader(kind) {
      return dart.dsend(this[_gl], 'createShader', [kind]);
    }
    getUniformLocation(program, uniform) {
      return T.UniformLocationL().as(dart.dsend(this[_gl], 'getUniformLocation', [program, uniform]));
    }
    createSampler() {
      return T.SamplerL().as(dart.dsend(this[_gl], 'createSampler', []));
    }
    getError() {
      return T.intL().as(dart.dsend(this[_gl], 'getError', []));
    }
    readPixels(x, y, w, h, implFormat, implType, buf) {
      dart.dsend(this[_gl], 'readPixels', [x, y, w, h, implFormat, implType, buf]);
    }
    readPixelsToBuffer(x, y, w, h, implFormat, implType, offset) {
      dart.dsend(this[_gl], 'readPixels2', [x, y, w, h, implFormat, implType, offset]);
    }
    getProgramInfoLog(program) {
      return T.StringL().as(dart.dsend(this[_gl], 'getProgramInfoLog', [program]));
    }
    pixelStorei(type, value) {
      dart.dsend(this[_gl], 'pixelStorei', [type, value]);
    }
    getSupportedExtensions() {
      return T.ListL().as(dart.dsend(this[_gl], 'getSupportedExtensions', []));
    }
    getExtension(name) {
      return dart.dsend(this[_gl], 'getExtension', [name]);
    }
    GetGlExtensionAnisotropic() {
      let ext = dart.dsend(this[_gl], 'getExtension', ["EXT_texture_filter_anisotropic"]);
      if (ext == null) {
        lib.LogWarn("ExtensionAnisotropic NOT SUPPORTED");
      }
      return ext;
    }
    MaxAnisotropicFilterLevel() {
      let ext = this.GetGlExtensionAnisotropic();
      if (ext == null) {
        return 1;
      }
      return T.intL().as(this.getParameter(34047));
    }
    draw(mode, count, type, offset, instanceCount, hasTransforms) {
      if (dart.test(hasTransforms)) dart.dsend(this[_gl], 'beginTransformFeedback', [mode]);
      if (type !== -1) {
        if (dart.notNull(instanceCount) > 1) {
          dart.dsend(this[_gl], 'drawElementsInstanced', [mode, count, type, offset, instanceCount]);
        } else {
          dart.dsend(this[_gl], 'drawElements', [mode, count, type, offset]);
        }
      } else {
        if (dart.notNull(instanceCount) > 1) {
          dart.dsend(this[_gl], 'drawArraysInstanced', [mode, offset, count, instanceCount]);
        } else {
          dart.dsend(this[_gl], 'drawArrays', [mode, offset, count]);
        }
      }
      if (dart.test(hasTransforms)) dart.dsend(this[_gl], 'endTransformFeedback', []);
    }
    uniform1f(location, value) {
      dart.dsend(this[_gl], 'uniform1f', [location, value]);
    }
    uniform1i(location, value) {
      dart.dsend(this[_gl], 'uniform1i', [location, value]);
    }
    uniform1iv(location, value) {
      dart.dsend(this[_gl], 'uniform1iv', [location, value]);
    }
    uniform1fv(location, value) {
      dart.dsend(this[_gl], 'uniform1fv', [location, value]);
    }
    uniform2fv(location, value) {
      dart.dsend(this[_gl], 'uniform2fv', [location, value]);
    }
    uniform3fv(location, value) {
      dart.dsend(this[_gl], 'uniform3fv', [location, value]);
    }
    uniform4fv(location, value) {
      dart.dsend(this[_gl], 'uniform4fv', [location, value]);
    }
    uniformMatrix4fv(location, transpose, value) {
      dart.dsend(this[_gl], 'uniformMatrix4fv', [location, transpose, value]);
    }
    uniformMatrix3fv(location, transpose, value) {
      dart.dsend(this[_gl], 'uniformMatrix3fv', [location, transpose, value]);
    }
    clearColor(r, g, b, a) {
      dart.dsend(this[_gl], 'clearColor', [r, g, b, a]);
    }
  };
  (lib.FlutterWGL.new = function(_canvas, opts) {
    let preserveDrawingBuffer = opts && 'preserveDrawingBuffer' in opts ? opts.preserveDrawingBuffer : false;
    let faceCulling = opts && 'faceCulling' in opts ? opts.faceCulling : false;
    let antialiasing = opts && 'antialiasing' in opts ? opts.antialiasing : true;
    this[_gl] = null;
    this[_canvas$] = _canvas;
    let attributes = new (T.IdentityMapOfStringL$ObjectL()).from(["alpha", false, "depth", true, "stencil", true, "antialias", antialiasing, "premultipliedAlpha", true, "preserveDrawingBuffer", preserveDrawingBuffer, "failIfMajorPerformanceCaveat", false]);
    this[_gl] = dart.dsend(this[_canvas$], 'getContext', ["webgl2", attributes]);
    if (this[_gl] == null) {
      dart.throw(core.Exception.new(lib.NO_WEBGL_MESSAGE));
    }
    let actual = dart.dsend(this[_gl], 'getContextAttributes', []);
    lib.LogInfo("ChronosGL Config: " + dart.str(actual));
    dart.dsend(this[_gl], 'clearColor', [0.0, 0.0, 0.0, 1.0]);
    dart.dsend(this[_gl], 'enable', [2929]);
    if (dart.test(faceCulling)) {
      dart.dsend(this[_gl], 'enable', [2884]);
    }
  }).prototype = lib.FlutterWGL.prototype;
  dart.addTypeTests(lib.FlutterWGL);
  dart.addTypeCaches(lib.FlutterWGL);
  dart.setMethodSignature(lib.FlutterWGL, () => ({
    __proto__: dart.getMethods(lib.FlutterWGL.__proto__),
    CompileWholeProgram: dart.fnType(dart.legacy(web_gl.Program), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.String)))]),
    ChangeArrayBuffer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer), dart.legacy(core.List)]),
    GetArrayBuffer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer), dart.legacy(core.List)]),
    BufferDataSetSize: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(web_gl.Buffer), dart.legacy(core.int), dart.legacy(core.int)]),
    GetTransformBuffer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer), dart.legacy(typed_data.TypedData)]),
    createBuffer: dart.fnType(dart.legacy(web_gl.Buffer), []),
    ChangeElementArrayBuffer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer), dart.legacy(typed_data.TypedData)]),
    ChangeTransformBuffer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer), dart.legacy(core.List)]),
    deleteBuffer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer)]),
    bindBuffer: dart.fnType(dart.void, [dart.legacy(core.int), dart.dynamic]),
    createVertexArray: dart.fnType(dart.legacy(web_gl.VertexArrayObject), []),
    bindVertexArray: dart.fnType(dart.void, [dart.legacy(web_gl.VertexArrayObject)]),
    copyBufferSubData: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    createFramebuffer: dart.fnType(dart.legacy(web_gl.Framebuffer), []),
    bindFramebuffer: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(web_gl.Framebuffer)]),
    checkFramebufferStatus: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    framebufferTexture2D: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(web_gl.Texture), dart.legacy(core.int)]),
    createTexture: dart.fnType(dart.legacy(web_gl.Texture), []),
    bindTexture: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(web_gl.Texture)]),
    createTransformFeedback: dart.fnType(dart.legacy(web_gl.TransformFeedback), []),
    bindTransformFeedback: dart.fnType(dart.void, [dart.dynamic]),
    bindBufferBase: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
    viewport: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    enable: dart.fnType(dart.void, [dart.legacy(core.int)]),
    cullFace: dart.fnType(dart.void, [dart.legacy(core.int)]),
    disable: dart.fnType(dart.void, [dart.legacy(core.int)]),
    depthMask: dart.fnType(dart.void, [dart.legacy(core.bool)]),
    depthFunc: dart.fnType(dart.void, [dart.legacy(core.int)]),
    blendFunc: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    blendEquation: dart.fnType(dart.void, [dart.legacy(core.int)]),
    stencilFunc: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    enableVertexAttribArray: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    stencilOp: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    stencilMask: dart.fnType(dart.void, [dart.legacy(core.int)]),
    colorMask: dart.fnType(dart.void, [dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.bool)]),
    clear: dart.fnType(dart.void, [dart.legacy(core.int)]),
    setLineWidth: dart.fnType(dart.void, [dart.legacy(core.int)]),
    generateMipmap: dart.fnType(dart.void, [dart.legacy(core.int)]),
    texParameteri: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    texParameterf: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.double)]),
    getParameter: dart.fnType(dart.dynamic, [dart.legacy(core.int)]),
    vertexAttribPointer: dart.fnType(dart.void, [dart.legacy(web_gl.Buffer), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool), dart.legacy(core.int), dart.legacy(core.int)]),
    texImage2Dweb: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.dynamic]),
    texImage2D: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.dynamic]),
    texStorage2D: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    texSubImage2D: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.dynamic]),
    copyTexImage2D: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    activeTexture: dart.fnType(dart.void, [dart.legacy(core.int)]),
    createProgram: dart.fnType(dart.dynamic, []),
    linkProgram: dart.fnType(dart.void, [dart.legacy(web_gl.Program)]),
    useProgram: dart.fnType(dart.void, [dart.legacy(web_gl.Program)]),
    createShader: dart.fnType(dart.dynamic, [dart.legacy(core.int)]),
    getUniformLocation: dart.fnType(dart.legacy(web_gl.UniformLocation), [dart.legacy(web_gl.Program), dart.legacy(core.String)]),
    createSampler: dart.fnType(dart.legacy(web_gl.Sampler), []),
    getError: dart.fnType(dart.legacy(core.int), []),
    readPixels: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(typed_data.TypedData)]),
    readPixelsToBuffer: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    getProgramInfoLog: dart.fnType(dart.legacy(core.String), [dart.legacy(web_gl.Program)]),
    pixelStorei: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    getSupportedExtensions: dart.fnType(dart.legacy(core.List), []),
    getExtension: dart.fnType(dart.legacy(core.Object), [dart.legacy(core.String)]),
    GetGlExtensionAnisotropic: dart.fnType(dart.legacy(core.Object), []),
    MaxAnisotropicFilterLevel: dart.fnType(dart.legacy(core.int), []),
    draw: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)]),
    uniform1f: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(core.double)]),
    uniform1i: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(core.int)]),
    uniform1iv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(typed_data.Int32List)]),
    uniform1fv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(typed_data.Float32List)]),
    uniform2fv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(typed_data.Float32List)]),
    uniform3fv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(typed_data.Float32List)]),
    uniform4fv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(typed_data.Float32List)]),
    uniformMatrix4fv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(core.bool), dart.legacy(typed_data.Float32List)]),
    uniformMatrix3fv: dart.fnType(dart.void, [dart.legacy(web_gl.UniformLocation), dart.legacy(core.bool), dart.legacy(typed_data.Float32List)]),
    clearColor: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(lib.FlutterWGL, I[0]);
  dart.setFieldSignature(lib.FlutterWGL, () => ({
    __proto__: dart.getFields(lib.FlutterWGL.__proto__),
    [_gl]: dart.fieldType(dart.dynamic),
    [_canvas$]: dart.finalFieldType(dart.dynamic)
  }));
  var type$0 = dart.privateName(lib, "ShaderVarDesc.type");
  var purpose$ = dart.privateName(lib, "ShaderVarDesc.purpose");
  var arraySize$ = dart.privateName(lib, "ShaderVarDesc.arraySize");
  lib.ShaderVarDesc = class ShaderVarDesc extends core.Object {
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    get purpose() {
      return this[purpose$];
    }
    set purpose(value) {
      super.purpose = value;
    }
    get arraySize() {
      return this[arraySize$];
    }
    set arraySize(value) {
      super.arraySize = value;
    }
    GetSize() {
      switch (this.type) {
        case "float":
        {
          return 1;
        }
        case "vec2":
        {
          return 2;
        }
        case "vec3":
        case "uvec3":
        {
          return 3;
        }
        case "vec4":
        case "uvec4":
        {
          return 4;
        }
        default:
        {
          if (!false) dart.assertFailed(null, I[7], 52, 16, "false");
          return -1;
        }
      }
    }
    IsScalarTypeFloat() {
      switch (this.type) {
        case "float":
        case "vec2":
        case "vec3":
        case "vec4":
        {
          return true;
        }
        default:
        {
          return false;
        }
      }
    }
  };
  (lib.ShaderVarDesc.new = function(type, purpose, opts) {
    let arraySize = opts && 'arraySize' in opts ? opts.arraySize : 0;
    this[type$0] = type;
    this[purpose$] = purpose;
    this[arraySize$] = arraySize;
    ;
  }).prototype = lib.ShaderVarDesc.prototype;
  dart.addTypeTests(lib.ShaderVarDesc);
  dart.addTypeCaches(lib.ShaderVarDesc);
  dart.setMethodSignature(lib.ShaderVarDesc, () => ({
    __proto__: dart.getMethods(lib.ShaderVarDesc.__proto__),
    GetSize: dart.fnType(dart.legacy(core.int), []),
    IsScalarTypeFloat: dart.fnType(dart.legacy(core.bool), [])
  }));
  dart.setLibraryUri(lib.ShaderVarDesc, I[0]);
  dart.setFieldSignature(lib.ShaderVarDesc, () => ({
    __proto__: dart.getFields(lib.ShaderVarDesc.__proto__),
    type: dart.finalFieldType(dart.legacy(core.String)),
    purpose: dart.finalFieldType(dart.legacy(core.String)),
    arraySize: dart.finalFieldType(dart.legacy(core.int))
  }));
  var name$1 = dart.privateName(lib, "ShaderObject.name");
  var shader = dart.privateName(lib, "ShaderObject.shader");
  var attributeVars = dart.privateName(lib, "ShaderObject.attributeVars");
  var uniformVars = dart.privateName(lib, "ShaderObject.uniformVars");
  var varyingVars = dart.privateName(lib, "ShaderObject.varyingVars");
  var transformVars = dart.privateName(lib, "ShaderObject.transformVars");
  var _nextLayoutPos = dart.privateName(lib, "_nextLayoutPos");
  var _canonicalToLayoutPos = dart.privateName(lib, "_canonicalToLayoutPos");
  var _CreateShader = dart.privateName(lib, "_CreateShader");
  lib.ShaderObject = class ShaderObject extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get shader() {
      return this[shader];
    }
    set shader(value) {
      this[shader] = value;
    }
    get attributeVars() {
      return this[attributeVars];
    }
    set attributeVars(value) {
      super.attributeVars = value;
    }
    get uniformVars() {
      return this[uniformVars];
    }
    set uniformVars(value) {
      super.uniformVars = value;
    }
    get varyingVars() {
      return this[varyingVars];
    }
    set varyingVars(value) {
      super.varyingVars = value;
    }
    get transformVars() {
      return this[transformVars];
    }
    set transformVars(value) {
      super.transformVars = value;
    }
    GetAttributeLayoutPos(canonical) {
      return this[_canonicalToLayoutPos][$_get](canonical);
    }
    GetTransformBindingIndex(canonical) {
      return this.transformVars[$indexOf](canonical);
    }
    GetAttributeLayoutMap() {
      return this[_canonicalToLayoutPos];
    }
    AddAttributeVars(names) {
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 349, 12, "shader == null");
      for (let n of names) {
        if (!dart.test(lib._VarsDb[$containsKey](n))) dart.assertFailed(null, I[7], 352, 14, "_VarsDb.containsKey(n)");
        if (!!dart.test(this.attributeVars[$contains](n))) dart.assertFailed(null, I[7], 353, 14, "!attributeVars.contains(n)");
        this.attributeVars[$add](n);
        this[_canonicalToLayoutPos][$_set](n, this[_nextLayoutPos]);
        this[_nextLayoutPos] = dart.notNull(this[_nextLayoutPos]) + 1;
      }
      this.attributeVars[$sort]();
    }
    AddUniformVars(names) {
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 362, 12, "shader == null");
      for (let n of names) {
        if (!dart.test(lib._VarsDb[$containsKey](n))) dart.assertFailed("missing uniform " + dart.str(n), I[7], 365, 14, "_VarsDb.containsKey(n)");
        if (!!dart.test(this.uniformVars[$contains](n))) dart.assertFailed(null, I[7], 366, 14, "!uniformVars.contains(n)");
        this.uniformVars[$add](n);
      }
      this.uniformVars[$sort]();
    }
    AddVaryingVars(names) {
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 373, 12, "shader == null");
      for (let n of names) {
        if (!dart.test(lib._VarsDb[$containsKey](n))) dart.assertFailed(null, I[7], 376, 14, "_VarsDb.containsKey(n)");
        if (!!dart.test(this.varyingVars[$contains](n))) dart.assertFailed(null, I[7], 377, 14, "!varyingVars.contains(n)");
        this.varyingVars[$add](n);
      }
      this.varyingVars[$sort]();
    }
    AddTransformVars(names) {
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 384, 12, "shader == null");
      for (let n of names) {
        if (!dart.test(lib._VarsDb[$containsKey](n))) dart.assertFailed(null, I[7], 387, 14, "_VarsDb.containsKey(n)");
        if (!!dart.test(this.transformVars[$contains](n))) dart.assertFailed(null, I[7], 388, 14, "!transformVars.contains(n)");
        this.transformVars[$add](n);
      }
      this.transformVars[$sort]();
    }
    SetBodyWithMain(body, opts) {
      let prolog = opts && 'prolog' in opts ? opts.prolog : null;
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 395, 12, "shader == null");
      this.shader = this[_CreateShader](true, body, prolog);
    }
    SetBody(body, opts) {
      let prolog = opts && 'prolog' in opts ? opts.prolog : null;
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 400, 12, "shader == null");
      this.shader = this[_CreateShader](false, body, prolog);
    }
    [_CreateShader](addWrapperForMain, body, prolog) {
      if (!(this.shader == null)) dart.assertFailed(null, I[7], 408, 12, "shader == null");
      let isFragmentShader = this.attributeVars[$isEmpty];
      let out = T.JSArrayOfStringL().of(["#version 300 es", "precision highp float;", "precision highp sampler2DShadow;", ""]);
      for (let a of this.attributeVars) {
        let d = lib._VarsDb[$_get](a);
        let pos = this.GetAttributeLayoutPos(a);
        out[$add]("layout (location=" + dart.str(pos) + ") in " + dart.str(d.type) + " " + dart.str(a) + ";");
      }
      out[$add]("");
      let modifier = dart.test(isFragmentShader) ? "in" : "out";
      if (dart.test(isFragmentShader)) {
        out[$add]("out vec4 " + "oFragColor" + ";");
      }
      for (let v of this.varyingVars) {
        let d = lib._VarsDb[$_get](v);
        out[$add](modifier + " " + dart.str(d.type) + " " + dart.str(v) + ";");
      }
      for (let v of this.transformVars) {
        let d = lib._VarsDb[$_get](v);
        out[$add](modifier + " " + dart.str(d.type) + " " + dart.str(v) + ";");
      }
      out[$add]("");
      for (let v of this.uniformVars) {
        let d = lib._VarsDb[$_get](v);
        let suffix = d.arraySize === 0 ? "" : "[" + dart.str(d.arraySize) + "]";
        out[$add]("uniform " + dart.str(d.type) + " " + dart.str(v) + suffix + ";");
      }
      out[$add]("");
      if (prolog != null) out[$addAll](prolog);
      if (dart.test(addWrapperForMain)) {
        out[$add]("void main(void) {");
      }
      out[$addAll](body);
      if (dart.test(addWrapperForMain)) {
        out[$add]("}");
      }
      return out[$join]("\n");
    }
  };
  (lib.ShaderObject.new = function(name) {
    this[shader] = null;
    this[attributeVars] = T.JSArrayOfStringL().of([]);
    this[uniformVars] = T.JSArrayOfStringL().of([]);
    this[varyingVars] = T.JSArrayOfStringL().of([]);
    this[transformVars] = T.JSArrayOfStringL().of([]);
    this[_nextLayoutPos] = 0;
    this[_canonicalToLayoutPos] = new (T.IdentityMapOfStringL$intL()).new();
    this[name$1] = name;
    ;
  }).prototype = lib.ShaderObject.prototype;
  dart.addTypeTests(lib.ShaderObject);
  dart.addTypeCaches(lib.ShaderObject);
  dart.setMethodSignature(lib.ShaderObject, () => ({
    __proto__: dart.getMethods(lib.ShaderObject.__proto__),
    GetAttributeLayoutPos: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)]),
    GetTransformBindingIndex: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)]),
    GetAttributeLayoutMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.int))), []),
    AddAttributeVars: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))]),
    AddUniformVars: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))]),
    AddVaryingVars: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))]),
    AddTransformVars: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))]),
    SetBodyWithMain: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))], {prolog: dart.legacy(core.List$(dart.legacy(core.String)))}, {}),
    SetBody: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))], {prolog: dart.legacy(core.List$(dart.legacy(core.String)))}, {}),
    [_CreateShader]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.bool), dart.legacy(core.List$(dart.legacy(core.String))), dart.legacy(core.List$(dart.legacy(core.String)))])
  }));
  dart.setLibraryUri(lib.ShaderObject, I[0]);
  dart.setFieldSignature(lib.ShaderObject, () => ({
    __proto__: dart.getFields(lib.ShaderObject.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    shader: dart.fieldType(dart.legacy(core.String)),
    attributeVars: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    uniformVars: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    varyingVars: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    transformVars: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    [_nextLayoutPos]: dart.fieldType(dart.legacy(core.int)),
    [_canonicalToLayoutPos]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.int))))
  }));
  lib.UnknownEntity = class UnknownEntity extends lib.NamedEntity {};
  (lib.UnknownEntity.new = function() {
    lib.UnknownEntity.__proto__.new.call(this, "UnknownEntity");
    ;
  }).prototype = lib.UnknownEntity.prototype;
  dart.addTypeTests(lib.UnknownEntity);
  dart.addTypeCaches(lib.UnknownEntity);
  dart.setLibraryUri(lib.UnknownEntity, I[0]);
  var transform = dart.privateName(lib, "Spatial.transform");
  var _pos = dart.privateName(lib, "_pos");
  var _back = dart.privateName(lib, "_back");
  var _up = dart.privateName(lib, "_up");
  var _right = dart.privateName(lib, "_right");
  lib.Spatial = class Spatial extends lib.NamedEntity {
    get transform() {
      return this[transform];
    }
    set transform(value) {
      super.transform = value;
    }
    getViewMatrix(m) {
      m.setFrom(this.transform);
    }
    getEyePosition() {
      return this.getPos();
    }
    getPos() {
      this[_pos]._set(0, this.transform._get(lib.POSX));
      this[_pos]._set(1, this.transform._get(lib.POSY));
      this[_pos]._set(2, this.transform._get(lib.POSZ));
      return this[_pos];
    }
    getBack() {
      this[_back]._set(0, this.transform._get(lib.BACKX));
      this[_back]._set(1, this.transform._get(lib.BACKY));
      this[_back]._set(2, this.transform._get(lib.BACKZ));
      return this[_back];
    }
    getUp() {
      this[_up]._set(0, this.transform._get(lib.UPX));
      this[_up]._set(1, this.transform._get(lib.UPY));
      this[_up]._set(2, this.transform._get(lib.UPZ));
      return this[_up];
    }
    getRight() {
      this[_right]._set(0, this.transform._get(lib.RIGHTX));
      this[_right]._set(1, this.transform._get(lib.RIGHTY));
      this[_right]._set(2, this.transform._get(lib.RIGHTZ));
      return this[_right];
    }
    setPos(x, y, z) {
      this.transform._set(lib.POSX, x);
      this.transform._set(lib.POSY, y);
      this.transform._set(lib.POSZ, z);
    }
    addPos(x, y, z) {
      this.translate(x, y, z);
    }
    addPosFromVec(vector) {
      this.translateFromVec(vector);
    }
    setPosFromVec(vector) {
      this.transform._set(lib.POSX, vector._get(0));
      this.transform._set(lib.POSY, vector._get(1));
      this.transform._set(lib.POSZ, vector._get(2));
    }
    setPosFromSpherical(radius, azimuth, polar) {
      let rcp = dart.notNull(radius) * math.cos(polar);
      this.setPos(rcp * math.cos(azimuth), dart.notNull(radius) * math.sin(polar), rcp * math.sin(azimuth));
    }
    translate(x, y, z, factor = 1) {
      let t1, t0, t1$, t0$, t1$0, t0$0;
      t0 = this.transform;
      t1 = lib.POSX;
      t0._set(t1, dart.notNull(t0._get(t1)) + dart.notNull(x) * dart.notNull(factor));
      t0$ = this.transform;
      t1$ = lib.POSY;
      t0$._set(t1$, dart.notNull(t0$._get(t1$)) + dart.notNull(y) * dart.notNull(factor));
      t0$0 = this.transform;
      t1$0 = lib.POSZ;
      t0$0._set(t1$0, dart.notNull(t0$0._get(t1$0)) + dart.notNull(z) * dart.notNull(factor));
    }
    translateFromVec(vector, factor = 1) {
      let t1, t0, t1$, t0$, t1$0, t0$0;
      t0 = this.transform;
      t1 = lib.POSX;
      t0._set(t1, dart.notNull(t0._get(t1)) + dart.notNull(vector._get(0)) * dart.notNull(factor));
      t0$ = this.transform;
      t1$ = lib.POSY;
      t0$._set(t1$, dart.notNull(t0$._get(t1$)) + dart.notNull(vector._get(1)) * dart.notNull(factor));
      t0$0 = this.transform;
      t1$0 = lib.POSZ;
      t0$0._set(t1$0, dart.notNull(t0$0._get(t1$0)) + dart.notNull(vector._get(2)) * dart.notNull(factor));
    }
    moveForward(amount) {
      this.moveBackward(-dart.notNull(amount));
    }
    moveBackward(amount) {
      let t1, t0, t1$, t0$, t1$0, t0$0;
      t0 = this.transform;
      t1 = lib.POSX;
      t0._set(t1, dart.notNull(t0._get(t1)) + dart.notNull(this.transform._get(lib.BACKX)) * dart.notNull(amount));
      t0$ = this.transform;
      t1$ = lib.POSY;
      t0$._set(t1$, dart.notNull(t0$._get(t1$)) + dart.notNull(this.transform._get(lib.BACKY)) * dart.notNull(amount));
      t0$0 = this.transform;
      t1$0 = lib.POSZ;
      t0$0._set(t1$0, dart.notNull(t0$0._get(t1$0)) + dart.notNull(this.transform._get(lib.BACKZ)) * dart.notNull(amount));
    }
    moveUp(amount) {
      let t1, t0, t1$, t0$, t1$0, t0$0;
      t0 = this.transform;
      t1 = lib.POSX;
      t0._set(t1, dart.notNull(t0._get(t1)) + dart.notNull(this.transform._get(lib.UPX)) * dart.notNull(amount));
      t0$ = this.transform;
      t1$ = lib.POSY;
      t0$._set(t1$, dart.notNull(t0$._get(t1$)) + dart.notNull(this.transform._get(lib.UPY)) * dart.notNull(amount));
      t0$0 = this.transform;
      t1$0 = lib.POSZ;
      t0$0._set(t1$0, dart.notNull(t0$0._get(t1$0)) + dart.notNull(this.transform._get(lib.UPZ)) * dart.notNull(amount));
    }
    moveDown(amount) {
      this.moveUp(-dart.notNull(amount));
    }
    moveLeft(amount) {
      this.moveRight(-dart.notNull(amount));
    }
    moveRight(amount) {
      let t1, t0, t1$, t0$, t1$0, t0$0;
      t0 = this.transform;
      t1 = lib.POSX;
      t0._set(t1, dart.notNull(t0._get(t1)) + dart.notNull(this.transform._get(lib.RIGHTX)) * dart.notNull(amount));
      t0$ = this.transform;
      t1$ = lib.POSY;
      t0$._set(t1$, dart.notNull(t0$._get(t1$)) + dart.notNull(this.transform._get(lib.RIGHTY)) * dart.notNull(amount));
      t0$0 = this.transform;
      t1$0 = lib.POSZ;
      t0$0._set(t1$0, dart.notNull(t0$0._get(t1$0)) + dart.notNull(this.transform._get(lib.RIGHTZ)) * dart.notNull(amount));
    }
    rotX(angle) {
      this.transform.rotateX(angle);
    }
    rotY(angle) {
      this.transform.rotateY(angle);
    }
    rotZ(angle) {
      this.transform.rotateZ(angle);
    }
    lookUp(amount) {
      this.transform.rotate(this.getRight(), -dart.notNull(amount));
    }
    lookDown(amount) {
      this.transform.rotate(this.getRight(), amount);
    }
    rollLeft(amount) {
      this.transform.rotate(this.getBack(), -dart.notNull(amount));
    }
    rollRight(amount) {
      this.transform.rotate(this.getBack(), amount);
    }
    lookLeft(amount) {
      this.transform.rotate(this.getUp(), -dart.notNull(amount));
    }
    lookRight(amount) {
      this.transform.rotate(this.getUp(), amount);
    }
    lookAt(target, up = null) {
      if (up == null) up = vector_math.Vector3.new(0.0, 1.0, 0.0);
      vector_math.setViewMatrix(this.transform, this.getPos(), target, up);
    }
  };
  (lib.Spatial.new = function(name) {
    this[transform] = vector_math.Matrix4.identity();
    this[_pos] = new vector_math.Vector3.zero();
    this[_back] = new vector_math.Vector3.zero();
    this[_up] = new vector_math.Vector3.zero();
    this[_right] = new vector_math.Vector3.zero();
    lib.Spatial.__proto__.new.call(this, name);
    ;
  }).prototype = lib.Spatial.prototype;
  dart.addTypeTests(lib.Spatial);
  dart.addTypeCaches(lib.Spatial);
  dart.setMethodSignature(lib.Spatial, () => ({
    __proto__: dart.getMethods(lib.Spatial.__proto__),
    getViewMatrix: dart.fnType(dart.void, [dart.legacy(vector_math.Matrix4)]),
    getEyePosition: dart.fnType(dart.legacy(vector_math.Vector3), []),
    getPos: dart.fnType(dart.legacy(vector_math.Vector3), []),
    getBack: dart.fnType(dart.legacy(vector_math.Vector3), []),
    getUp: dart.fnType(dart.legacy(vector_math.Vector3), []),
    getRight: dart.fnType(dart.legacy(vector_math.Vector3), []),
    setPos: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    addPos: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    addPosFromVec: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)]),
    setPosFromVec: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)]),
    setPosFromSpherical: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    translate: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)], [dart.legacy(core.double)]),
    translateFromVec: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)], [dart.legacy(core.double)]),
    moveForward: dart.fnType(dart.void, [dart.legacy(core.double)]),
    moveBackward: dart.fnType(dart.void, [dart.legacy(core.double)]),
    moveUp: dart.fnType(dart.void, [dart.legacy(core.double)]),
    moveDown: dart.fnType(dart.void, [dart.legacy(core.double)]),
    moveLeft: dart.fnType(dart.void, [dart.legacy(core.double)]),
    moveRight: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rotX: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rotY: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rotZ: dart.fnType(dart.void, [dart.legacy(core.double)]),
    lookUp: dart.fnType(dart.void, [dart.legacy(core.double)]),
    lookDown: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rollLeft: dart.fnType(dart.void, [dart.legacy(core.double)]),
    rollRight: dart.fnType(dart.void, [dart.legacy(core.double)]),
    lookLeft: dart.fnType(dart.void, [dart.legacy(core.double)]),
    lookRight: dart.fnType(dart.void, [dart.legacy(core.double)]),
    lookAt: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)], [dart.legacy(vector_math.Vector3)])
  }));
  dart.setLibraryUri(lib.Spatial, I[0]);
  dart.setFieldSignature(lib.Spatial, () => ({
    __proto__: dart.getFields(lib.Spatial.__proto__),
    transform: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    [_pos]: dart.finalFieldType(dart.legacy(vector_math.Vector3)),
    [_back]: dart.finalFieldType(dart.legacy(vector_math.Vector3)),
    [_up]: dart.finalFieldType(dart.legacy(vector_math.Vector3)),
    [_right]: dart.finalFieldType(dart.legacy(vector_math.Vector3))
  }));
  var _proj = dart.privateName(lib, "_proj");
  var _viewMatrix = dart.privateName(lib, "_viewMatrix");
  var _projViewMatrix = dart.privateName(lib, "_projViewMatrix");
  var _aspect = dart.privateName(lib, "_aspect");
  var _camera$ = dart.privateName(lib, "_camera");
  var _l$ = dart.privateName(lib, "_l");
  var _r$ = dart.privateName(lib, "_r");
  var _d$ = dart.privateName(lib, "_d");
  var _f$ = dart.privateName(lib, "_f");
  var _b$ = dart.privateName(lib, "_b");
  lib.Orthographic = class Orthographic extends lib.UniformGroup {
    GetUniforms() {
      this[_camera$].getViewMatrix(this[_viewMatrix]);
      this[_projViewMatrix].setFrom(this[_proj]);
      this[_projViewMatrix].multiply(this[_viewMatrix]);
      this.ForceUniform("uPerspectiveViewMatrix", this[_projViewMatrix]);
      return this[_uniforms];
    }
    Update() {
      let w = dart.notNull(this[_r$]) - dart.notNull(this[_l$]);
      let h = w / dart.notNull(this[_aspect]);
      vector_math.setOrthographicMatrix(this[_proj], this[_l$], this[_r$], this[_d$], dart.notNull(this[_d$]) + h, this[_f$], this[_b$]);
    }
    AdjustAspect(w, h) {
      let a = dart.notNull(w) / dart.notNull(h);
      if (this[_aspect] === a) return;
      this[_aspect] = a;
      this.Update();
    }
  };
  (lib.Orthographic.new = function(_camera, _l, _r, _d, _f, _b) {
    this[_proj] = new vector_math.Matrix4.zero();
    this[_viewMatrix] = new vector_math.Matrix4.zero();
    this[_projViewMatrix] = vector_math.Matrix4.identity();
    this[_aspect] = 1.0;
    this[_camera$] = _camera;
    this[_l$] = _l;
    this[_r$] = _r;
    this[_d$] = _d;
    this[_f$] = _f;
    this[_b$] = _b;
    lib.Orthographic.__proto__.new.call(this, "othrogrpahic");
    this.Update();
  }).prototype = lib.Orthographic.prototype;
  dart.addTypeTests(lib.Orthographic);
  dart.addTypeCaches(lib.Orthographic);
  dart.setMethodSignature(lib.Orthographic, () => ({
    __proto__: dart.getMethods(lib.Orthographic.__proto__),
    Update: dart.fnType(dart.void, []),
    AdjustAspect: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lib.Orthographic, I[0]);
  dart.setFieldSignature(lib.Orthographic, () => ({
    __proto__: dart.getFields(lib.Orthographic.__proto__),
    [_camera$]: dart.finalFieldType(dart.legacy(lib.Spatial)),
    [_proj]: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    [_viewMatrix]: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    [_projViewMatrix]: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    [_aspect]: dart.fieldType(dart.legacy(core.double)),
    [_l$]: dart.fieldType(dart.legacy(core.double)),
    [_r$]: dart.fieldType(dart.legacy(core.double)),
    [_d$]: dart.fieldType(dart.legacy(core.double)),
    [_f$]: dart.fieldType(dart.legacy(core.double)),
    [_b$]: dart.fieldType(dart.legacy(core.double))
  }));
  var _fov = dart.privateName(lib, "_fov");
  var _near$ = dart.privateName(lib, "_near");
  var _far$ = dart.privateName(lib, "_far");
  var _perspectiveViewMatrix = dart.privateName(lib, "_perspectiveViewMatrix");
  var _mat = dart.privateName(lib, "_mat");
  lib.Perspective = class Perspective extends lib.UniformGroup {
    AdjustAspect(w, h) {
      let a = dart.notNull(w) / dart.notNull(h);
      if (this[_aspect] === a) return;
      this[_aspect] = a;
      this.Update();
    }
    Update() {
      vector_math.setPerspectiveMatrix(this[_mat], dart.notNull(this[_fov]) * 3.141592653589793 / 180.0, this[_aspect], this[_near$], this[_far$]);
    }
    UpdateFov(fov) {
      if (this[_fov] == fov) return;
      this[_fov] = fov;
      this.Update();
    }
    UpdateCamera(cam) {
      this[_camera$] = cam;
    }
    GetUniforms() {
      this.ForceUniform("uEyePosition", this[_camera$].getEyePosition());
      this[_camera$].getViewMatrix(this[_viewMatrix]);
      this[_perspectiveViewMatrix].setFrom(this[_mat]);
      this[_perspectiveViewMatrix].multiply(this[_viewMatrix]);
      this.ForceUniform("uPerspectiveViewMatrix", this[_perspectiveViewMatrix]);
      return this[_uniforms];
    }
  };
  (lib.Perspective.new = function(_camera, _near, _far, name = "perspective") {
    this[_fov] = 50.0;
    this[_aspect] = 1.0;
    this[_near$] = 0.1;
    this[_far$] = 1000.0;
    this[_perspectiveViewMatrix] = vector_math.Matrix4.identity();
    this[_viewMatrix] = vector_math.Matrix4.identity();
    this[_mat] = new vector_math.Matrix4.zero();
    this[_camera$] = _camera;
    this[_near$] = _near;
    this[_far$] = _far;
    lib.Perspective.__proto__.new.call(this, name);
    this.Update();
  }).prototype = lib.Perspective.prototype;
  dart.addTypeTests(lib.Perspective);
  dart.addTypeCaches(lib.Perspective);
  dart.setMethodSignature(lib.Perspective, () => ({
    __proto__: dart.getMethods(lib.Perspective.__proto__),
    AdjustAspect: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    Update: dart.fnType(dart.void, []),
    UpdateFov: dart.fnType(dart.void, [dart.legacy(core.double)]),
    UpdateCamera: dart.fnType(dart.void, [dart.legacy(lib.Spatial)])
  }));
  dart.setLibraryUri(lib.Perspective, I[0]);
  dart.setFieldSignature(lib.Perspective, () => ({
    __proto__: dart.getFields(lib.Perspective.__proto__),
    [_camera$]: dart.fieldType(dart.legacy(lib.Spatial)),
    [_fov]: dart.fieldType(dart.legacy(core.double)),
    [_aspect]: dart.fieldType(dart.legacy(core.double)),
    [_near$]: dart.fieldType(dart.legacy(core.double)),
    [_far$]: dart.fieldType(dart.legacy(core.double)),
    [_perspectiveViewMatrix]: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    [_viewMatrix]: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    [_mat]: dart.finalFieldType(dart.legacy(vector_math.Matrix4))
  }));
  var a$ = dart.privateName(lib, "Face1.a");
  lib.Face1 = class Face1 extends core.Object {
    get a() {
      return this[a$];
    }
    set a(value) {
      this[a$] = value;
    }
  };
  (lib.Face1.new = function(a) {
    this[a$] = a;
    ;
  }).prototype = lib.Face1.prototype;
  dart.addTypeTests(lib.Face1);
  dart.addTypeCaches(lib.Face1);
  dart.setLibraryUri(lib.Face1, I[0]);
  dart.setFieldSignature(lib.Face1, () => ({
    __proto__: dart.getFields(lib.Face1.__proto__),
    a: dart.fieldType(dart.legacy(core.int))
  }));
  var a$0 = dart.privateName(lib, "Face2.a");
  var b$ = dart.privateName(lib, "Face2.b");
  lib.Face2 = class Face2 extends core.Object {
    get a() {
      return this[a$0];
    }
    set a(value) {
      this[a$0] = value;
    }
    get b() {
      return this[b$];
    }
    set b(value) {
      this[b$] = value;
    }
  };
  (lib.Face2.new = function(a, b) {
    this[a$0] = a;
    this[b$] = b;
    ;
  }).prototype = lib.Face2.prototype;
  dart.addTypeTests(lib.Face2);
  dart.addTypeCaches(lib.Face2);
  dart.setLibraryUri(lib.Face2, I[0]);
  dart.setFieldSignature(lib.Face2, () => ({
    __proto__: dart.getFields(lib.Face2.__proto__),
    a: dart.fieldType(dart.legacy(core.int)),
    b: dart.fieldType(dart.legacy(core.int))
  }));
  var a$1 = dart.privateName(lib, "Face3.a");
  var b$0 = dart.privateName(lib, "Face3.b");
  var c$ = dart.privateName(lib, "Face3.c");
  lib.Face3 = class Face3 extends core.Object {
    get a() {
      return this[a$1];
    }
    set a(value) {
      this[a$1] = value;
    }
    get b() {
      return this[b$0];
    }
    set b(value) {
      this[b$0] = value;
    }
    get c() {
      return this[c$];
    }
    set c(value) {
      this[c$] = value;
    }
  };
  (lib.Face3.new = function(a, b, c) {
    this[a$1] = a;
    this[b$0] = b;
    this[c$] = c;
    ;
  }).prototype = lib.Face3.prototype;
  dart.addTypeTests(lib.Face3);
  dart.addTypeCaches(lib.Face3);
  dart.setLibraryUri(lib.Face3, I[0]);
  dart.setFieldSignature(lib.Face3, () => ({
    __proto__: dart.getFields(lib.Face3.__proto__),
    a: dart.fieldType(dart.legacy(core.int)),
    b: dart.fieldType(dart.legacy(core.int)),
    c: dart.fieldType(dart.legacy(core.int))
  }));
  var a$2 = dart.privateName(lib, "Face4.a");
  var b$1 = dart.privateName(lib, "Face4.b");
  var c$0 = dart.privateName(lib, "Face4.c");
  var d$ = dart.privateName(lib, "Face4.d");
  lib.Face4 = class Face4 extends core.Object {
    get a() {
      return this[a$2];
    }
    set a(value) {
      this[a$2] = value;
    }
    get b() {
      return this[b$1];
    }
    set b(value) {
      this[b$1] = value;
    }
    get c() {
      return this[c$0];
    }
    set c(value) {
      this[c$0] = value;
    }
    get d() {
      return this[d$];
    }
    set d(value) {
      this[d$] = value;
    }
  };
  (lib.Face4.new = function(a, b, c, d) {
    this[a$2] = a;
    this[b$1] = b;
    this[c$0] = c;
    this[d$] = d;
    ;
  }).prototype = lib.Face4.prototype;
  dart.addTypeTests(lib.Face4);
  dart.addTypeCaches(lib.Face4);
  dart.setLibraryUri(lib.Face4, I[0]);
  dart.setFieldSignature(lib.Face4, () => ({
    __proto__: dart.getFields(lib.Face4.__proto__),
    a: dart.fieldType(dart.legacy(core.int)),
    b: dart.fieldType(dart.legacy(core.int)),
    c: dart.fieldType(dart.legacy(core.int)),
    d: dart.fieldType(dart.legacy(core.int))
  }));
  var v1$ = dart.privateName(lib, "Edge3.v1");
  var v2$ = dart.privateName(lib, "Edge3.v2");
  lib.Edge3 = class Edge3 extends core.Object {
    get v1() {
      return this[v1$];
    }
    set v1(value) {
      super.v1 = value;
    }
    get v2() {
      return this[v2$];
    }
    set v2(value) {
      super.v2 = value;
    }
    toString() {
      return dart.str(this.v1) + " -> " + dart.str(this.v2);
    }
    _equals(other) {
      if (other == null) return false;
      return T.Edge3L().is(other) && dart.equals(this.v1, other.v1) && dart.equals(this.v2, other.v2);
    }
    get hashCode() {
      return (dart.notNull(lib.hashVector3(this.v1)) ^ dart.notNull(lib.hashVector3(this.v2))) >>> 0;
    }
  };
  (lib.Edge3.new = function(v1, v2) {
    this[v1$] = v1;
    this[v2$] = v2;
    ;
  }).prototype = lib.Edge3.prototype;
  dart.addTypeTests(lib.Edge3);
  dart.addTypeCaches(lib.Edge3);
  dart.setMethodSignature(lib.Edge3, () => ({
    __proto__: dart.getMethods(lib.Edge3.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(lib.Edge3, () => ({
    __proto__: dart.getGetters(lib.Edge3.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(lib.Edge3, I[0]);
  dart.setFieldSignature(lib.Edge3, () => ({
    __proto__: dart.getFields(lib.Edge3.__proto__),
    v1: dart.finalFieldType(dart.legacy(vector_math.Vector3)),
    v2: dart.finalFieldType(dart.legacy(vector_math.Vector3))
  }));
  dart.defineExtensionMethods(lib.Edge3, ['toString', '_equals']);
  dart.defineExtensionAccessors(lib.Edge3, ['hashCode']);
  var pointsOnly$ = dart.privateName(lib, "GeometryBuilder.pointsOnly");
  var faces3 = dart.privateName(lib, "GeometryBuilder.faces3");
  var faces4 = dart.privateName(lib, "GeometryBuilder.faces4");
  var vertices = dart.privateName(lib, "GeometryBuilder.vertices");
  var attributes = dart.privateName(lib, "GeometryBuilder.attributes");
  lib.GeometryBuilder = class GeometryBuilder extends core.Object {
    get pointsOnly() {
      return this[pointsOnly$];
    }
    set pointsOnly(value) {
      super.pointsOnly = value;
    }
    get faces3() {
      return this[faces3];
    }
    set faces3(value) {
      super.faces3 = value;
    }
    get faces4() {
      return this[faces4];
    }
    set faces4(value) {
      super.faces4 = value;
    }
    get vertices() {
      return this[vertices];
    }
    set vertices(value) {
      super.vertices = value;
    }
    get attributes() {
      return this[attributes];
    }
    set attributes(value) {
      super.attributes = value;
    }
    EnableAttribute(canonical) {
      if (!!dart.test(this.attributes[$containsKey](canonical))) dart.assertFailed("attribute " + dart.str(canonical) + " already exists", I[8], 90, 12, "!attributes.containsKey(canonical)");
      if (!canonical[$startsWith]("a")) dart.assertFailed(dart.str(canonical) + " is not an attribute", I[8], 92, 12, "canonical.startsWith(\"a\")");
      let desc = lib.RetrieveShaderVarDesc(canonical);
      switch (desc.type) {
        case "vec2":
        {
          this.attributes[$_set](canonical, T.JSArrayOfVector2L().of([]));
          break;
        }
        case "vec3":
        {
          this.attributes[$_set](canonical, T.JSArrayOfVector3L().of([]));
          break;
        }
        case "vec4":
        {
          this.attributes[$_set](canonical, T.JSArrayOfVector4L().of([]));
          break;
        }
        case "float":
        {
          this.attributes[$_set](canonical, T.JSArrayOfdoubleL().of([]));
          break;
        }
        case "uvec4":
        {
          this.attributes[$_set](canonical, T.JSArrayOfListLOfintL().of([]));
          break;
        }
        default:
        {
          if (!false) dart.assertFailed("unknown type for " + dart.str(canonical), I[8], 111, 16, "false");
        }
      }
    }
    HasAttribute(canonical) {
      return this.attributes[$containsKey](canonical);
    }
    MergeAndTakeOwnership(other, mat = null, matNormal = null) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6;
      if (other.vertices[$length] === 0) return;
      let offset = this.vertices[$length];
      if (!(this.pointsOnly == other.pointsOnly)) dart.assertFailed(null, I[8], 124, 12, "pointsOnly == other.pointsOnly");
      for (let a of this.attributes[$keys]) {
        if (!dart.test(other.attributes[$containsKey](a))) dart.assertFailed(null, I[8], 126, 14, "other.attributes.containsKey(a)");
      }
      for (let a of other.attributes[$keys]) {
        if (!dart.test(this.attributes[$containsKey](a))) dart.assertFailed(null, I[8], 129, 14, "attributes.containsKey(a)");
        switch (a) {
          case "aNormal":
          {
            if (!(matNormal != null)) dart.assertFailed("no normal matrix provided", I[8], 132, 18, "matNormal != null");
            for (let t0 of other.attributes[$_get](a)) {
              let v = T.Vector3L().as(t0);
              this.attributes[$_get](a)[$add]((t1 = v, (() => {
                t1.applyMatrix3(matNormal);
                return t1;
              })()));
            }
            break;
          }
          default:
          {
            this.attributes[$_get](a)[$addAll](other.attributes[$_get](a));
          }
        }
      }
      other.attributes[$clear]();
      for (let v of other.vertices) {
        if (mat == null) {
          this.vertices[$add](v);
        } else {
          this.vertices[$add]((t1$ = v, (() => {
            t1$.applyMatrix4(mat);
            return t1$;
          })()));
        }
      }
      other.vertices[$clear]();
      for (let face of other.faces3) {
        t1$0 = face;
        t1$0.a = dart.notNull(t1$0.a) + dart.notNull(offset);
        t1$1 = face;
        t1$1.b = dart.notNull(t1$1.b) + dart.notNull(offset);
        t1$2 = face;
        t1$2.c = dart.notNull(t1$2.c) + dart.notNull(offset);
        this.faces3[$add](face);
      }
      other.faces3[$clear]();
      for (let face of other.faces4) {
        t1$3 = face;
        t1$3.a = dart.notNull(t1$3.a) + dart.notNull(offset);
        t1$4 = face;
        t1$4.b = dart.notNull(t1$4.b) + dart.notNull(offset);
        t1$5 = face;
        t1$5.c = dart.notNull(t1$5.c) + dart.notNull(offset);
        t1$6 = face;
        t1$6.d = dart.notNull(t1$6.d) + dart.notNull(offset);
        this.faces4[$add](face);
      }
      other.faces4[$clear]();
    }
    SanityCheck() {
      if (dart.test(this.pointsOnly)) {
        if (!(this.faces3[$length] === 0)) dart.assertFailed(null, I[8], 172, 14, "faces3.length == 0");
        if (!(this.faces4[$length] === 0)) dart.assertFailed(null, I[8], 173, 14, "faces4.length == 0");
        return;
      }
      let maxIndexFace3 = -1;
      for (let f of this.faces3) {
        if (dart.notNull(f.a) > dart.notNull(maxIndexFace3)) maxIndexFace3 = f.a;
        if (dart.notNull(f.b) > dart.notNull(maxIndexFace3)) maxIndexFace3 = f.b;
        if (dart.notNull(f.c) > dart.notNull(maxIndexFace3)) maxIndexFace3 = f.c;
      }
      let maxIndexFace4 = -1;
      for (let f of this.faces4) {
        if (dart.notNull(f.a) > dart.notNull(maxIndexFace4)) maxIndexFace4 = f.a;
        if (dart.notNull(f.b) > dart.notNull(maxIndexFace4)) maxIndexFace4 = f.b;
        if (dart.notNull(f.c) > dart.notNull(maxIndexFace4)) maxIndexFace4 = f.c;
        if (dart.notNull(f.d) > dart.notNull(maxIndexFace4)) maxIndexFace4 = f.d;
      }
      let n = this.vertices[$length];
      if (!(dart.notNull(n) >= 0)) dart.assertFailed(null, I[8], 192, 12, "n >= 0");
      if (!(dart.notNull(maxIndexFace3) < dart.notNull(n))) dart.assertFailed(dart.str(maxIndexFace3) + " vs " + dart.str(n), I[8], 193, 12, "maxIndexFace3 < n");
      if (!(dart.notNull(maxIndexFace4) < dart.notNull(n))) dart.assertFailed(dart.str(maxIndexFace4) + " vs " + dart.str(n), I[8], 194, 12, "maxIndexFace4 < n");
      for (let canonical of this.attributes[$keys]) {
        if (!(this.attributes[$_get](canonical)[$length] == this.vertices[$length])) dart.assertFailed("bad attribute " + dart.str(canonical), I[8], 197, 14, "attributes[canonical].length == vertices.length");
      }
    }
    AddFace3(a, b, c) {
      if (!(this.pointsOnly === false)) dart.assertFailed("pointsOnly must be false", I[8], 203, 12, "pointsOnly == false");
      this.faces3[$add](new lib.Face3.new(a, b, c));
    }
    AddFace4(a, b, c, d, reverse = false) {
      if (!(this.pointsOnly === false)) dart.assertFailed("pointsOnly must be false", I[8], 208, 12, "pointsOnly == false");
      this.faces4[$add](dart.test(reverse) ? new lib.Face4.new(d, c, b, a) : new lib.Face4.new(a, b, c, d));
    }
    AddFaces3(n) {
      if (!(this.pointsOnly === false)) dart.assertFailed("pointsOnly must be false", I[8], 213, 12, "pointsOnly == false");
      let v = this.vertices[$length];
      for (let i = 0; i < dart.notNull(n); i = i + 1, v = dart.notNull(v) + 3) {
        this.faces3[$add](new lib.Face3.new(dart.notNull(v) + 0, dart.notNull(v) + 1, dart.notNull(v) + 2));
      }
    }
    AddFaces4(n, reverse = false) {
      if (!(this.pointsOnly === false)) dart.assertFailed(null, I[8], 222, 12, "pointsOnly == false");
      let v = this.vertices[$length];
      for (let i = 0; i < dart.notNull(n); i = i + 1, v = dart.notNull(v) + 4) {
        this.AddFace4(dart.notNull(v) + 0, dart.notNull(v) + 1, dart.notNull(v) + 2, dart.notNull(v) + 3, reverse);
      }
    }
    AddVertices(vs) {
      for (let v of vs) {
        this.vertices[$add](v.clone());
      }
    }
    AddVerticesTakeOwnership(vs) {
      for (let v of vs) {
        this.vertices[$add](v);
      }
    }
    AddVertex(v) {
      this.vertices[$add](v.clone());
    }
    AddVertexTakeOwnership(v) {
      this.vertices[$add](v);
    }
    AddVerticesFace3(vs) {
      if (!(vs[$length] === 3)) dart.assertFailed(null, I[8], 251, 12, "vs.length == 3");
      let i = this.vertices[$length];
      this.AddFace3(dart.notNull(i) + 0, dart.notNull(i) + 1, dart.notNull(i) + 2);
      this.AddVertices(vs);
    }
    AddVerticesFace3TakeOwnership(vs) {
      if (!(vs[$length] === 3)) dart.assertFailed(null, I[8], 258, 12, "vs.length == 3");
      let i = this.vertices[$length];
      this.AddFace3(dart.notNull(i) + 0, dart.notNull(i) + 1, dart.notNull(i) + 2);
      this.AddVerticesTakeOwnership(vs);
    }
    AddAttributeDouble(canonical, v) {
      let ts = T.ListLOfdoubleL().as(this.attributes[$_get](canonical));
      ts[$add](v);
    }
    AddAttributesDouble(canonical, lst) {
      let ts = T.ListLOfdoubleL().as(this.attributes[$_get](canonical));
      for (let v of lst) {
        ts[$add](v);
      }
    }
    AddAttributeVector2(canonical, v) {
      let ts = T.ListLOfVector2L().as(this.attributes[$_get](canonical));
      ts[$add](v.clone());
    }
    AddAttributesVector2(canonical, lst) {
      let ts = T.ListLOfVector2L().as(this.attributes[$_get](canonical));
      for (let v of lst) {
        ts[$add](v.clone());
      }
    }
    AddAttributesVector2TakeOwnership(canonical, lst) {
      let ts = T.ListLOfVector2L().as(this.attributes[$_get](canonical));
      for (let v of lst) {
        ts[$add](v);
      }
    }
    AddAttributeVector3(canonical, v) {
      let ts = T.ListLOfVector3L().as(this.attributes[$_get](canonical));
      ts[$add](v.clone());
    }
    AddAttributesVector3(canonical, lst) {
      let ts = T.ListLOfVector3L().as(this.attributes[$_get](canonical));
      for (let v of lst) {
        ts[$add](v.clone());
      }
    }
    AddAttributesVector3TakeOwnership(canonical, lst) {
      let ts = T.ListLOfVector3L().as(this.attributes[$_get](canonical));
      for (let v of lst) {
        ts[$add](v);
      }
    }
    AddAttributeVector4(canonical, v) {
      let ts = T.ListLOfVector4L().as(this.attributes[$_get](canonical));
      ts[$add](v.clone());
    }
    AddAttributesVector4(canonical, lst) {
      let ts = T.ListLOfVector4L().as(this.attributes[$_get](canonical));
      for (let v of lst) {
        ts[$add](v.clone());
      }
    }
    AddAttributesVector4TakeOwnership(canonical, lst) {
      let ts = this.attributes[$_get](canonical);
      for (let v of lst) {
        ts[$add](v);
      }
    }
    AddAttributesUvec4(canonical, lst) {
      let ts = this.attributes[$_get](canonical);
      for (let v of lst) {
        ts[$add](v[$sublist](0));
      }
    }
    AddVerticesFace4(vs) {
      if (!(vs[$length] === 4)) dart.assertFailed(null, I[8], 344, 12, "vs.length == 4");
      let i = this.vertices[$length];
      this.AddFace4(dart.notNull(i) + 0, dart.notNull(i) + 1, dart.notNull(i) + 2, dart.notNull(i) + 3);
      this.AddVertices(vs);
    }
    AddVerticesFace4TakeOwnership(vs) {
      if (!(vs[$length] === 4)) dart.assertFailed(null, I[8], 351, 12, "vs.length == 4");
      let i = this.vertices[$length];
      this.AddFace4(dart.notNull(i) + 0, dart.notNull(i) + 1, dart.notNull(i) + 2, dart.notNull(i) + 3);
      this.AddVerticesTakeOwnership(vs);
    }
    AddFaces4Strip(top, bot, closed) {
      if (!(top[$length] == bot[$length])) dart.assertFailed(null, I[8], 358, 12, "top.length == bot.length");
      let n = dart.notNull(top[$length]) - 1;
      for (let i = 0; i < n; i = i + 1) {
        this.AddVerticesFace4(T.JSArrayOfVector3L().of([bot[$_get](i), bot[$_get](i + 1), top[$_get](i + 1), top[$_get](i)]));
      }
      if (dart.test(closed)) {
        this.AddVerticesFace4(T.JSArrayOfVector3L().of([bot[$_get](n), bot[$_get](0), top[$_get](0), top[$_get](n)]));
      }
    }
    AddFaces4Strips(strips, closed, flip = false) {
      for (let i = 0; i < dart.notNull(strips[$length]) - 1; i = i + 1) {
        if (dart.test(flip)) {
          this.AddFaces4Strip(strips[$_get](i), strips[$_get](i + 1), closed);
        } else {
          this.AddFaces4Strip(strips[$_get](i + 1), strips[$_get](i), closed);
        }
      }
    }
    GenerateFaceIndices() {
      if (!(dart.notNull(this.faces3[$length]) > 0 || dart.notNull(this.faces4[$length]) > 0)) dart.assertFailed(null, I[8], 382, 12, "faces3.length > 0 || faces4.length > 0");
      let faces = T.ListOfintL().new(dart.notNull(this.faces3[$length]) * 3 + dart.notNull(this.faces4[$length]) * 6);
      let i = 0;
      for (let f3 of this.faces3) {
        faces[$_set](i + 0, f3.a);
        faces[$_set](i + 1, f3.b);
        faces[$_set](i + 2, f3.c);
        i = i + 3;
      }
      for (let f4 of this.faces4) {
        faces[$_set](i + 0, f4.a);
        faces[$_set](i + 1, f4.b);
        faces[$_set](i + 2, f4.c);
        faces[$_set](i + 3, f4.a);
        faces[$_set](i + 4, f4.c);
        faces[$_set](i + 5, f4.d);
        i = i + 6;
      }
      if (!(i === faces[$length])) dart.assertFailed(null, I[8], 401, 12, "i == faces.length");
      return faces;
    }
    GenerateLineIndices() {
      let lines = T.ListOfintL().new(dart.notNull(this.faces3[$length]) * 6 + dart.notNull(this.faces4[$length]) * 8);
      let i = 0;
      for (let f3 of this.faces3) {
        lines[$_set](i + 0, f3.a);
        lines[$_set](i + 1, f3.b);
        lines[$_set](i + 2, f3.b);
        lines[$_set](i + 3, f3.c);
        lines[$_set](i + 4, f3.c);
        lines[$_set](i + 5, f3.a);
        i = i + 6;
      }
      for (let f4 of this.faces4) {
        lines[$_set](i + 0, f4.a);
        lines[$_set](i + 1, f4.b);
        lines[$_set](i + 2, f4.b);
        lines[$_set](i + 3, f4.c);
        lines[$_set](i + 4, f4.c);
        lines[$_set](i + 5, f4.d);
        lines[$_set](i + 6, f4.d);
        lines[$_set](i + 7, f4.a);
        i = i + 8;
      }
      if (!(i === lines[$length])) dart.assertFailed(null, I[8], 428, 12, "i == lines.length");
      return lines;
    }
    GenerateNormalsAssumingTriangleMode() {
      let normals = T.ListOfVector3L().new(this.vertices[$length]);
      let temp = new vector_math.Vector3.zero();
      let norm = new vector_math.Vector3.zero();
      for (let f3 of this.faces3) {
        lib.NormalFromPoints(this.vertices[$_get](f3.a), this.vertices[$_get](f3.b), this.vertices[$_get](f3.c), temp, norm);
        normals[$_set](f3.a, norm.clone());
        normals[$_set](f3.b, norm.clone());
        normals[$_set](f3.c, norm.clone());
      }
      for (let f4 of this.faces4) {
        lib.NormalFromPoints(this.vertices[$_get](f4.a), this.vertices[$_get](f4.b), this.vertices[$_get](f4.c), temp, norm);
        normals[$_set](f4.a, norm.clone());
        normals[$_set](f4.b, norm.clone());
        normals[$_set](f4.c, norm.clone());
        normals[$_set](f4.d, norm.clone());
      }
      this.attributes[$_set]("aNormal", normals);
    }
    GenerateAveragedNormalsAssumingTriangleMode() {
      let t1, t1$;
      let avg = new (T.LinkedMapOfVector3L$Vector3L()).new();
      let temp = new vector_math.Vector3.zero();
      let norm = new vector_math.Vector3.zero();
      const add = (index, n) => {
        let t2, t1;
        let v = this.vertices[$_get](index);
        if (dart.test(avg[$containsKey](v))) {
          t1 = avg;
          t2 = v;
          t1[$_set](t2, t1[$_get](t2)['+'](n));
        } else {
          avg[$_set](v, n);
        }
      };
      dart.fn(add, T.intLAndVector3LTovoid());
      for (let f3 of this.faces3) {
        lib.NormalFromPoints(this.vertices[$_get](f3.a), this.vertices[$_get](f3.b), this.vertices[$_get](f3.c), temp, norm);
        let n = norm.clone();
        add(f3.a, n);
        add(f3.b, n);
        add(f3.c, n);
      }
      for (let f4 of this.faces4) {
        lib.NormalFromPoints(this.vertices[$_get](f4.a), this.vertices[$_get](f4.b), this.vertices[$_get](f4.c), temp, norm);
        let n = (t1 = norm.clone(), (() => {
          t1.scale(2.0);
          return t1;
        })());
        add(f4.a, n);
        add(f4.b, n);
        add(f4.c, n);
        add(f4.d, n);
      }
      for (let key of avg[$keys]) {
        avg[$_set](key, (t1$ = avg[$_get](key), (() => {
          t1$.normalize();
          return t1$;
        })()));
      }
      let normals = T.ListOfVector3L().new(this.vertices[$length]);
      for (let i = 0; i < dart.notNull(this.vertices[$length]); i = i + 1) {
        normals[$_set](i, avg[$_get](this.vertices[$_get](i)));
      }
      this.attributes[$_set]("aNormal", normals);
    }
    GenerateRadialNormals(center) {
      let norm = new vector_math.Vector3.zero();
      let normals = T.ListOfVector3L().new(this.vertices[$length]);
      for (let i = 0; i < dart.notNull(this.vertices[$length]); i = i + 1) {
        norm = this.vertices[$_get](i)['-'](center);
        norm.normalize();
        normals[$_set](i, norm.clone());
      }
      this.attributes[$_set]("aNormal", normals);
    }
    GenerateWireframeCenters() {
      let center = T.ListOfVector4L().new(this.vertices[$length]);
      let a3 = vector_math.Vector4.new(1.0, 0.0, 0.0, 0.0);
      let b3 = vector_math.Vector4.new(0.0, 1.0, 0.0, 0.0);
      let c3 = vector_math.Vector4.new(0.0, 0.0, 1.0, 0.0);
      for (let f of this.faces3) {
        center[$_set](f.a, a3.clone());
        center[$_set](f.b, b3.clone());
        center[$_set](f.c, c3.clone());
      }
      let a4 = vector_math.Vector4.new(1.0, 0.0, 0.0, 1.0);
      let b4 = vector_math.Vector4.new(1.0, 1.0, 0.0, 1.0);
      let c4 = vector_math.Vector4.new(0.0, 1.0, 0.0, 1.0);
      let d4 = vector_math.Vector4.new(0.0, 0.0, 0.0, 1.0);
      for (let f of this.faces4) {
        center[$_set](f.a, a4.clone());
        center[$_set](f.b, b4.clone());
        center[$_set](f.c, c4.clone());
        center[$_set](f.d, d4.clone());
      }
      this.attributes[$_set]("aCenter", center);
    }
    GenerateRegularGridUV(w, h) {
      if (!(this.vertices[$length] === dart.notNull(w) * dart.notNull(h))) dart.assertFailed("grid vertices length mismatch", I[8], 547, 12, "vertices.length == w * h");
      let uvs = T.JSArrayOfVector2L().of([]);
      this.attributes[$_set]("aTexUV", uvs);
      for (let y = dart.notNull(h) - 1; y >= 0; y = y - 1) {
        for (let x = 0; x < dart.notNull(w); x = x + 1) {
          uvs[$add](vector_math.Vector2.new(y / (dart.notNull(h) - 1), x / (dart.notNull(w) - 1)));
        }
      }
      if (!(uvs[$length] === dart.notNull(w) * dart.notNull(h))) dart.assertFailed("grid uvs lengths mismatch", I[8], 557, 12, "uvs.length == w * h");
    }
    GenerateRegularGridFaces(w, h, wrapped, reverse = false) {
      if (!(this.vertices[$length] === dart.notNull(w) * dart.notNull(h))) dart.assertFailed(null, I[8], 562, 12, "vertices.length == w * h");
      for (let i = 0; i < dart.notNull(h) - (dart.test(wrapped) ? 0 : 1); i = i + 1) {
        for (let j = 0; j < dart.notNull(w) - (dart.test(wrapped) ? 0 : 1); j = j + 1) {
          let ip = i + 1;
          let jp = j + 1;
          if (dart.test(wrapped)) {
            ip = ip[$modulo](h);
            jp = jp[$modulo](w);
          }
          this.AddFace4(i * dart.notNull(w) + jp, ip * dart.notNull(w) + jp, ip * dart.notNull(w) + j, i * dart.notNull(w) + j, reverse);
        }
      }
      if (dart.test(wrapped)) {
        if (!(this.faces4[$length] === dart.notNull(w) * dart.notNull(h))) dart.assertFailed("face4 length mismatch", I[8], 575, 14, "faces4.length == w * h");
      } else {
        if (!(this.faces4[$length] === (dart.notNull(w) - 1) * (dart.notNull(h) - 1))) dart.assertFailed("face4 length mismatch", I[8], 577, 14, "faces4.length == (w - 1) * (h - 1)");
      }
    }
    IsOrientableManifoldWithBoundaries() {
      let incidenceE = new (T.LinkedMapOfEdge3L$ObjectL()).new();
      function addEdge(v1, v2, face) {
        let edge = new lib.Edge3.new(v1, v2);
        let f = incidenceE[$putIfAbsent](edge, dart.fn(() => face, T.VoidToObjectL()));
        if (!dart.equals(f, face)) {
          lib.LogWarn("unexpected duplicate edge:  " + dart.str(edge));
          return true;
        } else {
          return false;
        }
      }
      dart.fn(addEdge, T.Vector3LAndVector3LAndObjectLToboolL());
      for (let f3 of this.faces3) {
        let va = this.vertices[$_get](f3.a);
        let vb = this.vertices[$_get](f3.b);
        let vc = this.vertices[$_get](f3.c);
        if (!!(!!(dart.notNull(addEdge(va, vb, f3)) | dart.test(addEdge(vb, vc, f3))) | dart.test(addEdge(vc, va, f3)))) {
          return false;
        }
      }
      for (let f4 of this.faces4) {
        let va = this.vertices[$_get](f4.a);
        let vb = this.vertices[$_get](f4.b);
        let vc = this.vertices[$_get](f4.c);
        let vd = this.vertices[$_get](f4.d);
        if (!!(!!(!!(!!(!!(dart.notNull(addEdge(va, vb, f4)) | dart.test(addEdge(vb, vc, f4))) | dart.test(addEdge(vc, va, f4))) | dart.test(addEdge(va, vc, f4))) | dart.test(addEdge(vc, vd, f4))) | dart.test(addEdge(vd, va, f4)))) {
          return false;
        }
      }
      for (let e of incidenceE[$keys]) {
        let f = new lib.Edge3.new(e.v2, e.v1);
        if (!dart.test(incidenceE[$containsKey](f))) {
          lib.LogWarn("unpaired edge " + dart.str(e.v1) + "->" + dart.str(e.v2));
          return false;
        }
      }
      let incidenceV = T.LinkedHashMapOfVector3L$ListLOfVector3L().new({hashCode: C[0] || CT.C0});
      for (let e of incidenceE[$keys]) {
        incidenceV[$putIfAbsent](e.v1, dart.fn(() => T.JSArrayOfVector3L().of([]), T.VoidToListLOfVector3L()))[$add](e.v2);
      }
      function formsLoop(lst) {
        for (let i = 0; i < dart.notNull(lst[$length]); i = i + 1) {
          let v1 = i === 0 ? lst[$last] : lst[$_get](i - 1);
          let found = false;
          for (let j = i; j < dart.notNull(lst[$length]); j = j + 1) {
            let v2 = lst[$_get](j);
            if (dart.test(incidenceE[$containsKey](new lib.Edge3.new(v1, v2)))) {
              lst[$_set](j, lst[$_get](i));
              lst[$_set](i, v2);
              found = true;
              break;
            }
          }
          if (!found) {
            return false;
          }
        }
        return true;
      }
      dart.fn(formsLoop, T.ListLOfVector3LToboolL());
      for (let lst of incidenceV[$values]) {
        if (!dart.test(formsLoop(lst))) {
          lib.LogWarn("fan issues for " + dart.str(lst));
          return false;
        }
      }
      return true;
    }
    toString() {
      let s = T.JSArrayOfStringL().of(["GB:", "V[" + dart.str(this.vertices[$length]) + "]", "f3[" + dart.str(this.faces3[$length]) + "]", "f4[" + dart.str(this.faces4[$length]) + "]"]);
      for (let canonical of this.attributes[$keys]) {
        let type = lib.RetrieveShaderVarDesc(canonical).type;
        s[$add](dart.str(canonical) + "[" + dart.str(type) + "," + dart.str(this.attributes[$_get](canonical)[$length]) + "]");
      }
      return s[$join](" ");
    }
  };
  (lib.GeometryBuilder.new = function(pointsOnly = false) {
    this[faces3] = T.JSArrayOfFace3L().of([]);
    this[faces4] = T.JSArrayOfFace4L().of([]);
    this[vertices] = T.JSArrayOfVector3L().of([]);
    this[attributes] = new (T.IdentityMapOfStringL$ListL()).new();
    this[pointsOnly$] = pointsOnly;
    ;
  }).prototype = lib.GeometryBuilder.prototype;
  dart.addTypeTests(lib.GeometryBuilder);
  dart.addTypeCaches(lib.GeometryBuilder);
  dart.setMethodSignature(lib.GeometryBuilder, () => ({
    __proto__: dart.getMethods(lib.GeometryBuilder.__proto__),
    EnableAttribute: dart.fnType(dart.void, [dart.legacy(core.String)]),
    HasAttribute: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    MergeAndTakeOwnership: dart.fnType(dart.void, [dart.legacy(lib.GeometryBuilder)], [dart.legacy(vector_math.Matrix4), dart.legacy(vector_math.Matrix3)]),
    SanityCheck: dart.fnType(dart.void, []),
    AddFace3: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    AddFace4: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.bool)]),
    AddFaces3: dart.fnType(dart.void, [dart.legacy(core.int)]),
    AddFaces4: dart.fnType(dart.void, [dart.legacy(core.int)], [dart.legacy(core.bool)]),
    AddVertices: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddVerticesTakeOwnership: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddVertex: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)]),
    AddVertexTakeOwnership: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)]),
    AddVerticesFace3: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddVerticesFace3TakeOwnership: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddAttributeDouble: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.double)]),
    AddAttributesDouble: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.double)))]),
    AddAttributeVector2: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(vector_math.Vector2)]),
    AddAttributesVector2: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(vector_math.Vector2)))]),
    AddAttributesVector2TakeOwnership: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(vector_math.Vector2)))]),
    AddAttributeVector3: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(vector_math.Vector3)]),
    AddAttributesVector3: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddAttributesVector3TakeOwnership: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddAttributeVector4: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(vector_math.Vector4)]),
    AddAttributesVector4: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(vector_math.Vector4)))]),
    AddAttributesVector4TakeOwnership: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(vector_math.Vector4)))]),
    AddAttributesUvec4: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(core.int)))))]),
    AddVerticesFace4: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddVerticesFace4TakeOwnership: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))]),
    AddFaces4Strip: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(vector_math.Vector3))), dart.legacy(core.List$(dart.legacy(vector_math.Vector3))), dart.legacy(core.bool)]),
    AddFaces4Strips: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(vector_math.Vector3))))), dart.legacy(core.bool)], [dart.legacy(core.bool)]),
    GenerateFaceIndices: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), []),
    GenerateLineIndices: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), []),
    GenerateNormalsAssumingTriangleMode: dart.fnType(dart.void, []),
    GenerateAveragedNormalsAssumingTriangleMode: dart.fnType(dart.void, []),
    GenerateRadialNormals: dart.fnType(dart.void, [dart.legacy(vector_math.Vector3)]),
    GenerateWireframeCenters: dart.fnType(dart.void, []),
    GenerateRegularGridUV: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    GenerateRegularGridFaces: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)], [dart.legacy(core.bool)]),
    IsOrientableManifoldWithBoundaries: dart.fnType(dart.legacy(core.bool), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.GeometryBuilder, I[0]);
  dart.setFieldSignature(lib.GeometryBuilder, () => ({
    __proto__: dart.getFields(lib.GeometryBuilder.__proto__),
    pointsOnly: dart.finalFieldType(dart.legacy(core.bool)),
    faces3: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(lib.Face3)))),
    faces4: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(lib.Face4)))),
    vertices: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))),
    attributes: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.List))))
  }));
  dart.defineExtensionMethods(lib.GeometryBuilder, ['toString']);
  var type$1 = dart.privateName(lib, "Light.type");
  var colorDiffuse = dart.privateName(lib, "Light.colorDiffuse");
  var colorSpecular = dart.privateName(lib, "Light.colorSpecular");
  lib.Light = class Light extends lib.NamedEntity {
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    get colorDiffuse() {
      return this[colorDiffuse];
    }
    set colorDiffuse(value) {
      super.colorDiffuse = value;
    }
    get colorSpecular() {
      return this[colorSpecular];
    }
    set colorSpecular(value) {
      super.colorSpecular = value;
    }
  };
  (lib.Light.new = function(name, type, diffuse, specular) {
    this[colorDiffuse] = new vector_math.Vector3.zero();
    this[colorSpecular] = new vector_math.Vector3.zero();
    this[type$1] = type;
    lib.Light.__proto__.new.call(this, name);
    this.colorDiffuse.setFrom(diffuse);
    this.colorSpecular.setFrom(specular);
  }).prototype = lib.Light.prototype;
  dart.addTypeTests(lib.Light);
  dart.addTypeCaches(lib.Light);
  dart.setLibraryUri(lib.Light, I[0]);
  dart.setFieldSignature(lib.Light, () => ({
    __proto__: dart.getFields(lib.Light.__proto__),
    type: dart.finalFieldType(dart.legacy(core.int)),
    colorDiffuse: dart.finalFieldType(dart.legacy(vector_math.Vector3)),
    colorSpecular: dart.finalFieldType(dart.legacy(vector_math.Vector3))
  }));
  var pos$ = dart.privateName(lib, "PointLight.pos");
  var range$ = dart.privateName(lib, "PointLight.range");
  lib.PointLight = class PointLight extends lib.Light {
    get pos() {
      return this[pos$];
    }
    set pos(value) {
      this[pos$] = value;
    }
    get range() {
      return this[range$];
    }
    set range(value) {
      this[range$] = value;
    }
    ExtractInfo(m, o) {
      m[$_set](dart.notNull(o) + 0, this.pos.x);
      m[$_set](dart.notNull(o) + 1, this.pos.y);
      m[$_set](dart.notNull(o) + 2, this.pos.z);
      m[$_set](dart.notNull(o) + 8, this.colorDiffuse.x);
      m[$_set](dart.notNull(o) + 9, this.colorDiffuse.y);
      m[$_set](dart.notNull(o) + 10, this.colorDiffuse.z);
      m[$_set](dart.notNull(o) + 12, this.colorSpecular.x);
      m[$_set](dart.notNull(o) + 13, this.colorSpecular.y);
      m[$_set](dart.notNull(o) + 14, this.colorSpecular.z);
      m[$_set](dart.notNull(o) + 7, this.range);
    }
    ExtractShadowProjViewMatrix() {
      if (!false) dart.assertFailed("NYI", I[9], 57, 12, "false");
      return new vector_math.Matrix4.zero();
    }
    toString() {
      return "PL: p:" + dart.str(this.pos) + "  r:" + dart.str(this.range);
    }
  };
  (lib.PointLight.new = function(name, pos, colorDiffuse, colorSpecular, range) {
    this[pos$] = pos;
    this[range$] = range;
    lib.PointLight.__proto__.new.call(this, name, 3, colorDiffuse, colorSpecular);
    ;
  }).prototype = lib.PointLight.prototype;
  dart.addTypeTests(lib.PointLight);
  dart.addTypeCaches(lib.PointLight);
  dart.setMethodSignature(lib.PointLight, () => ({
    __proto__: dart.getMethods(lib.PointLight.__proto__),
    ExtractInfo: dart.fnType(dart.void, [dart.legacy(typed_data.Float32List), dart.legacy(core.int)]),
    ExtractShadowProjViewMatrix: dart.fnType(dart.legacy(vector_math.Matrix4), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.PointLight, I[0]);
  dart.setFieldSignature(lib.PointLight, () => ({
    __proto__: dart.getFields(lib.PointLight.__proto__),
    pos: dart.fieldType(dart.legacy(vector_math.Vector3)),
    range: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(lib.PointLight, ['toString']);
  var dir$ = dart.privateName(lib, "DirectionalLight.dir");
  var dim$ = dart.privateName(lib, "DirectionalLight.dim");
  var _projViewMat = dart.privateName(lib, "_projViewMat");
  var _tmpMat = dart.privateName(lib, "_tmpMat");
  lib.DirectionalLight = class DirectionalLight extends lib.Light {
    get dir() {
      return this[dir$];
    }
    set dir(value) {
      super.dir = value;
    }
    get dim() {
      return this[dim$];
    }
    set dim(value) {
      super.dim = value;
    }
    ExtractInfo(m, o) {
      m[$_set](dart.notNull(o) + 4, this.dir.x);
      m[$_set](dart.notNull(o) + 5, this.dir.y);
      m[$_set](dart.notNull(o) + 6, this.dir.z);
      m[$_set](dart.notNull(o) + 8, this.colorDiffuse.x);
      m[$_set](dart.notNull(o) + 9, this.colorDiffuse.y);
      m[$_set](dart.notNull(o) + 10, this.colorDiffuse.z);
      m[$_set](dart.notNull(o) + 12, this.colorSpecular.x);
      m[$_set](dart.notNull(o) + 13, this.colorSpecular.y);
      m[$_set](dart.notNull(o) + 14, this.colorSpecular.z);
    }
    ExtractShadowProjViewMatrix() {
      vector_math.setOrthographicMatrix(this[_projViewMat], -dart.notNull(this.dim), this.dim, -dart.notNull(this.dim), this.dim, -dart.notNull(this.dim), this.dim);
      let up = this.dir.x === 0.0 && this.dir.z === 0.0 ? lib._up2 : lib._up;
      vector_math.setViewMatrix(this[_tmpMat], new vector_math.Vector3.zero(), this.dir, up);
      this[_projViewMat].multiply(this[_tmpMat]);
      return this[_projViewMat];
    }
    toString() {
      return "DL: p:" + dart.str(this.dir);
    }
  };
  (lib.DirectionalLight.new = function(name, dir, colorDiffuse, colorSpecular, dim) {
    this[_projViewMat] = new vector_math.Matrix4.zero();
    this[_tmpMat] = new vector_math.Matrix4.zero();
    this[dir$] = dir;
    this[dim$] = dim;
    lib.DirectionalLight.__proto__.new.call(this, name, 1, colorDiffuse, colorSpecular);
    ;
  }).prototype = lib.DirectionalLight.prototype;
  dart.addTypeTests(lib.DirectionalLight);
  dart.addTypeCaches(lib.DirectionalLight);
  dart.setMethodSignature(lib.DirectionalLight, () => ({
    __proto__: dart.getMethods(lib.DirectionalLight.__proto__),
    ExtractInfo: dart.fnType(dart.void, [dart.legacy(typed_data.Float32List), dart.legacy(core.int)]),
    ExtractShadowProjViewMatrix: dart.fnType(dart.legacy(vector_math.Matrix4), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.DirectionalLight, I[0]);
  dart.setFieldSignature(lib.DirectionalLight, () => ({
    __proto__: dart.getFields(lib.DirectionalLight.__proto__),
    dir: dart.finalFieldType(dart.legacy(vector_math.Vector3)),
    dim: dart.finalFieldType(dart.legacy(core.double)),
    [_projViewMat]: dart.fieldType(dart.legacy(vector_math.Matrix4)),
    [_tmpMat]: dart.fieldType(dart.legacy(vector_math.Matrix4))
  }));
  dart.defineExtensionMethods(lib.DirectionalLight, ['toString']);
  var pos$0 = dart.privateName(lib, "SpotLight.pos");
  var dir$0 = dart.privateName(lib, "SpotLight.dir");
  var range$0 = dart.privateName(lib, "SpotLight.range");
  var angle$ = dart.privateName(lib, "SpotLight.angle");
  var _m1 = dart.privateName(lib, "_m1");
  var _m2 = dart.privateName(lib, "_m2");
  var _spotFocus$ = dart.privateName(lib, "_spotFocus");
  lib.SpotLight = class SpotLight extends lib.Light {
    get pos() {
      return this[pos$0];
    }
    set pos(value) {
      this[pos$0] = value;
    }
    get dir() {
      return this[dir$0];
    }
    set dir(value) {
      this[dir$0] = value;
    }
    get range() {
      return this[range$0];
    }
    set range(value) {
      this[range$0] = value;
    }
    get angle() {
      return this[angle$];
    }
    set angle(value) {
      this[angle$] = value;
    }
    ExtractInfo(m, o) {
      m[$_set](dart.notNull(o) + 0, this.pos.x);
      m[$_set](dart.notNull(o) + 1, this.pos.y);
      m[$_set](dart.notNull(o) + 2, this.pos.z);
      m[$_set](dart.notNull(o) + 4, this.dir.x);
      m[$_set](dart.notNull(o) + 5, this.dir.y);
      m[$_set](dart.notNull(o) + 6, this.dir.z);
      m[$_set](dart.notNull(o) + 8, this.colorDiffuse.x);
      m[$_set](dart.notNull(o) + 9, this.colorDiffuse.y);
      m[$_set](dart.notNull(o) + 10, this.colorDiffuse.z);
      m[$_set](dart.notNull(o) + 12, this.colorSpecular.x);
      m[$_set](dart.notNull(o) + 13, this.colorSpecular.y);
      m[$_set](dart.notNull(o) + 14, this.colorSpecular.z);
      m[$_set](dart.notNull(o) + 7, this.range);
      m[$_set](dart.notNull(o) + 11, math.cos(this.angle));
      m[$_set](dart.notNull(o) + 15, this[_spotFocus$]);
    }
    ExtractShadowProjViewMatrix() {
      let up = this.dir.x === 0.0 && this.dir.z === 0.0 ? lib._up2 : lib._up;
      vector_math.setViewMatrix(this[_m1], this.pos, this.dir['+'](this.pos), up);
      vector_math.setPerspectiveMatrix(this[_m2], 2.1 * dart.notNull(this.angle), this[_aspect], this[_near$], this[_far$]);
      this[_m2].multiply(this[_m1]);
      return this[_m2];
    }
    toString() {
      return "SL: p:" + dart.str(this.pos) + "  d:" + dart.str(this.dir) + "  r:" + dart.str(this.range) + "  a:" + dart.str(this.angle);
    }
  };
  (lib.SpotLight.new = function(name, pos, dir, colorDiffuse, colorSpecular, range, angle, _spotFocus, _near, _far) {
    this[_aspect] = 1.0;
    this[_m1] = new vector_math.Matrix4.zero();
    this[_m2] = new vector_math.Matrix4.zero();
    this[pos$0] = pos;
    this[dir$0] = dir;
    this[range$0] = range;
    this[angle$] = angle;
    this[_spotFocus$] = _spotFocus;
    this[_near$] = _near;
    this[_far$] = _far;
    lib.SpotLight.__proto__.new.call(this, name, 2, colorDiffuse, colorSpecular);
    ;
  }).prototype = lib.SpotLight.prototype;
  dart.addTypeTests(lib.SpotLight);
  dart.addTypeCaches(lib.SpotLight);
  dart.setMethodSignature(lib.SpotLight, () => ({
    __proto__: dart.getMethods(lib.SpotLight.__proto__),
    ExtractInfo: dart.fnType(dart.void, [dart.legacy(typed_data.Float32List), dart.legacy(core.int)]),
    ExtractShadowProjViewMatrix: dart.fnType(dart.legacy(vector_math.Matrix4), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.SpotLight, I[0]);
  dart.setFieldSignature(lib.SpotLight, () => ({
    __proto__: dart.getFields(lib.SpotLight.__proto__),
    pos: dart.fieldType(dart.legacy(vector_math.Vector3)),
    dir: dart.fieldType(dart.legacy(vector_math.Vector3)),
    range: dart.fieldType(dart.legacy(core.double)),
    angle: dart.fieldType(dart.legacy(core.double)),
    [_spotFocus$]: dart.fieldType(dart.legacy(core.double)),
    [_aspect]: dart.fieldType(dart.legacy(core.double)),
    [_near$]: dart.fieldType(dart.legacy(core.double)),
    [_far$]: dart.fieldType(dart.legacy(core.double)),
    [_m1]: dart.fieldType(dart.legacy(vector_math.Matrix4)),
    [_m2]: dart.fieldType(dart.legacy(vector_math.Matrix4))
  }));
  dart.defineExtensionMethods(lib.SpotLight, ['toString']);
  var _lights = dart.privateName(lib, "_lights");
  var _lightDescs = dart.privateName(lib, "_lightDescs");
  var _lightTypes = dart.privateName(lib, "_lightTypes");
  lib.Illumination = class Illumination extends lib.UniformGroup {
    AddLight(l) {
      this[_lights][$add](l);
    }
    static _SetLightInfo(descs, types, lights) {
      descs[$fillRange](0, descs[$length], 0.0);
      types[$fillRange](0, types[$length], 0 + 0.0);
      let n = 0;
      for (let l of lights) {
        if (dart.test(l.enabled)) {
          l.ExtractInfo(descs, n * 16);
          types[$_set](n, dart.notNull(l.type) + 0.0);
          n = n + 1;
        }
      }
    }
    GetUniforms() {
      lib.Illumination._SetLightInfo(this[_lightDescs], this[_lightTypes], this[_lights]);
      this.ForceUniform("uLightDescs", this[_lightDescs]);
      this.ForceUniform("uLightTypes", this[_lightTypes]);
      return this[_uniforms];
    }
  };
  (lib.Illumination.new = function() {
    this[_lights] = T.JSArrayOfLightL().of([]);
    this[_lightDescs] = _native_typed_data.NativeFloat32List.new(16 * 4);
    this[_lightTypes] = _native_typed_data.NativeFloat32List.new(4);
    lib.Illumination.__proto__.new.call(this, "illumination");
    ;
  }).prototype = lib.Illumination.prototype;
  dart.addTypeTests(lib.Illumination);
  dart.addTypeCaches(lib.Illumination);
  dart.setMethodSignature(lib.Illumination, () => ({
    __proto__: dart.getMethods(lib.Illumination.__proto__),
    AddLight: dart.fnType(dart.void, [dart.legacy(lib.Light)])
  }));
  dart.setLibraryUri(lib.Illumination, I[0]);
  dart.setFieldSignature(lib.Illumination, () => ({
    __proto__: dart.getFields(lib.Illumination.__proto__),
    [_lights]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(lib.Light)))),
    [_lightDescs]: dart.finalFieldType(dart.legacy(typed_data.Float32List)),
    [_lightTypes]: dart.finalFieldType(dart.legacy(typed_data.Float32List))
  }));
  lib._AddLineNumbers = function _AddLineNumbers(text) {
    let out = text[$split]("\n");
    for (let i = 0; i < dart.notNull(out[$length]); i = i + 1) {
      out[$_set](i, dart.str(i + 1) + ": " + dart.str(out[$_get](i)));
    }
    return out[$join]("\n");
  };
  lib._CompileShader = function _CompileShader(gl, type, text) {
    let shader = T.ShaderL().as(dart.dsend(gl, 'createShader', [type]));
    dart.dsend(gl, 'shaderSource', [shader, text]);
    dart.dsend(gl, 'compileShader', [shader]);
    let result = T.boolL().as(dart.dsend(gl, 'getShaderParameter', [shader, 35713]));
    if (result != null && result === false) {
      let error = T.StringL().as(dart.dsend(gl, 'getShaderInfoLog', [shader]));
      lib.LogError("Compilation failed:");
      lib.LogError(lib._AddLineNumbers(text));
      lib.LogError("Failure:");
      lib.LogError(error);
      dart.throw(error);
    }
    return shader;
  };
  lib.TextureChannelsByType = function TextureChannelsByType(format) {
    switch (format) {
      case 6409:
      {
        return 1;
      }
      case 6410:
      {
        return 2;
      }
      case 6407:
      {
        return 3;
      }
      case 6408:
      {
        return 4;
      }
      default:
      {
        if (!false) dart.assertFailed("unexpected format: " + dart.str(format), I[5], 17, 14, "false");
        return -1;
      }
    }
  };
  lib._FormatName = function _FormatName(format) {
    switch (format) {
      case 6409:
      {
        return "GL_LUMINANCE";
      }
      case 6410:
      {
        return "GL_LUMINANCE_ALPHA";
      }
      case 6407:
      {
        return "GL_RGB";
      }
      case 6408:
      {
        return "GL_RGBA";
      }
      default:
      {
        return dart.str(format);
      }
    }
  };
  lib._TypeName = function _TypeName(code) {
    switch (code) {
      case 5121:
      {
        return "GL_UNSIGNED_BYTE";
      }
      case 5126:
      {
        return "GL_FLOAT";
      }
      default:
      {
        return dart.str(code);
      }
    }
  };
  lib.NormalFromPoints = function NormalFromPoints(a, b, c, temp, normal) {
    let t1, t1$;
    t1 = temp;
    (() => {
      t1.setFrom(b);
      t1.sub(a);
      return t1;
    })();
    t1$ = normal;
    (() => {
      t1$.setFrom(c);
      t1$.sub(a);
      return t1$;
    })();
    normal.crossInto(temp, normal);
    let len = normal.length;
    if (len === 0) {
      return false;
    }
    normal.scale(-1 / dart.notNull(len));
    return true;
  };
  lib.hashVector3 = function hashVector3(v) {
    let h = 0;
    for (let i of v.storage[$buffer][$asInt32List]()) {
      h = (h ^ dart.notNull(i)) >>> 0;
    }
    return h;
  };
  lib.LogInfo = function LogInfo(s) {
    if (dart.notNull(lib.gLogLevel) > 0) core.print("I: " + dart.notNull(s));
  };
  lib.LogDebug = function LogDebug(s) {
  };
  lib.LogError = function LogError(s) {
    core.print("E:" + dart.notNull(s));
  };
  lib.LogWarn = function LogWarn(s) {
    core.print("W:" + dart.notNull(s));
  };
  lib.FlattenVector3List = function FlattenVector3List(v, data = null) {
    if (data == null) data = _native_typed_data.NativeFloat32List.new(dart.notNull(v[$length]) * 3);
    for (let i = 0; i < dart.notNull(v[$length]); i = i + 1) {
      data[$_set](i * 3 + 0, v[$_get](i).x);
      data[$_set](i * 3 + 1, v[$_get](i).y);
      data[$_set](i * 3 + 2, v[$_get](i).z);
    }
    return data;
  };
  lib.FlattenVector2List = function FlattenVector2List(v, data = null) {
    if (data == null) data = _native_typed_data.NativeFloat32List.new(dart.notNull(v[$length]) * 2);
    for (let i = 0; i < dart.notNull(v[$length]); i = i + 1) {
      data[$_set](i * 2 + 0, v[$_get](i).x);
      data[$_set](i * 2 + 1, v[$_get](i).y);
    }
    return data;
  };
  lib.FlattenVector4List = function FlattenVector4List(v, data = null) {
    if (data == null) data = _native_typed_data.NativeFloat32List.new(dart.notNull(v[$length]) * 4);
    for (let i = 0; i < dart.notNull(v[$length]); i = i + 1) {
      data[$_set](i * 4 + 0, v[$_get](i).x);
      data[$_set](i * 4 + 1, v[$_get](i).y);
      data[$_set](i * 4 + 2, v[$_get](i).z);
      data[$_set](i * 4 + 3, v[$_get](i).w);
    }
    return data;
  };
  lib.FlattenUvec4List = function FlattenUvec4List(v, data = null) {
    if (data == null) data = _native_typed_data.NativeUint32List.new(dart.notNull(v[$length]) * 4);
    for (let i = 0; i < dart.notNull(v[$length]); i = i + 1) {
      data[$_set](i * 4 + 0, v[$_get](i)[$_get](0));
      data[$_set](i * 4 + 1, v[$_get](i)[$_get](1));
      data[$_set](i * 4 + 2, v[$_get](i)[$_get](2));
      data[$_set](i * 4 + 3, v[$_get](i)[$_get](3));
    }
    return data;
  };
  lib.FlattenMatrix4List = function FlattenMatrix4List(v, data = null) {
    if (data == null) data = _native_typed_data.NativeFloat32List.new(dart.notNull(v[$length]) * 16);
    for (let i = 0; i < dart.notNull(v[$length]); i = i + 1) {
      let m = v[$_get](i);
      for (let j = 0; j < 16; j = j + 1)
        data[$_set](i * 16 + j, m._get(j));
    }
    return data;
  };
  lib._GeometryBuilderAttributesToMeshData = function _GeometryBuilderAttributesToMeshData(gb, md) {
    for (let canonical of gb.attributes[$keys]) {
      if (!dart.test(md.SupportsAttribute(canonical))) {
        lib.LogInfo("Dropping unnecessary attribute: " + dart.str(canonical));
        continue;
      }
      let lst = gb.attributes[$_get](canonical);
      let desc = lib.RetrieveShaderVarDesc(canonical);
      switch (desc.type) {
        case "vec2":
        {
          md.AddAttribute(canonical, lib.FlattenVector2List(T.ListLOfVector2L().as(lst)), 2);
          break;
        }
        case "vec3":
        {
          md.AddAttribute(canonical, lib.FlattenVector3List(T.ListLOfVector3L().as(lst)), 3);
          break;
        }
        case "vec4":
        {
          md.AddAttribute(canonical, lib.FlattenVector4List(T.ListLOfVector4L().as(lst)), 4);
          break;
        }
        case "float":
        {
          md.AddAttribute(canonical, _native_typed_data.NativeFloat32List.fromList(T.ListLOfdoubleL().as(lst)), 1);
          break;
        }
        case "uvec4":
        {
          md.AddAttribute(canonical, lib.FlattenUvec4List(T.ListLOfListLOfintL().as(lst)), 4);
          break;
        }
        default:
        {
          if (!false) dart.assertFailed("unknown type for " + dart.str(canonical) + " [" + dart.str(dart.runtimeType(lst[$_get](0))) + "] [" + dart.str(dart.runtimeType(lst)) + "] " + dart.str(lst), I[2], 240, 16, "false");
        }
      }
    }
  };
  lib.GeometryBuilderToMeshData = function GeometryBuilderToMeshData(name, prog, gb) {
    let md = prog.MakeMeshData(name, dart.test(gb.pointsOnly) ? 0 : 4);
    md.AddVertices(lib.FlattenVector3List(gb.vertices));
    if (!dart.test(gb.pointsOnly)) md.AddFaces(gb.GenerateFaceIndices());
    lib._GeometryBuilderAttributesToMeshData(gb, md);
    return md;
  };
  lib._ExtractWireframeNormals = function _ExtractWireframeNormals(out, vertices, normals, scale) {
    if (!(vertices[$length] == normals[$length])) dart.assertFailed(null, I[2], 258, 10, "vertices.length == normals.length");
    let v = _native_typed_data.NativeFloat32List.new(2 * dart.notNull(vertices[$length]));
    for (let i = 0; i < dart.notNull(vertices[$length]); i = i + 3) {
      v[$_set](2 * i + 0, vertices[$_get](i + 0));
      v[$_set](2 * i + 1, vertices[$_get](i + 1));
      v[$_set](2 * i + 2, vertices[$_get](i + 2));
      v[$_set](2 * i + 3, dart.notNull(vertices[$_get](i + 0)) + dart.notNull(scale) * dart.notNull(normals[$_get](i + 0)));
      v[$_set](2 * i + 4, dart.notNull(vertices[$_get](i + 1)) + dart.notNull(scale) * dart.notNull(normals[$_get](i + 1)));
      v[$_set](2 * i + 5, dart.notNull(vertices[$_get](i + 2)) + dart.notNull(scale) * dart.notNull(normals[$_get](i + 2)));
    }
    out.AddVertices(v);
    let n = (2 * dart.notNull(vertices[$length]) / 3)[$truncate]();
    let lines = T.ListOfintL().new(n);
    for (let i = 0; i < n; i = i + 1) {
      lines[$_set](i, i);
    }
    out.AddFaces(lines);
    return out;
  };
  lib.GeometryBuilderToWireframeNormals = function GeometryBuilderToWireframeNormals(prog, gb, scale = 1) {
    let out = prog.MakeMeshData("norm", 1);
    return lib._ExtractWireframeNormals(out, lib.FlattenVector3List(gb.vertices), lib.FlattenVector3List(T.ListLOfVector3L().as(gb.attributes[$_get]("aNormal"))), scale);
  };
  lib.GeometryBuilderToMeshDataWireframe = function GeometryBuilderToMeshDataWireframe(name, prog, gb) {
    let md = prog.MakeMeshData(name, 1);
    md.AddVertices(lib.FlattenVector3List(gb.vertices));
    md.AddFaces(gb.GenerateLineIndices());
    lib._GeometryBuilderAttributesToMeshData(gb, md);
    return md;
  };
  lib.LineEndPointsToMeshData = function LineEndPointsToMeshData(name, prog, points) {
    let md = prog.MakeMeshData(name, 1);
    md.AddVertices(lib.FlattenVector3List(points));
    let faces = T.ListOfintL().new(points[$length]);
    for (let i = 0; i < dart.notNull(points[$length]); i = i + 1)
      faces[$_set](i, i);
    md.AddFaces(faces);
    return md;
  };
  lib.ExtractWireframeNormals = function ExtractWireframeNormals(prog, md, scale = 1) {
    if (!(md[_drawMode$] === 4)) dart.assertFailed("expected GL_TRIANGLES", I[2], 310, 10, "md._drawMode == GL_TRIANGLES");
    let out = prog.MakeMeshData(md.name, 1);
    let vertices = md.GetAttribute("aPosition");
    let normals = md.GetAttribute("aNormal");
    return lib._ExtractWireframeNormals(out, vertices, normals, scale);
  };
  lib.ExtractWireframe = function ExtractWireframe(prog, md) {
    if (!(md[_drawMode$] === 4)) dart.assertFailed(null, I[2], 318, 10, "md._drawMode == GL_TRIANGLES");
    let out = prog.MakeMeshData(md.name, 1);
    out.AddVertices(md[_vertices]);
    let faces = md[_faces];
    let lines = T.ListOfintL().new(dart.notNull(faces[$length]) * 2);
    for (let i = 0; i < dart.notNull(faces[$length]); i = i + 3) {
      lines[$_set](i * 2 + 0, faces[$_get](i + 0));
      lines[$_set](i * 2 + 1, faces[$_get](i + 1));
      lines[$_set](i * 2 + 2, faces[$_get](i + 1));
      lines[$_set](i * 2 + 3, faces[$_get](i + 2));
      lines[$_set](i * 2 + 4, faces[$_get](i + 2));
      lines[$_set](i * 2 + 5, faces[$_get](i + 0));
    }
    out.AddFaces(lines);
    return out;
  };
  lib.ExtractPointCloud = function ExtractPointCloud(prog, md) {
    if (!(md[_drawMode$] === 4)) dart.assertFailed("expected GL_TRIANGLES", I[2], 337, 10, "md._drawMode == GL_TRIANGLES");
    if (!dart.test(md.SupportsAttribute("aNormal"))) dart.assertFailed("expected support for aNormal", I[2], 338, 10, "md.SupportsAttribute(aNormal)");
    let out = prog.MakeMeshData(md.name, 0);
    out.AddVertices(md[_vertices]);
    out.AddAttribute("aNormal", md.GetAttribute("aNormal"), 3);
    return out;
  };
  lib.IntroduceNewShaderVar = function IntroduceNewShaderVar(canonical, desc) {
    if (!!dart.test(lib._VarsDb[$containsKey](canonical))) dart.assertFailed("duplicate shader variable " + dart.str(canonical), I[7], 313, 10, "!_VarsDb.containsKey(canonical)");
    lib._VarsDb[$_set](canonical, desc);
  };
  lib.RetrieveShaderVarDesc = function RetrieveShaderVarDesc(canonical) {
    return lib._VarsDb[$_get](canonical);
  };
  lib.IsCubeChildTextureType = function IsCubeChildTextureType(t) {
    switch (t) {
      case 34070:
      case 34069:
      case 34072:
      case 34071:
      case 34074:
      case 34073:
      {
        return true;
      }
      default:
      {
        return false;
      }
    }
  };
  dart.defineLazy(lib, {
    /*lib.gLogLevel*/get gLogLevel() {
      return 0;
    },
    set gLogLevel(_) {},
    /*lib.TexturePropertiesFramebuffer*/get TexturePropertiesFramebuffer() {
      let t1;
      return t1 = new lib.TextureProperties.new(), (() => {
        t1.flipY = false;
        t1.clamp = true;
        t1.mipmap = false;
        t1.SetFilterNearest();
        return t1;
      })();
    },
    /*lib.TexturePropertiesFramebufferWrapped*/get TexturePropertiesFramebufferWrapped() {
      let t1;
      return t1 = new lib.TextureProperties.new(), (() => {
        t1.flipY = false;
        t1.clamp = false;
        t1.mipmap = false;
        t1.SetFilterNearest();
        return t1;
      })();
    },
    /*lib.TexturePropertiesVideo*/get TexturePropertiesVideo() {
      let t1;
      return t1 = new lib.TextureProperties.new(), (() => {
        t1.clamp = true;
        return t1;
      })();
    },
    /*lib.TexturePropertiesShadowMap*/get TexturePropertiesShadowMap() {
      let t1;
      return t1 = new lib.TextureProperties.new(), (() => {
        t1.flipY = false;
        t1.clamp = true;
        t1.mipmap = false;
        t1.shadow = true;
        return t1;
      })();
    },
    /*lib.TexturePropertiesMipmap*/get TexturePropertiesMipmap() {
      let t1;
      return t1 = new lib.TextureProperties.new(), (() => {
        t1.SetMipmapLinear();
        return t1;
      })();
    },
    /*lib._kCubeModifier*/get _kCubeModifier() {
      return C[1] || CT.C1;
    },
    /*lib.StencilFunctionNone*/get StencilFunctionNone() {
      return new lib.TheStencilFunction.new(1281, 0, ~0 >>> 0);
    },
    /*lib.StencilFunctionAlways*/get StencilFunctionAlways() {
      return new lib.TheStencilFunction.new(519, 0, ~0 >>> 0);
    },
    /*lib.BlendEquationNone*/get BlendEquationNone() {
      return new lib.TheBlendEquation.new(1281, 1281, 1281);
    },
    /*lib.BlendEquationStandard*/get BlendEquationStandard() {
      return new lib.TheBlendEquation.new(32774, 770, 771);
    },
    /*lib.BlendEquationMix*/get BlendEquationMix() {
      return new lib.TheBlendEquation.new(32774, 770, 769);
    },
    /*lib.BlendEquationAdd*/get BlendEquationAdd() {
      return new lib.TheBlendEquation.new(32774, 1, 1);
    },
    /*lib.GL_CLEAR_ALL*/get GL_CLEAR_ALL() {
      return 17664;
    },
    /*lib.NO_WEBGL_MESSAGE*/get NO_WEBGL_MESSAGE() {
      return "Calling canvas.getContext(\"webgl2\") failed,\nmake sure you run on a computer that supports WebGL2.\n\nYou can test your browser's compatibility here: http://webglreport.com/\n\n(If you are using Dartium make sure you start it with the\noption: --enable-unsafe-es3-apis)\n";
    },
    /*lib.kNoAnisotropicFilterLevel*/get kNoAnisotropicFilterLevel() {
      return 1;
    },
    /*lib.GL_ACTIVE_ATTRIBUTES*/get GL_ACTIVE_ATTRIBUTES() {
      return 35721;
    },
    /*lib.GL_ACTIVE_TEXTURE*/get GL_ACTIVE_TEXTURE() {
      return 34016;
    },
    /*lib.GL_ACTIVE_UNIFORMS*/get GL_ACTIVE_UNIFORMS() {
      return 35718;
    },
    /*lib.GL_ACTIVE_UNIFORM_BLOCKS*/get GL_ACTIVE_UNIFORM_BLOCKS() {
      return 35382;
    },
    /*lib.GL_ALIASED_LINE_WIDTH_RANGE*/get GL_ALIASED_LINE_WIDTH_RANGE() {
      return 33902;
    },
    /*lib.GL_ALIASED_POINT_SIZE_RANGE*/get GL_ALIASED_POINT_SIZE_RANGE() {
      return 33901;
    },
    /*lib.GL_ALPHA*/get GL_ALPHA() {
      return 6406;
    },
    /*lib.GL_ALPHA_BITS*/get GL_ALPHA_BITS() {
      return 3413;
    },
    /*lib.GL_ALWAYS*/get GL_ALWAYS() {
      return 519;
    },
    /*lib.GL_ANY_SAMPLES_PASSED*/get GL_ANY_SAMPLES_PASSED() {
      return 35887;
    },
    /*lib.GL_ANY_SAMPLES_PASSED_CONSERVATIVE*/get GL_ANY_SAMPLES_PASSED_CONSERVATIVE() {
      return 36202;
    },
    /*lib.GL_ARRAY_BUFFER*/get GL_ARRAY_BUFFER() {
      return 34962;
    },
    /*lib.GL_ARRAY_BUFFER_BINDING*/get GL_ARRAY_BUFFER_BINDING() {
      return 34964;
    },
    /*lib.GL_ATTACHED_SHADERS*/get GL_ATTACHED_SHADERS() {
      return 35717;
    },
    /*lib.GL_BACK*/get GL_BACK() {
      return 1029;
    },
    /*lib.GL_BLEND*/get GL_BLEND() {
      return 3042;
    },
    /*lib.GL_BLEND_COLOR*/get GL_BLEND_COLOR() {
      return 32773;
    },
    /*lib.GL_BLEND_DST_ALPHA*/get GL_BLEND_DST_ALPHA() {
      return 32970;
    },
    /*lib.GL_BLEND_DST_RGB*/get GL_BLEND_DST_RGB() {
      return 32968;
    },
    /*lib.GL_BLEND_EQUATION*/get GL_BLEND_EQUATION() {
      return 32777;
    },
    /*lib.GL_BLEND_EQUATION_ALPHA*/get GL_BLEND_EQUATION_ALPHA() {
      return 34877;
    },
    /*lib.GL_BLEND_EQUATION_RGB*/get GL_BLEND_EQUATION_RGB() {
      return 32777;
    },
    /*lib.GL_BLEND_SRC_ALPHA*/get GL_BLEND_SRC_ALPHA() {
      return 32971;
    },
    /*lib.GL_BLEND_SRC_RGB*/get GL_BLEND_SRC_RGB() {
      return 32969;
    },
    /*lib.GL_BLUE_BITS*/get GL_BLUE_BITS() {
      return 3412;
    },
    /*lib.GL_BOOL*/get GL_BOOL() {
      return 35670;
    },
    /*lib.GL_BOOL_VEC2*/get GL_BOOL_VEC2() {
      return 35671;
    },
    /*lib.GL_BOOL_VEC3*/get GL_BOOL_VEC3() {
      return 35672;
    },
    /*lib.GL_BOOL_VEC4*/get GL_BOOL_VEC4() {
      return 35673;
    },
    /*lib.GL_BROWSER_DEFAULT_WEBGL*/get GL_BROWSER_DEFAULT_WEBGL() {
      return 37444;
    },
    /*lib.GL_BUFFER_SIZE*/get GL_BUFFER_SIZE() {
      return 34660;
    },
    /*lib.GL_BUFFER_USAGE*/get GL_BUFFER_USAGE() {
      return 34661;
    },
    /*lib.GL_BYTE*/get GL_BYTE() {
      return 5120;
    },
    /*lib.GL_CCW*/get GL_CCW() {
      return 2305;
    },
    /*lib.GL_CLAMP_TO_EDGE*/get GL_CLAMP_TO_EDGE() {
      return 33071;
    },
    /*lib.GL_COLOR*/get GL_COLOR() {
      return 6144;
    },
    /*lib.GL_COLOR_ATTACHMENT0*/get GL_COLOR_ATTACHMENT0() {
      return 36064;
    },
    /*lib.GL_COLOR_ATTACHMENT1*/get GL_COLOR_ATTACHMENT1() {
      return 36065;
    },
    /*lib.GL_COLOR_ATTACHMENT10*/get GL_COLOR_ATTACHMENT10() {
      return 36074;
    },
    /*lib.GL_COLOR_ATTACHMENT11*/get GL_COLOR_ATTACHMENT11() {
      return 36075;
    },
    /*lib.GL_COLOR_ATTACHMENT12*/get GL_COLOR_ATTACHMENT12() {
      return 36076;
    },
    /*lib.GL_COLOR_ATTACHMENT13*/get GL_COLOR_ATTACHMENT13() {
      return 36077;
    },
    /*lib.GL_COLOR_ATTACHMENT14*/get GL_COLOR_ATTACHMENT14() {
      return 36078;
    },
    /*lib.GL_COLOR_ATTACHMENT15*/get GL_COLOR_ATTACHMENT15() {
      return 36079;
    },
    /*lib.GL_COLOR_ATTACHMENT2*/get GL_COLOR_ATTACHMENT2() {
      return 36066;
    },
    /*lib.GL_COLOR_ATTACHMENT3*/get GL_COLOR_ATTACHMENT3() {
      return 36067;
    },
    /*lib.GL_COLOR_ATTACHMENT4*/get GL_COLOR_ATTACHMENT4() {
      return 36068;
    },
    /*lib.GL_COLOR_ATTACHMENT5*/get GL_COLOR_ATTACHMENT5() {
      return 36069;
    },
    /*lib.GL_COLOR_ATTACHMENT6*/get GL_COLOR_ATTACHMENT6() {
      return 36070;
    },
    /*lib.GL_COLOR_ATTACHMENT7*/get GL_COLOR_ATTACHMENT7() {
      return 36071;
    },
    /*lib.GL_COLOR_ATTACHMENT8*/get GL_COLOR_ATTACHMENT8() {
      return 36072;
    },
    /*lib.GL_COLOR_ATTACHMENT9*/get GL_COLOR_ATTACHMENT9() {
      return 36073;
    },
    /*lib.GL_COLOR_BUFFER_BIT*/get GL_COLOR_BUFFER_BIT() {
      return 16384;
    },
    /*lib.GL_COLOR_CLEAR_VALUE*/get GL_COLOR_CLEAR_VALUE() {
      return 3106;
    },
    /*lib.GL_COLOR_WRITEMASK*/get GL_COLOR_WRITEMASK() {
      return 3107;
    },
    /*lib.GL_COMPARE_REF_TO_TEXTURE*/get GL_COMPARE_REF_TO_TEXTURE() {
      return 34894;
    },
    /*lib.GL_COMPILE_STATUS*/get GL_COMPILE_STATUS() {
      return 35713;
    },
    /*lib.GL_CONDITION_SATISFIED*/get GL_CONDITION_SATISFIED() {
      return 37148;
    },
    /*lib.GL_CONSTANT_ALPHA*/get GL_CONSTANT_ALPHA() {
      return 32771;
    },
    /*lib.GL_CONSTANT_COLOR*/get GL_CONSTANT_COLOR() {
      return 32769;
    },
    /*lib.GL_CONTEXT_LOST_WEBGL*/get GL_CONTEXT_LOST_WEBGL() {
      return 37442;
    },
    /*lib.GL_COPY_READ_BUFFER*/get GL_COPY_READ_BUFFER() {
      return 36662;
    },
    /*lib.GL_COPY_READ_BUFFER_BINDING*/get GL_COPY_READ_BUFFER_BINDING() {
      return 36662;
    },
    /*lib.GL_COPY_WRITE_BUFFER*/get GL_COPY_WRITE_BUFFER() {
      return 36663;
    },
    /*lib.GL_COPY_WRITE_BUFFER_BINDING*/get GL_COPY_WRITE_BUFFER_BINDING() {
      return 36663;
    },
    /*lib.GL_CULL_FACE*/get GL_CULL_FACE() {
      return 2884;
    },
    /*lib.GL_CULL_FACE_MODE*/get GL_CULL_FACE_MODE() {
      return 2885;
    },
    /*lib.GL_CURRENT_PROGRAM*/get GL_CURRENT_PROGRAM() {
      return 35725;
    },
    /*lib.GL_CURRENT_QUERY*/get GL_CURRENT_QUERY() {
      return 34917;
    },
    /*lib.GL_CURRENT_VERTEX_ATTRIB*/get GL_CURRENT_VERTEX_ATTRIB() {
      return 34342;
    },
    /*lib.GL_CW*/get GL_CW() {
      return 2304;
    },
    /*lib.GL_DECR*/get GL_DECR() {
      return 7683;
    },
    /*lib.GL_DECR_WRAP*/get GL_DECR_WRAP() {
      return 34056;
    },
    /*lib.GL_DELETE_STATUS*/get GL_DELETE_STATUS() {
      return 35712;
    },
    /*lib.GL_DEPTH*/get GL_DEPTH() {
      return 6145;
    },
    /*lib.GL_DEPTH24_STENCIL8*/get GL_DEPTH24_STENCIL8() {
      return 35056;
    },
    /*lib.GL_DEPTH32F_STENCIL8*/get GL_DEPTH32F_STENCIL8() {
      return 36013;
    },
    /*lib.GL_DEPTH_ATTACHMENT*/get GL_DEPTH_ATTACHMENT() {
      return 36096;
    },
    /*lib.GL_DEPTH_BITS*/get GL_DEPTH_BITS() {
      return 3414;
    },
    /*lib.GL_DEPTH_BUFFER_BIT*/get GL_DEPTH_BUFFER_BIT() {
      return 256;
    },
    /*lib.GL_DEPTH_CLEAR_VALUE*/get GL_DEPTH_CLEAR_VALUE() {
      return 2931;
    },
    /*lib.GL_DEPTH_COMPONENT*/get GL_DEPTH_COMPONENT() {
      return 6402;
    },
    /*lib.GL_DEPTH_COMPONENT16*/get GL_DEPTH_COMPONENT16() {
      return 33189;
    },
    /*lib.GL_DEPTH_COMPONENT24*/get GL_DEPTH_COMPONENT24() {
      return 33190;
    },
    /*lib.GL_DEPTH_COMPONENT32F*/get GL_DEPTH_COMPONENT32F() {
      return 36012;
    },
    /*lib.GL_DEPTH_FUNC*/get GL_DEPTH_FUNC() {
      return 2932;
    },
    /*lib.GL_DEPTH_RANGE*/get GL_DEPTH_RANGE() {
      return 2928;
    },
    /*lib.GL_DEPTH_STENCIL*/get GL_DEPTH_STENCIL() {
      return 34041;
    },
    /*lib.GL_DEPTH_STENCIL_ATTACHMENT*/get GL_DEPTH_STENCIL_ATTACHMENT() {
      return 33306;
    },
    /*lib.GL_DEPTH_TEST*/get GL_DEPTH_TEST() {
      return 2929;
    },
    /*lib.GL_DEPTH_WRITEMASK*/get GL_DEPTH_WRITEMASK() {
      return 2930;
    },
    /*lib.GL_DITHER*/get GL_DITHER() {
      return 3024;
    },
    /*lib.GL_DRAW_BUFFER0*/get GL_DRAW_BUFFER0() {
      return 34853;
    },
    /*lib.GL_DRAW_BUFFER1*/get GL_DRAW_BUFFER1() {
      return 34854;
    },
    /*lib.GL_DRAW_BUFFER10*/get GL_DRAW_BUFFER10() {
      return 34863;
    },
    /*lib.GL_DRAW_BUFFER11*/get GL_DRAW_BUFFER11() {
      return 34864;
    },
    /*lib.GL_DRAW_BUFFER12*/get GL_DRAW_BUFFER12() {
      return 34865;
    },
    /*lib.GL_DRAW_BUFFER13*/get GL_DRAW_BUFFER13() {
      return 34866;
    },
    /*lib.GL_DRAW_BUFFER14*/get GL_DRAW_BUFFER14() {
      return 34867;
    },
    /*lib.GL_DRAW_BUFFER15*/get GL_DRAW_BUFFER15() {
      return 34868;
    },
    /*lib.GL_DRAW_BUFFER2*/get GL_DRAW_BUFFER2() {
      return 34855;
    },
    /*lib.GL_DRAW_BUFFER3*/get GL_DRAW_BUFFER3() {
      return 34856;
    },
    /*lib.GL_DRAW_BUFFER4*/get GL_DRAW_BUFFER4() {
      return 34857;
    },
    /*lib.GL_DRAW_BUFFER5*/get GL_DRAW_BUFFER5() {
      return 34858;
    },
    /*lib.GL_DRAW_BUFFER6*/get GL_DRAW_BUFFER6() {
      return 34859;
    },
    /*lib.GL_DRAW_BUFFER7*/get GL_DRAW_BUFFER7() {
      return 34860;
    },
    /*lib.GL_DRAW_BUFFER8*/get GL_DRAW_BUFFER8() {
      return 34861;
    },
    /*lib.GL_DRAW_BUFFER9*/get GL_DRAW_BUFFER9() {
      return 34862;
    },
    /*lib.GL_DRAW_FRAMEBUFFER*/get GL_DRAW_FRAMEBUFFER() {
      return 36009;
    },
    /*lib.GL_DRAW_FRAMEBUFFER_BINDING*/get GL_DRAW_FRAMEBUFFER_BINDING() {
      return 36006;
    },
    /*lib.GL_DST_ALPHA*/get GL_DST_ALPHA() {
      return 772;
    },
    /*lib.GL_DST_COLOR*/get GL_DST_COLOR() {
      return 774;
    },
    /*lib.GL_DYNAMIC_COPY*/get GL_DYNAMIC_COPY() {
      return 35050;
    },
    /*lib.GL_DYNAMIC_DRAW*/get GL_DYNAMIC_DRAW() {
      return 35048;
    },
    /*lib.GL_DYNAMIC_READ*/get GL_DYNAMIC_READ() {
      return 35049;
    },
    /*lib.GL_ELEMENT_ARRAY_BUFFER*/get GL_ELEMENT_ARRAY_BUFFER() {
      return 34963;
    },
    /*lib.GL_ELEMENT_ARRAY_BUFFER_BINDING*/get GL_ELEMENT_ARRAY_BUFFER_BINDING() {
      return 34965;
    },
    /*lib.GL_EQUAL*/get GL_EQUAL() {
      return 514;
    },
    /*lib.GL_FASTEST*/get GL_FASTEST() {
      return 4353;
    },
    /*lib.GL_FLOAT*/get GL_FLOAT() {
      return 5126;
    },
    /*lib.GL_FLOAT_32_UNSIGNED_INT_24_8_REV*/get GL_FLOAT_32_UNSIGNED_INT_24_8_REV() {
      return 36269;
    },
    /*lib.GL_FLOAT_MAT2*/get GL_FLOAT_MAT2() {
      return 35674;
    },
    /*lib.GL_FLOAT_MAT2x3*/get GL_FLOAT_MAT2x3() {
      return 35685;
    },
    /*lib.GL_FLOAT_MAT2x4*/get GL_FLOAT_MAT2x4() {
      return 35686;
    },
    /*lib.GL_FLOAT_MAT3*/get GL_FLOAT_MAT3() {
      return 35675;
    },
    /*lib.GL_FLOAT_MAT3x2*/get GL_FLOAT_MAT3x2() {
      return 35687;
    },
    /*lib.GL_FLOAT_MAT3x4*/get GL_FLOAT_MAT3x4() {
      return 35688;
    },
    /*lib.GL_FLOAT_MAT4*/get GL_FLOAT_MAT4() {
      return 35676;
    },
    /*lib.GL_FLOAT_MAT4x2*/get GL_FLOAT_MAT4x2() {
      return 35689;
    },
    /*lib.GL_FLOAT_MAT4x3*/get GL_FLOAT_MAT4x3() {
      return 35690;
    },
    /*lib.GL_FLOAT_VEC2*/get GL_FLOAT_VEC2() {
      return 35664;
    },
    /*lib.GL_FLOAT_VEC3*/get GL_FLOAT_VEC3() {
      return 35665;
    },
    /*lib.GL_FLOAT_VEC4*/get GL_FLOAT_VEC4() {
      return 35666;
    },
    /*lib.GL_FRAGMENT_SHADER*/get GL_FRAGMENT_SHADER() {
      return 35632;
    },
    /*lib.GL_FRAGMENT_SHADER_DERIVATIVE_HINT*/get GL_FRAGMENT_SHADER_DERIVATIVE_HINT() {
      return 35723;
    },
    /*lib.GL_FRAMEBUFFER*/get GL_FRAMEBUFFER() {
      return 36160;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE*/get GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE() {
      return 33301;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE*/get GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE() {
      return 33300;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING*/get GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING() {
      return 33296;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE*/get GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE() {
      return 33297;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE*/get GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE() {
      return 33302;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE*/get GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE() {
      return 33299;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME*/get GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME() {
      return 36049;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE*/get GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE() {
      return 36048;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE*/get GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE() {
      return 33298;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE*/get GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE() {
      return 33303;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE*/get GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE() {
      return 36051;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER*/get GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER() {
      return 36052;
    },
    /*lib.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL*/get GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL() {
      return 36050;
    },
    /*lib.GL_FRAMEBUFFER_BINDING*/get GL_FRAMEBUFFER_BINDING() {
      return 36006;
    },
    /*lib.GL_FRAMEBUFFER_COMPLETE*/get GL_FRAMEBUFFER_COMPLETE() {
      return 36053;
    },
    /*lib.GL_FRAMEBUFFER_DEFAULT*/get GL_FRAMEBUFFER_DEFAULT() {
      return 33304;
    },
    /*lib.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT*/get GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT() {
      return 36054;
    },
    /*lib.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS*/get GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS() {
      return 36057;
    },
    /*lib.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT*/get GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT() {
      return 36055;
    },
    /*lib.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE*/get GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE() {
      return 36182;
    },
    /*lib.GL_FRAMEBUFFER_UNSUPPORTED*/get GL_FRAMEBUFFER_UNSUPPORTED() {
      return 36061;
    },
    /*lib.GL_FRONT*/get GL_FRONT() {
      return 1028;
    },
    /*lib.GL_FRONT_AND_BACK*/get GL_FRONT_AND_BACK() {
      return 1032;
    },
    /*lib.GL_FRONT_FACE*/get GL_FRONT_FACE() {
      return 2886;
    },
    /*lib.GL_FUNC_ADD*/get GL_FUNC_ADD() {
      return 32774;
    },
    /*lib.GL_FUNC_REVERSE_SUBTRACT*/get GL_FUNC_REVERSE_SUBTRACT() {
      return 32779;
    },
    /*lib.GL_FUNC_SUBTRACT*/get GL_FUNC_SUBTRACT() {
      return 32778;
    },
    /*lib.GL_GEQUAL*/get GL_GEQUAL() {
      return 518;
    },
    /*lib.GL_GREATER*/get GL_GREATER() {
      return 516;
    },
    /*lib.GL_GREEN_BITS*/get GL_GREEN_BITS() {
      return 3411;
    },
    /*lib.GL_HALF_FLOAT*/get GL_HALF_FLOAT() {
      return 5131;
    },
    /*lib.GL_HIGH_FLOAT*/get GL_HIGH_FLOAT() {
      return 36338;
    },
    /*lib.GL_HIGH_INT*/get GL_HIGH_INT() {
      return 36341;
    },
    /*lib.GL_IMPLEMENTATION_COLOR_READ_FORMAT*/get GL_IMPLEMENTATION_COLOR_READ_FORMAT() {
      return 35739;
    },
    /*lib.GL_IMPLEMENTATION_COLOR_READ_TYPE*/get GL_IMPLEMENTATION_COLOR_READ_TYPE() {
      return 35738;
    },
    /*lib.GL_INCR*/get GL_INCR() {
      return 7682;
    },
    /*lib.GL_INCR_WRAP*/get GL_INCR_WRAP() {
      return 34055;
    },
    /*lib.GL_INT*/get GL_INT() {
      return 5124;
    },
    /*lib.GL_INTERLEAVED_ATTRIBS*/get GL_INTERLEAVED_ATTRIBS() {
      return 35980;
    },
    /*lib.GL_INT_2_10_10_10_REV*/get GL_INT_2_10_10_10_REV() {
      return 36255;
    },
    /*lib.GL_INT_SAMPLER_2D*/get GL_INT_SAMPLER_2D() {
      return 36298;
    },
    /*lib.GL_INT_SAMPLER_2D_ARRAY*/get GL_INT_SAMPLER_2D_ARRAY() {
      return 36303;
    },
    /*lib.GL_INT_SAMPLER_3D*/get GL_INT_SAMPLER_3D() {
      return 36299;
    },
    /*lib.GL_INT_SAMPLER_CUBE*/get GL_INT_SAMPLER_CUBE() {
      return 36300;
    },
    /*lib.GL_INT_VEC2*/get GL_INT_VEC2() {
      return 35667;
    },
    /*lib.GL_INT_VEC3*/get GL_INT_VEC3() {
      return 35668;
    },
    /*lib.GL_INT_VEC4*/get GL_INT_VEC4() {
      return 35669;
    },
    /*lib.GL_INVALID_ENUM*/get GL_INVALID_ENUM() {
      return 1280;
    },
    /*lib.GL_INVALID_FRAMEBUFFER_OPERATION*/get GL_INVALID_FRAMEBUFFER_OPERATION() {
      return 1286;
    },
    /*lib.GL_INVALID_INDEX*/get GL_INVALID_INDEX() {
      return 4294967295.0;
    },
    /*lib.GL_INVALID_OPERATION*/get GL_INVALID_OPERATION() {
      return 1282;
    },
    /*lib.GL_INVALID_VALUE*/get GL_INVALID_VALUE() {
      return 1281;
    },
    /*lib.GL_INVERT*/get GL_INVERT() {
      return 5386;
    },
    /*lib.GL_KEEP*/get GL_KEEP() {
      return 7680;
    },
    /*lib.GL_LEQUAL*/get GL_LEQUAL() {
      return 515;
    },
    /*lib.GL_LESS*/get GL_LESS() {
      return 513;
    },
    /*lib.GL_LINEAR*/get GL_LINEAR() {
      return 9729;
    },
    /*lib.GL_LINEAR_MIPMAP_LINEAR*/get GL_LINEAR_MIPMAP_LINEAR() {
      return 9987;
    },
    /*lib.GL_LINEAR_MIPMAP_NEAREST*/get GL_LINEAR_MIPMAP_NEAREST() {
      return 9985;
    },
    /*lib.GL_LINES*/get GL_LINES() {
      return 1;
    },
    /*lib.GL_LINE_LOOP*/get GL_LINE_LOOP() {
      return 2;
    },
    /*lib.GL_LINE_STRIP*/get GL_LINE_STRIP() {
      return 3;
    },
    /*lib.GL_LINE_WIDTH*/get GL_LINE_WIDTH() {
      return 2849;
    },
    /*lib.GL_LINK_STATUS*/get GL_LINK_STATUS() {
      return 35714;
    },
    /*lib.GL_LOW_FLOAT*/get GL_LOW_FLOAT() {
      return 36336;
    },
    /*lib.GL_LOW_INT*/get GL_LOW_INT() {
      return 36339;
    },
    /*lib.GL_LUMINANCE*/get GL_LUMINANCE() {
      return 6409;
    },
    /*lib.GL_LUMINANCE_ALPHA*/get GL_LUMINANCE_ALPHA() {
      return 6410;
    },
    /*lib.GL_MAX*/get GL_MAX() {
      return 32776;
    },
    /*lib.GL_MAX_3D_TEXTURE_SIZE*/get GL_MAX_3D_TEXTURE_SIZE() {
      return 32883;
    },
    /*lib.GL_MAX_ARRAY_TEXTURE_LAYERS*/get GL_MAX_ARRAY_TEXTURE_LAYERS() {
      return 35071;
    },
    /*lib.GL_MAX_COLOR_ATTACHMENTS*/get GL_MAX_COLOR_ATTACHMENTS() {
      return 36063;
    },
    /*lib.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS*/get GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS() {
      return 35379;
    },
    /*lib.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS*/get GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS() {
      return 35661;
    },
    /*lib.GL_MAX_COMBINED_UNIFORM_BLOCKS*/get GL_MAX_COMBINED_UNIFORM_BLOCKS() {
      return 35374;
    },
    /*lib.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS*/get GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS() {
      return 35377;
    },
    /*lib.GL_MAX_CUBE_MAP_TEXTURE_SIZE*/get GL_MAX_CUBE_MAP_TEXTURE_SIZE() {
      return 34076;
    },
    /*lib.GL_MAX_DRAW_BUFFERS*/get GL_MAX_DRAW_BUFFERS() {
      return 34852;
    },
    /*lib.GL_MAX_ELEMENTS_INDICES*/get GL_MAX_ELEMENTS_INDICES() {
      return 33001;
    },
    /*lib.GL_MAX_ELEMENTS_VERTICES*/get GL_MAX_ELEMENTS_VERTICES() {
      return 33000;
    },
    /*lib.GL_MAX_ELEMENT_INDEX*/get GL_MAX_ELEMENT_INDEX() {
      return 36203;
    },
    /*lib.GL_MAX_FRAGMENT_INPUT_COMPONENTS*/get GL_MAX_FRAGMENT_INPUT_COMPONENTS() {
      return 37157;
    },
    /*lib.GL_MAX_FRAGMENT_UNIFORM_BLOCKS*/get GL_MAX_FRAGMENT_UNIFORM_BLOCKS() {
      return 35373;
    },
    /*lib.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS*/get GL_MAX_FRAGMENT_UNIFORM_COMPONENTS() {
      return 35657;
    },
    /*lib.GL_MAX_FRAGMENT_UNIFORM_VECTORS*/get GL_MAX_FRAGMENT_UNIFORM_VECTORS() {
      return 36349;
    },
    /*lib.GL_MAX_PROGRAM_TEXEL_OFFSET*/get GL_MAX_PROGRAM_TEXEL_OFFSET() {
      return 35077;
    },
    /*lib.GL_MAX_RENDERBUFFER_SIZE*/get GL_MAX_RENDERBUFFER_SIZE() {
      return 34024;
    },
    /*lib.GL_MAX_SAMPLES*/get GL_MAX_SAMPLES() {
      return 36183;
    },
    /*lib.GL_MAX_SERVER_WAIT_TIMEOUT*/get GL_MAX_SERVER_WAIT_TIMEOUT() {
      return 37137;
    },
    /*lib.GL_MAX_TEXTURE_IMAGE_UNITS*/get GL_MAX_TEXTURE_IMAGE_UNITS() {
      return 34930;
    },
    /*lib.GL_MAX_TEXTURE_LOD_BIAS*/get GL_MAX_TEXTURE_LOD_BIAS() {
      return 34045;
    },
    /*lib.GL_MAX_TEXTURE_SIZE*/get GL_MAX_TEXTURE_SIZE() {
      return 3379;
    },
    /*lib.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS*/get GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS() {
      return 35978;
    },
    /*lib.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS*/get GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS() {
      return 35979;
    },
    /*lib.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS*/get GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS() {
      return 35968;
    },
    /*lib.GL_MAX_UNIFORM_BLOCK_SIZE*/get GL_MAX_UNIFORM_BLOCK_SIZE() {
      return 35376;
    },
    /*lib.GL_MAX_UNIFORM_BUFFER_BINDINGS*/get GL_MAX_UNIFORM_BUFFER_BINDINGS() {
      return 35375;
    },
    /*lib.GL_MAX_VARYING_COMPONENTS*/get GL_MAX_VARYING_COMPONENTS() {
      return 35659;
    },
    /*lib.GL_MAX_VARYING_VECTORS*/get GL_MAX_VARYING_VECTORS() {
      return 36348;
    },
    /*lib.GL_MAX_VERTEX_ATTRIBS*/get GL_MAX_VERTEX_ATTRIBS() {
      return 34921;
    },
    /*lib.GL_MAX_VERTEX_OUTPUT_COMPONENTS*/get GL_MAX_VERTEX_OUTPUT_COMPONENTS() {
      return 37154;
    },
    /*lib.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS*/get GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS() {
      return 35660;
    },
    /*lib.GL_MAX_VERTEX_UNIFORM_BLOCKS*/get GL_MAX_VERTEX_UNIFORM_BLOCKS() {
      return 35371;
    },
    /*lib.GL_MAX_VERTEX_UNIFORM_COMPONENTS*/get GL_MAX_VERTEX_UNIFORM_COMPONENTS() {
      return 35658;
    },
    /*lib.GL_MAX_VERTEX_UNIFORM_VECTORS*/get GL_MAX_VERTEX_UNIFORM_VECTORS() {
      return 36347;
    },
    /*lib.GL_MAX_VIEWPORT_DIMS*/get GL_MAX_VIEWPORT_DIMS() {
      return 3386;
    },
    /*lib.GL_MEDIUM_FLOAT*/get GL_MEDIUM_FLOAT() {
      return 36337;
    },
    /*lib.GL_MEDIUM_INT*/get GL_MEDIUM_INT() {
      return 36340;
    },
    /*lib.GL_MIN*/get GL_MIN() {
      return 32775;
    },
    /*lib.GL_MIN_PROGRAM_TEXEL_OFFSET*/get GL_MIN_PROGRAM_TEXEL_OFFSET() {
      return 35076;
    },
    /*lib.GL_MIRRORED_REPEAT*/get GL_MIRRORED_REPEAT() {
      return 33648;
    },
    /*lib.GL_NEAREST*/get GL_NEAREST() {
      return 9728;
    },
    /*lib.GL_NEAREST_MIPMAP_LINEAR*/get GL_NEAREST_MIPMAP_LINEAR() {
      return 9986;
    },
    /*lib.GL_NEAREST_MIPMAP_NEAREST*/get GL_NEAREST_MIPMAP_NEAREST() {
      return 9984;
    },
    /*lib.GL_NEVER*/get GL_NEVER() {
      return 512;
    },
    /*lib.GL_NICEST*/get GL_NICEST() {
      return 4354;
    },
    /*lib.GL_NONE*/get GL_NONE() {
      return 0;
    },
    /*lib.GL_NOTEQUAL*/get GL_NOTEQUAL() {
      return 517;
    },
    /*lib.GL_NO_ERROR*/get GL_NO_ERROR() {
      return 0;
    },
    /*lib.GL_OBJECT_TYPE*/get GL_OBJECT_TYPE() {
      return 37138;
    },
    /*lib.GL_ONE*/get GL_ONE() {
      return 1;
    },
    /*lib.GL_ONE_MINUS_CONSTANT_ALPHA*/get GL_ONE_MINUS_CONSTANT_ALPHA() {
      return 32772;
    },
    /*lib.GL_ONE_MINUS_CONSTANT_COLOR*/get GL_ONE_MINUS_CONSTANT_COLOR() {
      return 32770;
    },
    /*lib.GL_ONE_MINUS_DST_ALPHA*/get GL_ONE_MINUS_DST_ALPHA() {
      return 773;
    },
    /*lib.GL_ONE_MINUS_DST_COLOR*/get GL_ONE_MINUS_DST_COLOR() {
      return 775;
    },
    /*lib.GL_ONE_MINUS_SRC_ALPHA*/get GL_ONE_MINUS_SRC_ALPHA() {
      return 771;
    },
    /*lib.GL_ONE_MINUS_SRC_COLOR*/get GL_ONE_MINUS_SRC_COLOR() {
      return 769;
    },
    /*lib.GL_OUT_OF_MEMORY*/get GL_OUT_OF_MEMORY() {
      return 1285;
    },
    /*lib.GL_PACK_ALIGNMENT*/get GL_PACK_ALIGNMENT() {
      return 3333;
    },
    /*lib.GL_PACK_ROW_LENGTH*/get GL_PACK_ROW_LENGTH() {
      return 3330;
    },
    /*lib.GL_PACK_SKIP_PIXELS*/get GL_PACK_SKIP_PIXELS() {
      return 3332;
    },
    /*lib.GL_PACK_SKIP_ROWS*/get GL_PACK_SKIP_ROWS() {
      return 3331;
    },
    /*lib.GL_PIXEL_PACK_BUFFER*/get GL_PIXEL_PACK_BUFFER() {
      return 35051;
    },
    /*lib.GL_PIXEL_PACK_BUFFER_BINDING*/get GL_PIXEL_PACK_BUFFER_BINDING() {
      return 35053;
    },
    /*lib.GL_PIXEL_UNPACK_BUFFER*/get GL_PIXEL_UNPACK_BUFFER() {
      return 35052;
    },
    /*lib.GL_PIXEL_UNPACK_BUFFER_BINDING*/get GL_PIXEL_UNPACK_BUFFER_BINDING() {
      return 35055;
    },
    /*lib.GL_POINTS*/get GL_POINTS() {
      return 0;
    },
    /*lib.GL_POLYGON_OFFSET_FACTOR*/get GL_POLYGON_OFFSET_FACTOR() {
      return 32824;
    },
    /*lib.GL_POLYGON_OFFSET_FILL*/get GL_POLYGON_OFFSET_FILL() {
      return 32823;
    },
    /*lib.GL_POLYGON_OFFSET_UNITS*/get GL_POLYGON_OFFSET_UNITS() {
      return 10752;
    },
    /*lib.GL_QUERY_RESULT*/get GL_QUERY_RESULT() {
      return 34918;
    },
    /*lib.GL_QUERY_RESULT_AVAILABLE*/get GL_QUERY_RESULT_AVAILABLE() {
      return 34919;
    },
    /*lib.GL_R11F_G11F_B10F*/get GL_R11F_G11F_B10F() {
      return 35898;
    },
    /*lib.GL_R16F*/get GL_R16F() {
      return 33325;
    },
    /*lib.GL_R16I*/get GL_R16I() {
      return 33331;
    },
    /*lib.GL_R16UI*/get GL_R16UI() {
      return 33332;
    },
    /*lib.GL_R32F*/get GL_R32F() {
      return 33326;
    },
    /*lib.GL_R32I*/get GL_R32I() {
      return 33333;
    },
    /*lib.GL_R32UI*/get GL_R32UI() {
      return 33334;
    },
    /*lib.GL_R8*/get GL_R8() {
      return 33321;
    },
    /*lib.GL_R8I*/get GL_R8I() {
      return 33329;
    },
    /*lib.GL_R8UI*/get GL_R8UI() {
      return 33330;
    },
    /*lib.GL_R8_SNORM*/get GL_R8_SNORM() {
      return 36756;
    },
    /*lib.GL_RASTERIZER_DISCARD*/get GL_RASTERIZER_DISCARD() {
      return 35977;
    },
    /*lib.GL_READ_BUFFER*/get GL_READ_BUFFER() {
      return 3074;
    },
    /*lib.GL_READ_FRAMEBUFFER*/get GL_READ_FRAMEBUFFER() {
      return 36008;
    },
    /*lib.GL_READ_FRAMEBUFFER_BINDING*/get GL_READ_FRAMEBUFFER_BINDING() {
      return 36010;
    },
    /*lib.GL_RED*/get GL_RED() {
      return 6403;
    },
    /*lib.GL_RED_BITS*/get GL_RED_BITS() {
      return 3410;
    },
    /*lib.GL_RED_INTEGER*/get GL_RED_INTEGER() {
      return 36244;
    },
    /*lib.GL_RENDERBUFFER*/get GL_RENDERBUFFER() {
      return 36161;
    },
    /*lib.GL_RENDERBUFFER_ALPHA_SIZE*/get GL_RENDERBUFFER_ALPHA_SIZE() {
      return 36179;
    },
    /*lib.GL_RENDERBUFFER_BINDING*/get GL_RENDERBUFFER_BINDING() {
      return 36007;
    },
    /*lib.GL_RENDERBUFFER_BLUE_SIZE*/get GL_RENDERBUFFER_BLUE_SIZE() {
      return 36178;
    },
    /*lib.GL_RENDERBUFFER_DEPTH_SIZE*/get GL_RENDERBUFFER_DEPTH_SIZE() {
      return 36180;
    },
    /*lib.GL_RENDERBUFFER_GREEN_SIZE*/get GL_RENDERBUFFER_GREEN_SIZE() {
      return 36177;
    },
    /*lib.GL_RENDERBUFFER_HEIGHT*/get GL_RENDERBUFFER_HEIGHT() {
      return 36163;
    },
    /*lib.GL_RENDERBUFFER_INTERNAL_FORMAT*/get GL_RENDERBUFFER_INTERNAL_FORMAT() {
      return 36164;
    },
    /*lib.GL_RENDERBUFFER_RED_SIZE*/get GL_RENDERBUFFER_RED_SIZE() {
      return 36176;
    },
    /*lib.GL_RENDERBUFFER_SAMPLES*/get GL_RENDERBUFFER_SAMPLES() {
      return 36011;
    },
    /*lib.GL_RENDERBUFFER_STENCIL_SIZE*/get GL_RENDERBUFFER_STENCIL_SIZE() {
      return 36181;
    },
    /*lib.GL_RENDERBUFFER_WIDTH*/get GL_RENDERBUFFER_WIDTH() {
      return 36162;
    },
    /*lib.GL_RENDERER*/get GL_RENDERER() {
      return 7937;
    },
    /*lib.GL_REPEAT*/get GL_REPEAT() {
      return 10497;
    },
    /*lib.GL_REPLACE*/get GL_REPLACE() {
      return 7681;
    },
    /*lib.GL_RG*/get GL_RG() {
      return 33319;
    },
    /*lib.GL_RG16F*/get GL_RG16F() {
      return 33327;
    },
    /*lib.GL_RG16I*/get GL_RG16I() {
      return 33337;
    },
    /*lib.GL_RG16UI*/get GL_RG16UI() {
      return 33338;
    },
    /*lib.GL_RG32F*/get GL_RG32F() {
      return 33328;
    },
    /*lib.GL_RG32I*/get GL_RG32I() {
      return 33339;
    },
    /*lib.GL_RG32UI*/get GL_RG32UI() {
      return 33340;
    },
    /*lib.GL_RG8*/get GL_RG8() {
      return 33323;
    },
    /*lib.GL_RG8I*/get GL_RG8I() {
      return 33335;
    },
    /*lib.GL_RG8UI*/get GL_RG8UI() {
      return 33336;
    },
    /*lib.GL_RG8_SNORM*/get GL_RG8_SNORM() {
      return 36757;
    },
    /*lib.GL_RGB*/get GL_RGB() {
      return 6407;
    },
    /*lib.GL_RGB10_A2*/get GL_RGB10_A2() {
      return 32857;
    },
    /*lib.GL_RGB10_A2UI*/get GL_RGB10_A2UI() {
      return 36975;
    },
    /*lib.GL_RGB16F*/get GL_RGB16F() {
      return 34843;
    },
    /*lib.GL_RGB16I*/get GL_RGB16I() {
      return 36233;
    },
    /*lib.GL_RGB16UI*/get GL_RGB16UI() {
      return 36215;
    },
    /*lib.GL_RGB32F*/get GL_RGB32F() {
      return 34837;
    },
    /*lib.GL_RGB32I*/get GL_RGB32I() {
      return 36227;
    },
    /*lib.GL_RGB32UI*/get GL_RGB32UI() {
      return 36209;
    },
    /*lib.GL_RGB565*/get GL_RGB565() {
      return 36194;
    },
    /*lib.GL_RGB5_A1*/get GL_RGB5_A1() {
      return 32855;
    },
    /*lib.GL_RGB8*/get GL_RGB8() {
      return 32849;
    },
    /*lib.GL_RGB8I*/get GL_RGB8I() {
      return 36239;
    },
    /*lib.GL_RGB8UI*/get GL_RGB8UI() {
      return 36221;
    },
    /*lib.GL_RGB8_SNORM*/get GL_RGB8_SNORM() {
      return 36758;
    },
    /*lib.GL_RGB9_E5*/get GL_RGB9_E5() {
      return 35901;
    },
    /*lib.GL_RGBA*/get GL_RGBA() {
      return 6408;
    },
    /*lib.GL_RGBA16F*/get GL_RGBA16F() {
      return 34842;
    },
    /*lib.GL_RGBA16I*/get GL_RGBA16I() {
      return 36232;
    },
    /*lib.GL_RGBA16UI*/get GL_RGBA16UI() {
      return 36214;
    },
    /*lib.GL_RGBA32F*/get GL_RGBA32F() {
      return 34836;
    },
    /*lib.GL_RGBA32I*/get GL_RGBA32I() {
      return 36226;
    },
    /*lib.GL_RGBA32UI*/get GL_RGBA32UI() {
      return 36208;
    },
    /*lib.GL_RGBA4*/get GL_RGBA4() {
      return 32854;
    },
    /*lib.GL_RGBA8*/get GL_RGBA8() {
      return 32856;
    },
    /*lib.GL_RGBA8I*/get GL_RGBA8I() {
      return 36238;
    },
    /*lib.GL_RGBA8UI*/get GL_RGBA8UI() {
      return 36220;
    },
    /*lib.GL_RGBA8_SNORM*/get GL_RGBA8_SNORM() {
      return 36759;
    },
    /*lib.GL_RGBA_INTEGER*/get GL_RGBA_INTEGER() {
      return 36249;
    },
    /*lib.GL_RGB_INTEGER*/get GL_RGB_INTEGER() {
      return 36248;
    },
    /*lib.GL_RG_INTEGER*/get GL_RG_INTEGER() {
      return 33320;
    },
    /*lib.GL_SAMPLER_2D*/get GL_SAMPLER_2D() {
      return 35678;
    },
    /*lib.GL_SAMPLER_2D_ARRAY*/get GL_SAMPLER_2D_ARRAY() {
      return 36289;
    },
    /*lib.GL_SAMPLER_2D_ARRAY_SHADOW*/get GL_SAMPLER_2D_ARRAY_SHADOW() {
      return 36292;
    },
    /*lib.GL_SAMPLER_2D_SHADOW*/get GL_SAMPLER_2D_SHADOW() {
      return 35682;
    },
    /*lib.GL_SAMPLER_3D*/get GL_SAMPLER_3D() {
      return 35679;
    },
    /*lib.GL_SAMPLER_BINDING*/get GL_SAMPLER_BINDING() {
      return 35097;
    },
    /*lib.GL_SAMPLER_CUBE*/get GL_SAMPLER_CUBE() {
      return 35680;
    },
    /*lib.GL_SAMPLER_CUBE_SHADOW*/get GL_SAMPLER_CUBE_SHADOW() {
      return 36293;
    },
    /*lib.GL_SAMPLES*/get GL_SAMPLES() {
      return 32937;
    },
    /*lib.GL_SAMPLE_ALPHA_TO_COVERAGE*/get GL_SAMPLE_ALPHA_TO_COVERAGE() {
      return 32926;
    },
    /*lib.GL_SAMPLE_BUFFERS*/get GL_SAMPLE_BUFFERS() {
      return 32936;
    },
    /*lib.GL_SAMPLE_COVERAGE*/get GL_SAMPLE_COVERAGE() {
      return 32928;
    },
    /*lib.GL_SAMPLE_COVERAGE_INVERT*/get GL_SAMPLE_COVERAGE_INVERT() {
      return 32939;
    },
    /*lib.GL_SAMPLE_COVERAGE_VALUE*/get GL_SAMPLE_COVERAGE_VALUE() {
      return 32938;
    },
    /*lib.GL_SCISSOR_BOX*/get GL_SCISSOR_BOX() {
      return 3088;
    },
    /*lib.GL_SCISSOR_TEST*/get GL_SCISSOR_TEST() {
      return 3089;
    },
    /*lib.GL_SEPARATE_ATTRIBS*/get GL_SEPARATE_ATTRIBS() {
      return 35981;
    },
    /*lib.GL_SHADER_TYPE*/get GL_SHADER_TYPE() {
      return 35663;
    },
    /*lib.GL_SHADING_LANGUAGE_VERSION*/get GL_SHADING_LANGUAGE_VERSION() {
      return 35724;
    },
    /*lib.GL_SHORT*/get GL_SHORT() {
      return 5122;
    },
    /*lib.GL_SIGNALED*/get GL_SIGNALED() {
      return 37145;
    },
    /*lib.GL_SIGNED_NORMALIZED*/get GL_SIGNED_NORMALIZED() {
      return 36764;
    },
    /*lib.GL_SRC_ALPHA*/get GL_SRC_ALPHA() {
      return 770;
    },
    /*lib.GL_SRC_ALPHA_SATURATE*/get GL_SRC_ALPHA_SATURATE() {
      return 776;
    },
    /*lib.GL_SRC_COLOR*/get GL_SRC_COLOR() {
      return 768;
    },
    /*lib.GL_SRGB*/get GL_SRGB() {
      return 35904;
    },
    /*lib.GL_SRGB8*/get GL_SRGB8() {
      return 35905;
    },
    /*lib.GL_SRGB8_ALPHA8*/get GL_SRGB8_ALPHA8() {
      return 35907;
    },
    /*lib.GL_STATIC_COPY*/get GL_STATIC_COPY() {
      return 35046;
    },
    /*lib.GL_STATIC_DRAW*/get GL_STATIC_DRAW() {
      return 35044;
    },
    /*lib.GL_STATIC_READ*/get GL_STATIC_READ() {
      return 35045;
    },
    /*lib.GL_STENCIL*/get GL_STENCIL() {
      return 6146;
    },
    /*lib.GL_STENCIL_ATTACHMENT*/get GL_STENCIL_ATTACHMENT() {
      return 36128;
    },
    /*lib.GL_STENCIL_BACK_FAIL*/get GL_STENCIL_BACK_FAIL() {
      return 34817;
    },
    /*lib.GL_STENCIL_BACK_FUNC*/get GL_STENCIL_BACK_FUNC() {
      return 34816;
    },
    /*lib.GL_STENCIL_BACK_PASS_DEPTH_FAIL*/get GL_STENCIL_BACK_PASS_DEPTH_FAIL() {
      return 34818;
    },
    /*lib.GL_STENCIL_BACK_PASS_DEPTH_PASS*/get GL_STENCIL_BACK_PASS_DEPTH_PASS() {
      return 34819;
    },
    /*lib.GL_STENCIL_BACK_REF*/get GL_STENCIL_BACK_REF() {
      return 36003;
    },
    /*lib.GL_STENCIL_BACK_VALUE_MASK*/get GL_STENCIL_BACK_VALUE_MASK() {
      return 36004;
    },
    /*lib.GL_STENCIL_BACK_WRITEMASK*/get GL_STENCIL_BACK_WRITEMASK() {
      return 36005;
    },
    /*lib.GL_STENCIL_BITS*/get GL_STENCIL_BITS() {
      return 3415;
    },
    /*lib.GL_STENCIL_BUFFER_BIT*/get GL_STENCIL_BUFFER_BIT() {
      return 1024;
    },
    /*lib.GL_STENCIL_CLEAR_VALUE*/get GL_STENCIL_CLEAR_VALUE() {
      return 2961;
    },
    /*lib.GL_STENCIL_FAIL*/get GL_STENCIL_FAIL() {
      return 2964;
    },
    /*lib.GL_STENCIL_FUNC*/get GL_STENCIL_FUNC() {
      return 2962;
    },
    /*lib.GL_STENCIL_INDEX*/get GL_STENCIL_INDEX() {
      return 6401;
    },
    /*lib.GL_STENCIL_INDEX8*/get GL_STENCIL_INDEX8() {
      return 36168;
    },
    /*lib.GL_STENCIL_PASS_DEPTH_FAIL*/get GL_STENCIL_PASS_DEPTH_FAIL() {
      return 2965;
    },
    /*lib.GL_STENCIL_PASS_DEPTH_PASS*/get GL_STENCIL_PASS_DEPTH_PASS() {
      return 2966;
    },
    /*lib.GL_STENCIL_REF*/get GL_STENCIL_REF() {
      return 2967;
    },
    /*lib.GL_STENCIL_TEST*/get GL_STENCIL_TEST() {
      return 2960;
    },
    /*lib.GL_STENCIL_VALUE_MASK*/get GL_STENCIL_VALUE_MASK() {
      return 2963;
    },
    /*lib.GL_STENCIL_WRITEMASK*/get GL_STENCIL_WRITEMASK() {
      return 2968;
    },
    /*lib.GL_STREAM_COPY*/get GL_STREAM_COPY() {
      return 35042;
    },
    /*lib.GL_STREAM_DRAW*/get GL_STREAM_DRAW() {
      return 35040;
    },
    /*lib.GL_STREAM_READ*/get GL_STREAM_READ() {
      return 35041;
    },
    /*lib.GL_SUBPIXEL_BITS*/get GL_SUBPIXEL_BITS() {
      return 3408;
    },
    /*lib.GL_SYNC_CONDITION*/get GL_SYNC_CONDITION() {
      return 37139;
    },
    /*lib.GL_SYNC_FENCE*/get GL_SYNC_FENCE() {
      return 37142;
    },
    /*lib.GL_SYNC_FLAGS*/get GL_SYNC_FLAGS() {
      return 37141;
    },
    /*lib.GL_SYNC_FLUSH_COMMANDS_BIT*/get GL_SYNC_FLUSH_COMMANDS_BIT() {
      return 1;
    },
    /*lib.GL_SYNC_GPU_COMMANDS_COMPLETE*/get GL_SYNC_GPU_COMMANDS_COMPLETE() {
      return 37143;
    },
    /*lib.GL_SYNC_STATUS*/get GL_SYNC_STATUS() {
      return 37140;
    },
    /*lib.GL_TEXTURE*/get GL_TEXTURE() {
      return 5890;
    },
    /*lib.GL_TEXTURE0*/get GL_TEXTURE0() {
      return 33984;
    },
    /*lib.GL_TEXTURE_2D*/get GL_TEXTURE_2D() {
      return 3553;
    },
    /*lib.GL_TEXTURE_2D_ARRAY*/get GL_TEXTURE_2D_ARRAY() {
      return 35866;
    },
    /*lib.GL_TEXTURE_3D*/get GL_TEXTURE_3D() {
      return 32879;
    },
    /*lib.GL_TEXTURE_BASE_LEVEL*/get GL_TEXTURE_BASE_LEVEL() {
      return 33084;
    },
    /*lib.GL_TEXTURE_BINDING_2D*/get GL_TEXTURE_BINDING_2D() {
      return 32873;
    },
    /*lib.GL_TEXTURE_BINDING_2D_ARRAY*/get GL_TEXTURE_BINDING_2D_ARRAY() {
      return 35869;
    },
    /*lib.GL_TEXTURE_BINDING_3D*/get GL_TEXTURE_BINDING_3D() {
      return 32874;
    },
    /*lib.GL_TEXTURE_BINDING_CUBE_MAP*/get GL_TEXTURE_BINDING_CUBE_MAP() {
      return 34068;
    },
    /*lib.GL_TEXTURE_COMPARE_FUNC*/get GL_TEXTURE_COMPARE_FUNC() {
      return 34893;
    },
    /*lib.GL_TEXTURE_COMPARE_MODE*/get GL_TEXTURE_COMPARE_MODE() {
      return 34892;
    },
    /*lib.GL_TEXTURE_CUBE_MAP*/get GL_TEXTURE_CUBE_MAP() {
      return 34067;
    },
    /*lib.GL_TEXTURE_CUBE_MAP_NEGATIVE_X*/get GL_TEXTURE_CUBE_MAP_NEGATIVE_X() {
      return 34070;
    },
    /*lib.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*/get GL_TEXTURE_CUBE_MAP_NEGATIVE_Y() {
      return 34072;
    },
    /*lib.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*/get GL_TEXTURE_CUBE_MAP_NEGATIVE_Z() {
      return 34074;
    },
    /*lib.GL_TEXTURE_CUBE_MAP_POSITIVE_X*/get GL_TEXTURE_CUBE_MAP_POSITIVE_X() {
      return 34069;
    },
    /*lib.GL_TEXTURE_CUBE_MAP_POSITIVE_Y*/get GL_TEXTURE_CUBE_MAP_POSITIVE_Y() {
      return 34071;
    },
    /*lib.GL_TEXTURE_CUBE_MAP_POSITIVE_Z*/get GL_TEXTURE_CUBE_MAP_POSITIVE_Z() {
      return 34073;
    },
    /*lib.GL_TEXTURE_IMMUTABLE_FORMAT*/get GL_TEXTURE_IMMUTABLE_FORMAT() {
      return 37167;
    },
    /*lib.GL_TEXTURE_IMMUTABLE_LEVELS*/get GL_TEXTURE_IMMUTABLE_LEVELS() {
      return 33503;
    },
    /*lib.GL_TEXTURE_MAG_FILTER*/get GL_TEXTURE_MAG_FILTER() {
      return 10240;
    },
    /*lib.GL_TEXTURE_MAX_ANISOTROPY_EXT*/get GL_TEXTURE_MAX_ANISOTROPY_EXT() {
      return 34046;
    },
    /*lib.GL_TEXTURE_MAX_LEVEL*/get GL_TEXTURE_MAX_LEVEL() {
      return 33085;
    },
    /*lib.GL_TEXTURE_MAX_LOD*/get GL_TEXTURE_MAX_LOD() {
      return 33083;
    },
    /*lib.GL_TEXTURE_MIN_FILTER*/get GL_TEXTURE_MIN_FILTER() {
      return 10241;
    },
    /*lib.GL_TEXTURE_MIN_LOD*/get GL_TEXTURE_MIN_LOD() {
      return 33082;
    },
    /*lib.GL_TEXTURE_WRAP_R*/get GL_TEXTURE_WRAP_R() {
      return 32882;
    },
    /*lib.GL_TEXTURE_WRAP_S*/get GL_TEXTURE_WRAP_S() {
      return 10242;
    },
    /*lib.GL_TEXTURE_WRAP_T*/get GL_TEXTURE_WRAP_T() {
      return 10243;
    },
    /*lib.GL_TIMEOUT_EXPIRED*/get GL_TIMEOUT_EXPIRED() {
      return 37147;
    },
    /*lib.GL_TRANSFORM_FEEDBACK*/get GL_TRANSFORM_FEEDBACK() {
      return 36386;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_ACTIVE*/get GL_TRANSFORM_FEEDBACK_ACTIVE() {
      return 36388;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_BINDING*/get GL_TRANSFORM_FEEDBACK_BINDING() {
      return 36389;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_BUFFER*/get GL_TRANSFORM_FEEDBACK_BUFFER() {
      return 35982;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING*/get GL_TRANSFORM_FEEDBACK_BUFFER_BINDING() {
      return 35983;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_BUFFER_MODE*/get GL_TRANSFORM_FEEDBACK_BUFFER_MODE() {
      return 35967;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE*/get GL_TRANSFORM_FEEDBACK_BUFFER_SIZE() {
      return 35973;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_BUFFER_START*/get GL_TRANSFORM_FEEDBACK_BUFFER_START() {
      return 35972;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_PAUSED*/get GL_TRANSFORM_FEEDBACK_PAUSED() {
      return 36387;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN*/get GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN() {
      return 35976;
    },
    /*lib.GL_TRANSFORM_FEEDBACK_VARYINGS*/get GL_TRANSFORM_FEEDBACK_VARYINGS() {
      return 35971;
    },
    /*lib.GL_TRIANGLES*/get GL_TRIANGLES() {
      return 4;
    },
    /*lib.GL_TRIANGLE_FAN*/get GL_TRIANGLE_FAN() {
      return 6;
    },
    /*lib.GL_TRIANGLE_STRIP*/get GL_TRIANGLE_STRIP() {
      return 5;
    },
    /*lib.GL_UNIFORM_ARRAY_STRIDE*/get GL_UNIFORM_ARRAY_STRIDE() {
      return 35388;
    },
    /*lib.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS*/get GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS() {
      return 35394;
    },
    /*lib.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*/get GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES() {
      return 35395;
    },
    /*lib.GL_UNIFORM_BLOCK_BINDING*/get GL_UNIFORM_BLOCK_BINDING() {
      return 35391;
    },
    /*lib.GL_UNIFORM_BLOCK_DATA_SIZE*/get GL_UNIFORM_BLOCK_DATA_SIZE() {
      return 35392;
    },
    /*lib.GL_UNIFORM_BLOCK_INDEX*/get GL_UNIFORM_BLOCK_INDEX() {
      return 35386;
    },
    /*lib.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER*/get GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER() {
      return 35398;
    },
    /*lib.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER*/get GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER() {
      return 35396;
    },
    /*lib.GL_UNIFORM_BUFFER*/get GL_UNIFORM_BUFFER() {
      return 35345;
    },
    /*lib.GL_UNIFORM_BUFFER_BINDING*/get GL_UNIFORM_BUFFER_BINDING() {
      return 35368;
    },
    /*lib.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT*/get GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT() {
      return 35380;
    },
    /*lib.GL_UNIFORM_BUFFER_SIZE*/get GL_UNIFORM_BUFFER_SIZE() {
      return 35370;
    },
    /*lib.GL_UNIFORM_BUFFER_START*/get GL_UNIFORM_BUFFER_START() {
      return 35369;
    },
    /*lib.GL_UNIFORM_IS_ROW_MAJOR*/get GL_UNIFORM_IS_ROW_MAJOR() {
      return 35390;
    },
    /*lib.GL_UNIFORM_MATRIX_STRIDE*/get GL_UNIFORM_MATRIX_STRIDE() {
      return 35389;
    },
    /*lib.GL_UNIFORM_OFFSET*/get GL_UNIFORM_OFFSET() {
      return 35387;
    },
    /*lib.GL_UNIFORM_SIZE*/get GL_UNIFORM_SIZE() {
      return 35384;
    },
    /*lib.GL_UNIFORM_TYPE*/get GL_UNIFORM_TYPE() {
      return 35383;
    },
    /*lib.GL_UNMASKED_VENDOR_WEBGL*/get GL_UNMASKED_VENDOR_WEBGL() {
      return 37445;
    },
    /*lib.GL_UNMASKED_RENDERER_WEBGL*/get GL_UNMASKED_RENDERER_WEBGL() {
      return 37446;
    },
    /*lib.GL_UNPACK_ALIGNMENT*/get GL_UNPACK_ALIGNMENT() {
      return 3317;
    },
    /*lib.GL_UNPACK_COLORSPACE_CONVERSION_WEBGL*/get GL_UNPACK_COLORSPACE_CONVERSION_WEBGL() {
      return 37443;
    },
    /*lib.GL_UNPACK_FLIP_Y_WEBGL*/get GL_UNPACK_FLIP_Y_WEBGL() {
      return 37440;
    },
    /*lib.GL_UNPACK_IMAGE_HEIGHT*/get GL_UNPACK_IMAGE_HEIGHT() {
      return 32878;
    },
    /*lib.GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL*/get GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL() {
      return 37441;
    },
    /*lib.GL_UNPACK_ROW_LENGTH*/get GL_UNPACK_ROW_LENGTH() {
      return 3314;
    },
    /*lib.GL_UNPACK_SKIP_IMAGES*/get GL_UNPACK_SKIP_IMAGES() {
      return 32877;
    },
    /*lib.GL_UNPACK_SKIP_PIXELS*/get GL_UNPACK_SKIP_PIXELS() {
      return 3316;
    },
    /*lib.GL_UNPACK_SKIP_ROWS*/get GL_UNPACK_SKIP_ROWS() {
      return 3315;
    },
    /*lib.GL_UNSIGNALED*/get GL_UNSIGNALED() {
      return 37144;
    },
    /*lib.GL_UNSIGNED_BYTE*/get GL_UNSIGNED_BYTE() {
      return 5121;
    },
    /*lib.GL_UNSIGNED_INT*/get GL_UNSIGNED_INT() {
      return 5125;
    },
    /*lib.GL_UNSIGNED_INT_10F_11F_11F_REV*/get GL_UNSIGNED_INT_10F_11F_11F_REV() {
      return 35899;
    },
    /*lib.GL_UNSIGNED_INT_24_8*/get GL_UNSIGNED_INT_24_8() {
      return 34042;
    },
    /*lib.GL_UNSIGNED_INT_2_10_10_10_REV*/get GL_UNSIGNED_INT_2_10_10_10_REV() {
      return 33640;
    },
    /*lib.GL_UNSIGNED_INT_5_9_9_9_REV*/get GL_UNSIGNED_INT_5_9_9_9_REV() {
      return 35902;
    },
    /*lib.GL_UNSIGNED_INT_SAMPLER_2D*/get GL_UNSIGNED_INT_SAMPLER_2D() {
      return 36306;
    },
    /*lib.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY*/get GL_UNSIGNED_INT_SAMPLER_2D_ARRAY() {
      return 36311;
    },
    /*lib.GL_UNSIGNED_INT_SAMPLER_3D*/get GL_UNSIGNED_INT_SAMPLER_3D() {
      return 36307;
    },
    /*lib.GL_UNSIGNED_INT_SAMPLER_CUBE*/get GL_UNSIGNED_INT_SAMPLER_CUBE() {
      return 36308;
    },
    /*lib.GL_UNSIGNED_INT_VEC2*/get GL_UNSIGNED_INT_VEC2() {
      return 36294;
    },
    /*lib.GL_UNSIGNED_INT_VEC3*/get GL_UNSIGNED_INT_VEC3() {
      return 36295;
    },
    /*lib.GL_UNSIGNED_INT_VEC4*/get GL_UNSIGNED_INT_VEC4() {
      return 36296;
    },
    /*lib.GL_UNSIGNED_NORMALIZED*/get GL_UNSIGNED_NORMALIZED() {
      return 35863;
    },
    /*lib.GL_UNSIGNED_SHORT*/get GL_UNSIGNED_SHORT() {
      return 5123;
    },
    /*lib.GL_UNSIGNED_SHORT_4_4_4_4*/get GL_UNSIGNED_SHORT_4_4_4_4() {
      return 32819;
    },
    /*lib.GL_UNSIGNED_SHORT_5_5_5_1*/get GL_UNSIGNED_SHORT_5_5_5_1() {
      return 32820;
    },
    /*lib.GL_UNSIGNED_SHORT_5_6_5*/get GL_UNSIGNED_SHORT_5_6_5() {
      return 33635;
    },
    /*lib.GL_VALIDATE_STATUS*/get GL_VALIDATE_STATUS() {
      return 35715;
    },
    /*lib.GL_VENDOR*/get GL_VENDOR() {
      return 7936;
    },
    /*lib.GL_VERSION*/get GL_VERSION() {
      return 7938;
    },
    /*lib.GL_VERTEX_ARRAY_BINDING*/get GL_VERTEX_ARRAY_BINDING() {
      return 34229;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/get GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING() {
      return 34975;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_DIVISOR*/get GL_VERTEX_ATTRIB_ARRAY_DIVISOR() {
      return 35070;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_ENABLED*/get GL_VERTEX_ATTRIB_ARRAY_ENABLED() {
      return 34338;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_INTEGER*/get GL_VERTEX_ATTRIB_ARRAY_INTEGER() {
      return 35069;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED*/get GL_VERTEX_ATTRIB_ARRAY_NORMALIZED() {
      return 34922;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_POINTER*/get GL_VERTEX_ATTRIB_ARRAY_POINTER() {
      return 34373;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_SIZE*/get GL_VERTEX_ATTRIB_ARRAY_SIZE() {
      return 34339;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_STRIDE*/get GL_VERTEX_ATTRIB_ARRAY_STRIDE() {
      return 34340;
    },
    /*lib.GL_VERTEX_ATTRIB_ARRAY_TYPE*/get GL_VERTEX_ATTRIB_ARRAY_TYPE() {
      return 34341;
    },
    /*lib.GL_VERTEX_SHADER*/get GL_VERTEX_SHADER() {
      return 35633;
    },
    /*lib.GL_VIEWPORT*/get GL_VIEWPORT() {
      return 2978;
    },
    /*lib.GL_WAIT_FAILED*/get GL_WAIT_FAILED() {
      return 37149;
    },
    /*lib.GL_ZERO*/get GL_ZERO() {
      return 0;
    },
    /*lib.kMaxLights*/get kMaxLights() {
      return 4;
    },
    /*lib.kMaxBones*/get kMaxBones() {
      return 128;
    },
    /*lib.lightTypeInvalid*/get lightTypeInvalid() {
      return 0;
    },
    /*lib.lightTypeDirectional*/get lightTypeDirectional() {
      return 1;
    },
    /*lib.lightTypeSpot*/get lightTypeSpot() {
      return 2;
    },
    /*lib.lightTypePoint*/get lightTypePoint() {
      return 3;
    },
    /*lib.lightTypeInvalidFloat*/get lightTypeInvalidFloat() {
      return "0.0";
    },
    /*lib.lightTypeDirectionalFloat*/get lightTypeDirectionalFloat() {
      return "1.0";
    },
    /*lib.lightTypeSpotFloat*/get lightTypeSpotFloat() {
      return "2.0";
    },
    /*lib.lightTypePointFloat*/get lightTypePointFloat() {
      return "3.0";
    },
    /*lib.VarTypeFloat*/get VarTypeFloat() {
      return "float";
    },
    /*lib.VarTypeVec2*/get VarTypeVec2() {
      return "vec2";
    },
    /*lib.VarTypeVec3*/get VarTypeVec3() {
      return "vec3";
    },
    /*lib.VarTypeVec4*/get VarTypeVec4() {
      return "vec4";
    },
    /*lib.VarTypeMat3*/get VarTypeMat3() {
      return "mat3";
    },
    /*lib.VarTypeMat4*/get VarTypeMat4() {
      return "mat4";
    },
    /*lib.VarTypeUvec4*/get VarTypeUvec4() {
      return "uvec4";
    },
    /*lib.VarTypeUvec3*/get VarTypeUvec3() {
      return "uvec3";
    },
    /*lib.VarTypeUvec2*/get VarTypeUvec2() {
      return "uvec2";
    },
    /*lib.VarTypeSampler2D*/get VarTypeSampler2D() {
      return "sampler2D";
    },
    /*lib.VarTypeSampler2DShadow*/get VarTypeSampler2DShadow() {
      return "sampler2DShadow";
    },
    /*lib.VarTypeSamplerCube*/get VarTypeSamplerCube() {
      return "samplerCube";
    },
    /*lib.VarTypeInt*/get VarTypeInt() {
      return "int";
    },
    /*lib.VarTypeIndex*/get VarTypeIndex() {
      return "index";
    },
    /*lib.oFragColor*/get oFragColor() {
      return "oFragColor";
    },
    /*lib.prefixControl*/get prefixControl() {
      return 99;
    },
    /*lib.cDepthFunc*/get cDepthFunc() {
      return "cDepthFunc";
    },
    /*lib.cDepthTest*/get cDepthTest() {
      return "cDepthTest";
    },
    /*lib.cDepthWrite*/get cDepthWrite() {
      return "cDepthWrite";
    },
    /*lib.cBlendEquation*/get cBlendEquation() {
      return "cBlendEquation";
    },
    /*lib.cStencilFunc*/get cStencilFunc() {
      return "cStencilFunc";
    },
    /*lib.cStencilOp*/get cStencilOp() {
      return "cStencilOp";
    },
    /*lib.cNumItems*/get cNumItems() {
      return "cNumItems";
    },
    /*lib.cNumInstances*/get cNumInstances() {
      return "cNumInstances";
    },
    /*lib.cDrawMode*/get cDrawMode() {
      return "cDrawMode";
    },
    /*lib.cColorWrite*/get cColorWrite() {
      return "cColorWrite";
    },
    /*lib.cStencilWrite*/get cStencilWrite() {
      return "cStencilWrite";
    },
    /*lib.prefixTransform*/get prefixTransform() {
      return 116;
    },
    /*lib.tPosition*/get tPosition() {
      return "tPosition";
    },
    /*lib.tSpeed*/get tSpeed() {
      return "tSpeed";
    },
    /*lib.tForce*/get tForce() {
      return "tForce";
    },
    /*lib.prefixAttribute*/get prefixAttribute() {
      return 97;
    },
    /*lib.aColor*/get aColor() {
      return "aColor";
    },
    /*lib.aColorAlpha*/get aColorAlpha() {
      return "aColorAlpha";
    },
    /*lib.aPosition*/get aPosition() {
      return "aPosition";
    },
    /*lib.aTexUV*/get aTexUV() {
      return "aTexUV";
    },
    /*lib.aNormal*/get aNormal() {
      return "aNormal";
    },
    /*lib.aBinormal*/get aBinormal() {
      return "aBinormal";
    },
    /*lib.aTangent*/get aTangent() {
      return "aTangent";
    },
    /*lib.aBitangent*/get aBitangent() {
      return "aBitangent";
    },
    /*lib.aCenter*/get aCenter() {
      return "aCenter";
    },
    /*lib.aPointSize*/get aPointSize() {
      return "aPointSize";
    },
    /*lib.aBoneIndex*/get aBoneIndex() {
      return "aBoneIndex";
    },
    /*lib.aBoneWeight*/get aBoneWeight() {
      return "aBoneWeight";
    },
    /*lib.prefixInstancer*/get prefixInstancer() {
      return 105;
    },
    /*lib.iaRotation*/get iaRotation() {
      return "iaRotation";
    },
    /*lib.iaTranslation*/get iaTranslation() {
      return "iaTranslation";
    },
    /*lib.iaScale*/get iaScale() {
      return "iaScale";
    },
    /*lib.iaColor*/get iaColor() {
      return "iaColor";
    },
    /*lib.vColor*/get vColor() {
      return "vColor";
    },
    /*lib.vTexUV*/get vTexUV() {
      return "vTexUV";
    },
    /*lib.vLightWeighting*/get vLightWeighting() {
      return "vLightWeighting";
    },
    /*lib.vNormal*/get vNormal() {
      return "vNormal";
    },
    /*lib.vPosition*/get vPosition() {
      return "vPosition";
    },
    /*lib.vCenter*/get vCenter() {
      return "vCenter";
    },
    /*lib.vDepth*/get vDepth() {
      return "vDepth";
    },
    /*lib.vPositionFromLight*/get vPositionFromLight() {
      return "vPositionFromLight";
    },
    /*lib.prefixUniform*/get prefixUniform() {
      return 117;
    },
    /*lib.uTransformationMatrix*/get uTransformationMatrix() {
      return "uTransformationMatrix";
    },
    /*lib.uNormalMatrix*/get uNormalMatrix() {
      return "uNormalMatrix";
    },
    /*lib.uConvolutionMatrix*/get uConvolutionMatrix() {
      return "uConvolutionMatrix";
    },
    /*lib.uPerspectiveViewMatrix*/get uPerspectiveViewMatrix() {
      return "uPerspectiveViewMatrix";
    },
    /*lib.uLightPerspectiveViewMatrix*/get uLightPerspectiveViewMatrix() {
      return "uLightPerspectiveViewMatrix";
    },
    /*lib.uModelMatrix*/get uModelMatrix() {
      return "uModelMatrix";
    },
    /*lib.uTexture*/get uTexture() {
      return "uTexture";
    },
    /*lib.uCubeTexture*/get uCubeTexture() {
      return "uCubeTexture";
    },
    /*lib.uTexture2*/get uTexture2() {
      return "uTexture2";
    },
    /*lib.uTexture3*/get uTexture3() {
      return "uTexture3";
    },
    /*lib.uTexture4*/get uTexture4() {
      return "uTexture4";
    },
    /*lib.uBumpMap*/get uBumpMap() {
      return "uBumpMap";
    },
    /*lib.uNormalMap*/get uNormalMap() {
      return "uNormalMap";
    },
    /*lib.uSpecularMap*/get uSpecularMap() {
      return "uSpecularMap";
    },
    /*lib.uAnimationTable*/get uAnimationTable() {
      return "uAnimationTable";
    },
    /*lib.uDepthMap*/get uDepthMap() {
      return "uDepthMap";
    },
    /*lib.uShadowMap*/get uShadowMap() {
      return "uShadowMap";
    },
    /*lib.uTime*/get uTime() {
      return "uTime";
    },
    /*lib.uColor*/get uColor() {
      return "uColor";
    },
    /*lib.uColorAlpha2*/get uColorAlpha2() {
      return "uColorAlpha2";
    },
    /*lib.uColorAlpha*/get uColorAlpha() {
      return "uColorAlpha";
    },
    /*lib.uColorEmissive*/get uColorEmissive() {
      return "uColorEmissive";
    },
    /*lib.uColorAmbient*/get uColorAmbient() {
      return "uAmbientDiffuse";
    },
    /*lib.uColorDiffuse*/get uColorDiffuse() {
      return "uColorDiffuse";
    },
    /*lib.uColorSpecular*/get uColorSpecular() {
      return "uColorSpecular";
    },
    /*lib.uCameraNear*/get uCameraNear() {
      return "uCameraNear";
    },
    /*lib.uCameraFar*/get uCameraFar() {
      return "uCameraFar";
    },
    /*lib.uCanvasSize*/get uCanvasSize() {
      return "uCanvasSize";
    },
    /*lib.uCenter2*/get uCenter2() {
      return "uCenter2";
    },
    /*lib.uPointSize*/get uPointSize() {
      return "uPointSize";
    },
    /*lib.uScale*/get uScale() {
      return "uScale";
    },
    /*lib.uAngle*/get uAngle() {
      return "uAngle";
    },
    /*lib.uFogNear*/get uFogNear() {
      return "uFogNear";
    },
    /*lib.uFogFar*/get uFogFar() {
      return "uFogFar";
    },
    /*lib.uEyePosition*/get uEyePosition() {
      return "uEyePosition";
    },
    /*lib.uBoneMatrices*/get uBoneMatrices() {
      return "uBoneMatrices";
    },
    /*lib.uBumpScale*/get uBumpScale() {
      return "uBumpScale";
    },
    /*lib.uNormalScale*/get uNormalScale() {
      return "uNormalScale";
    },
    /*lib.uCutOff*/get uCutOff() {
      return "uCutOff";
    },
    /*lib.uShininess*/get uShininess() {
      return "uShininess";
    },
    /*lib.uOpacity*/get uOpacity() {
      return "uOpacity";
    },
    /*lib.uShadowBias*/get uShadowBias() {
      return "uShadowBias";
    },
    /*lib.uRange*/get uRange() {
      return "uRange";
    },
    /*lib.uDirection*/get uDirection() {
      return "uDirection";
    },
    /*lib.uMaterial*/get uMaterial() {
      return "uMaterial";
    },
    /*lib.uLightDescs*/get uLightDescs() {
      return "uLightDescs";
    },
    /*lib.uLightCount*/get uLightCount() {
      return "uLightCount";
    },
    /*lib.uLightTypes*/get uLightTypes() {
      return "uLightTypes";
    },
    /*lib._VarsDb*/get _VarsDb() {
      return new (T.IdentityMapOfStringL$ShaderVarDescL()).from(["cBlendEquation", C[2] || CT.C2, "cDepthWrite", C[2] || CT.C2, "cDepthTest", C[2] || CT.C2, "cStencilFunc", C[2] || CT.C2, "tPosition", C[3] || CT.C3, "tSpeed", C[3] || CT.C3, "tForce", C[3] || CT.C3, "aColor", C[4] || CT.C4, "aColorAlpha", C[5] || CT.C5, "aPosition", C[6] || CT.C6, "aTexUV", C[7] || CT.C7, "aNormal", C[8] || CT.C8, "aBinormal", C[9] || CT.C9, "aCenter", C[10] || CT.C10, "aPointSize", C[11] || CT.C11, "aBoneIndex", C[12] || CT.C12, "aBoneWeight", C[12] || CT.C12, "aTangent", C[13] || CT.C13, "aBitangent", C[14] || CT.C14, "iaRotation", C[12] || CT.C12, "iaTranslation", C[3] || CT.C3, "iaScale", C[11] || CT.C11, "iaColor", C[3] || CT.C3, "vColor", C[4] || CT.C4, "vTexUV", C[15] || CT.C15, "vLightWeighting", C[3] || CT.C3, "vNormal", C[3] || CT.C3, "vPosition", C[6] || CT.C6, "vPositionFromLight", C[16] || CT.C16, "vCenter", C[10] || CT.C10, "vDepth", C[17] || CT.C17, "uTransformationMatrix", C[18] || CT.C18, "uModelMatrix", C[18] || CT.C18, "uNormalMatrix", C[19] || CT.C19, "uConvolutionMatrix", C[19] || CT.C19, "uPerspectiveViewMatrix", C[18] || CT.C18, "uLightPerspectiveViewMatrix", C[18] || CT.C18, "uShadowMap", C[20] || CT.C20, "uTexture", C[21] || CT.C21, "uTexture2", C[21] || CT.C21, "uTexture3", C[21] || CT.C21, "uTexture4", C[21] || CT.C21, "uSpecularMap", C[21] || CT.C21, "uNormalMap", C[21] || CT.C21, "uBumpMap", C[21] || CT.C21, "uDepthMap", C[21] || CT.C21, "uCubeTexture", C[22] || CT.C22, "uAnimationTable", C[21] || CT.C21, "uTime", C[23] || CT.C23, "uCameraNear", C[11] || CT.C11, "uCameraFar", C[11] || CT.C11, "uFogNear", C[11] || CT.C11, "uFogFar", C[11] || CT.C11, "uPointSize", C[11] || CT.C11, "uScale", C[11] || CT.C11, "uAngle", C[11] || CT.C11, "uCanvasSize", C[15] || CT.C15, "uCenter2", C[15] || CT.C15, "uCutOff", C[11] || CT.C11, "uShininess", C[11] || CT.C11, "uShadowBias", C[11] || CT.C11, "uOpacity", C[11] || CT.C11, "uColor", C[3] || CT.C3, "uAmbientDiffuse", C[3] || CT.C3, "uColorEmissive", C[3] || CT.C3, "uColorSpecular", C[3] || CT.C3, "uColorDiffuse", C[3] || CT.C3, "uColorAlpha", C[12] || CT.C12, "uColorAlpha2", C[12] || CT.C12, "uEyePosition", C[3] || CT.C3, "uMaterial", C[18] || CT.C18, "uRange", C[15] || CT.C15, "uDirection", C[15] || CT.C15, "uBoneMatrices", C[24] || CT.C24, "uLightDescs", C[25] || CT.C25, "uLightCount", C[11] || CT.C11, "uLightTypes", C[26] || CT.C26, "uBumpScale", C[27] || CT.C27, "uNormalScale", C[28] || CT.C28]);
    },
    /*lib.kUnknownEntity*/get kUnknownEntity() {
      return new lib.UnknownEntity.new();
    },
    /*lib.RIGHTX*/get RIGHTX() {
      return 0;
    },
    /*lib.RIGHTY*/get RIGHTY() {
      return 4;
    },
    /*lib.RIGHTZ*/get RIGHTZ() {
      return 8;
    },
    /*lib.UPX*/get UPX() {
      return 1;
    },
    /*lib.UPY*/get UPY() {
      return 5;
    },
    /*lib.UPZ*/get UPZ() {
      return 9;
    },
    /*lib.BACKX*/get BACKX() {
      return 2;
    },
    /*lib.BACKY*/get BACKY() {
      return 6;
    },
    /*lib.BACKZ*/get BACKZ() {
      return 10;
    },
    /*lib.POSX*/get POSX() {
      return 12;
    },
    /*lib.POSY*/get POSY() {
      return 13;
    },
    /*lib.POSZ*/get POSZ() {
      return 14;
    },
    /*lib._up*/get _up() {
      return vector_math.Vector3.new(0.0, 1.0, 0.0);
    },
    /*lib._up2*/get _up2() {
      return vector_math.Vector3.new(0.0, 0.0, 1.0);
    }
  }, true);
  dart.trackLibraries("packages/flutter_wgl/src/core/lib.dart", {
    "package:flutter_wgl/src/core/lib.dart": lib
  }, {
    "package:flutter_wgl/src/core/lib.dart": ["render_program.dart", "mesh_data.dart", "textures.dart", "material.dart", "framebuffer.dart", "flutterWGL.dart", "constants.dart", "shader_object.dart", "abstractions.dart", "spatial.dart", "projection.dart", "geometry_builder.dart", "illumination.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["render_program.dart","abstractions.dart","mesh_data.dart","textures.dart","material.dart","framebuffer.dart","flutterWGL.dart","shader_object.dart","spatial.dart","projection.dart","geometry_builder.dart","illumination.dart","lib.dart","constants.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../Z:/packages/flutter_wgl/src/core/lib.dart.lib.js"}');
  // Exports:
  return {
    src__core__lib: lib
  };
}));

//# sourceMappingURL=lib.dart.lib.js.map
