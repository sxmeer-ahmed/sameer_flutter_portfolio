define(['dart_sdk', 'packages/vector_math/vector_math.dart'], (function load__packages__flutter_wgl__src__animation__lib_dart(dart_sdk, packages__vector_math__vector_math$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  var lib = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    Matrix4L: () => (T.Matrix4L = dart.constFn(dart.legacy(vector_math.Matrix4)))(),
    ListOfMatrix4L: () => (T.ListOfMatrix4L = dart.constFn(core.List$(T.Matrix4L())))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    JSArrayOfdoubleL: () => (T.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T.doubleL())))(),
    Vector3L: () => (T.Vector3L = dart.constFn(dart.legacy(vector_math.Vector3)))(),
    JSArrayOfVector3L: () => (T.JSArrayOfVector3L = dart.constFn(_interceptors.JSArray$(T.Vector3L())))(),
    QuaternionL: () => (T.QuaternionL = dart.constFn(dart.legacy(vector_math.Quaternion)))(),
    JSArrayOfQuaternionL: () => (T.JSArrayOfQuaternionL = dart.constFn(_interceptors.JSArray$(T.QuaternionL())))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    BoneAnimationL: () => (T.BoneAnimationL = dart.constFn(dart.legacy(lib.BoneAnimation)))(),
    ListOfBoneAnimationL: () => (T.ListOfBoneAnimationL = dart.constFn(core.List$(T.BoneAnimationL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/animation/skeleton_animation.dart",
    "package:flutter_wgl/src/animation/lib.dart"
  ];
  var boneName$ = dart.privateName(lib, "Bone.boneName");
  var localTransform$ = dart.privateName(lib, "Bone.localTransform");
  var offsetTransform$ = dart.privateName(lib, "Bone.offsetTransform");
  var boneIndex$ = dart.privateName(lib, "Bone.boneIndex");
  var parentNum$ = dart.privateName(lib, "Bone.parentNum");
  lib.Bone = class Bone extends core.Object {
    get boneName() {
      return this[boneName$];
    }
    set boneName(value) {
      super.boneName = value;
    }
    get localTransform() {
      return this[localTransform$];
    }
    set localTransform(value) {
      super.localTransform = value;
    }
    get offsetTransform() {
      return this[offsetTransform$];
    }
    set offsetTransform(value) {
      super.offsetTransform = value;
    }
    get boneIndex() {
      return this[boneIndex$];
    }
    set boneIndex(value) {
      super.boneIndex = value;
    }
    get parentNum() {
      return this[parentNum$];
    }
    set parentNum(value) {
      super.parentNum = value;
    }
    toString() {
      return "BONE[" + dart.str(this.boneIndex) + "] (" + dart.str(this.parentNum) + ") " + dart.str(this.boneName) + "\n" + "trans:\n" + dart.str(this.localTransform) + "offset:\n" + dart.str(this.offsetTransform);
    }
  };
  (lib.Bone.new = function(boneName, boneIndex, parentNum, localTransform, offsetTransform) {
    this[boneName$] = boneName;
    this[boneIndex$] = boneIndex;
    this[parentNum$] = parentNum;
    this[localTransform$] = localTransform;
    this[offsetTransform$] = offsetTransform;
    if (!(dart.notNull(this.boneIndex) > dart.notNull(this.parentNum))) dart.assertFailed(null, I[0], 21, 12, "boneIndex > parentNum");
  }).prototype = lib.Bone.prototype;
  dart.addTypeTests(lib.Bone);
  dart.addTypeCaches(lib.Bone);
  dart.setMethodSignature(lib.Bone, () => ({
    __proto__: dart.getMethods(lib.Bone.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.Bone, I[1]);
  dart.setFieldSignature(lib.Bone, () => ({
    __proto__: dart.getFields(lib.Bone.__proto__),
    boneName: dart.finalFieldType(dart.legacy(core.String)),
    localTransform: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    offsetTransform: dart.finalFieldType(dart.legacy(vector_math.Matrix4)),
    boneIndex: dart.finalFieldType(dart.legacy(core.int)),
    parentNum: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(lib.Bone, ['toString']);
  var globalTransforms = dart.privateName(lib, "AnimatedSkeleton.globalTransforms");
  var skinningTransforms = dart.privateName(lib, "AnimatedSkeleton.skinningTransforms");
  lib.AnimatedSkeleton = class AnimatedSkeleton extends core.Object {
    get globalTransforms() {
      return this[globalTransforms];
    }
    set globalTransforms(value) {
      super.globalTransforms = value;
    }
    get skinningTransforms() {
      return this[skinningTransforms];
    }
    set skinningTransforms(value) {
      super.skinningTransforms = value;
    }
  };
  (lib.AnimatedSkeleton.new = function(length) {
    this[globalTransforms] = T.ListOfMatrix4L().new(length);
    this[skinningTransforms] = T.ListOfMatrix4L().new(length);
    for (let i = 0; i < dart.notNull(length); i = i + 1) {
      this.globalTransforms[$_set](i, new vector_math.Matrix4.zero());
      this.skinningTransforms[$_set](i, new vector_math.Matrix4.zero());
    }
  }).prototype = lib.AnimatedSkeleton.prototype;
  dart.addTypeTests(lib.AnimatedSkeleton);
  dart.addTypeCaches(lib.AnimatedSkeleton);
  dart.setLibraryUri(lib.AnimatedSkeleton, I[1]);
  dart.setFieldSignature(lib.AnimatedSkeleton, () => ({
    __proto__: dart.getFields(lib.AnimatedSkeleton.__proto__),
    globalTransforms: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(vector_math.Matrix4)))),
    skinningTransforms: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(vector_math.Matrix4))))
  }));
  var bone$ = dart.privateName(lib, "BoneAnimation.bone");
  var _positionTimes$ = dart.privateName(lib, "_positionTimes");
  var _positionValues$ = dart.privateName(lib, "_positionValues");
  var _rotationTimes$ = dart.privateName(lib, "_rotationTimes");
  var _rotationValues$ = dart.privateName(lib, "_rotationValues");
  var _scaleTimes$ = dart.privateName(lib, "_scaleTimes");
  var _scaleValues$ = dart.privateName(lib, "_scaleValues");
  lib.BoneAnimation = class BoneAnimation extends core.Object {
    get bone() {
      return this[bone$];
    }
    set bone(value) {
      super.bone = value;
    }
    static _findTime(timeList, t) {
      for (let i = 0; i < dart.notNull(timeList[$length]) - 1; i = i + 1) {
        if (dart.notNull(t) < dart.notNull(timeList[$_get](i + 1))) {
          return i;
        }
      }
      return 0;
    }
    setBoneMatrixAtTick(tick, boneMatrix) {
      let scaleIndex = lib.BoneAnimation._findTime(this[_scaleTimes$], tick);
      if (!(dart.notNull(scaleIndex) >= 0)) dart.assertFailed(null, I[0], 184, 12, "scaleIndex >= 0");
      let positionIndex = lib.BoneAnimation._findTime(this[_positionTimes$], tick);
      if (!(dart.notNull(positionIndex) >= 0)) dart.assertFailed(null, I[0], 186, 12, "positionIndex >= 0");
      let rotationIndex = lib.BoneAnimation._findTime(this[_rotationTimes$], tick);
      if (!(dart.notNull(rotationIndex) >= 0)) dart.assertFailed(null, I[0], 188, 12, "rotationIndex >= 0");
      let s = this[_scaleValues$][$_get](scaleIndex);
      let t = this[_positionValues$][$_get](positionIndex);
      let r = this[_rotationValues$][$_get](rotationIndex);
      boneMatrix.setFromTranslationRotationScale(t, r, s);
    }
    toString() {
      let s = T.JSArrayOfStringL().of([]);
      s[$add](dart.str(this.bone.boneName));
      s[$add](dart.str(this[_positionTimes$][$length]) + ": " + dart.str(this[_positionValues$]));
      s[$add](dart.str(this[_rotationTimes$][$length]) + ": " + dart.str(this[_rotationValues$]));
      s[$add](dart.str(this[_scaleTimes$][$length]) + ": " + dart.str(this[_scaleValues$]));
      return s[$join]("\n");
    }
  };
  (lib.BoneAnimation.new = function(bone, _positionTimes, _positionValues, _rotationTimes, _rotationValues, _scaleTimes, _scaleValues) {
    this[bone$] = bone;
    this[_positionTimes$] = _positionTimes;
    this[_positionValues$] = _positionValues;
    this[_rotationTimes$] = _rotationTimes;
    this[_rotationValues$] = _rotationValues;
    this[_scaleTimes$] = _scaleTimes;
    this[_scaleValues$] = _scaleValues;
    if (this[_positionTimes$] == null || this[_positionTimes$][$length] === 0) {
      this[_positionTimes$] = T.JSArrayOfdoubleL().of([0.0]);
      this[_positionValues$] = T.JSArrayOfVector3L().of([vector_math.Vector3.new(0.0, 0.0, 0.0)]);
    }
    if (this[_rotationTimes$] == null || this[_rotationTimes$][$length] === 0) {
      this[_rotationTimes$] = T.JSArrayOfdoubleL().of([0.0]);
      this[_rotationValues$] = T.JSArrayOfQuaternionL().of([vector_math.Quaternion.new(0.0, 0.0, 0.0, 1.0)]);
    }
    if (this[_scaleTimes$] == null || this[_scaleTimes$][$length] === 0) {
      this[_scaleTimes$] = T.JSArrayOfdoubleL().of([0.0]);
      this[_scaleValues$] = T.JSArrayOfVector3L().of([vector_math.Vector3.new(1.0, 1.0, 1.0)]);
    }
    if (!(dart.notNull(this[_rotationTimes$][$length]) > 0)) dart.assertFailed(null, I[0], 154, 12, "_rotationTimes.length > 0");
    if (!(dart.notNull(this[_positionTimes$][$length]) > 0)) dart.assertFailed(null, I[0], 155, 12, "_positionTimes.length > 0");
    if (!(dart.notNull(this[_scaleTimes$][$length]) > 0)) dart.assertFailed(null, I[0], 156, 12, "_scaleTimes.length > 0");
    if (!(this[_rotationTimes$][$length] == this[_rotationValues$][$length])) dart.assertFailed(null, I[0], 157, 12, "_rotationTimes.length == _rotationValues.length");
    if (!(this[_positionTimes$][$length] == this[_positionValues$][$length])) dart.assertFailed(null, I[0], 158, 12, "_positionTimes.length == _positionValues.length");
    if (!(this[_scaleTimes$][$length] == this[_scaleValues$][$length])) dart.assertFailed(null, I[0], 159, 12, "_scaleTimes.length == _scaleValues.length");
  }).prototype = lib.BoneAnimation.prototype;
  dart.addTypeTests(lib.BoneAnimation);
  dart.addTypeCaches(lib.BoneAnimation);
  dart.setMethodSignature(lib.BoneAnimation, () => ({
    __proto__: dart.getMethods(lib.BoneAnimation.__proto__),
    setBoneMatrixAtTick: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(vector_math.Matrix4)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.BoneAnimation, I[1]);
  dart.setFieldSignature(lib.BoneAnimation, () => ({
    __proto__: dart.getFields(lib.BoneAnimation.__proto__),
    bone: dart.finalFieldType(dart.legacy(lib.Bone)),
    [_positionTimes$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    [_positionValues$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(vector_math.Vector3)))),
    [_rotationTimes$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    [_rotationValues$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(vector_math.Quaternion)))),
    [_scaleTimes$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    [_scaleValues$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(vector_math.Vector3))))
  }));
  dart.defineExtensionMethods(lib.BoneAnimation, ['toString']);
  var name$ = dart.privateName(lib, "SkeletalAnimation.name");
  var animList = dart.privateName(lib, "SkeletalAnimation.animList");
  var duration$ = dart.privateName(lib, "SkeletalAnimation.duration");
  lib.SkeletalAnimation = class SkeletalAnimation extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get animList() {
      return this[animList];
    }
    set animList(value) {
      super.animList = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    InsertBone(ba) {
      if (!(this.animList[$_get](ba.bone.boneIndex) == null)) dart.assertFailed(null, I[0], 217, 12, "animList[ba.bone.boneIndex] == null");
      this.animList[$_set](ba.bone.boneIndex, ba);
    }
    toString() {
      return "SkeletalAnimation[" + dart.str(this.name) + ", duration: " + dart.str(this.duration) + ", frames: " + dart.str(this.animList[$length]) + "]";
    }
  };
  (lib.SkeletalAnimation.new = function(name, duration, length) {
    this[name$] = name;
    this[duration$] = duration;
    this[animList] = T.ListOfBoneAnimationL().new(length);
    ;
  }).prototype = lib.SkeletalAnimation.prototype;
  dart.addTypeTests(lib.SkeletalAnimation);
  dart.addTypeCaches(lib.SkeletalAnimation);
  dart.setMethodSignature(lib.SkeletalAnimation, () => ({
    __proto__: dart.getMethods(lib.SkeletalAnimation.__proto__),
    InsertBone: dart.fnType(dart.void, [dart.legacy(lib.BoneAnimation)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(lib.SkeletalAnimation, I[1]);
  dart.setFieldSignature(lib.SkeletalAnimation, () => ({
    __proto__: dart.getFields(lib.SkeletalAnimation.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    animList: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(lib.BoneAnimation)))),
    duration: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(lib.SkeletalAnimation, ['toString']);
  lib.RecomputeLocalOffsets = function RecomputeLocalOffsets(skeleton) {
    core.print("recomputing local transform");
    let toRoot = T.ListOfMatrix4L().new(skeleton[$length]);
    for (let i = 0; i < dart.notNull(skeleton[$length]); i = i + 1) {
      let bone = skeleton[$_get](i);
      if (dart.notNull(bone.parentNum) < 0) {
        toRoot[$_set](i, T.Matrix4L().as(vector_math.Matrix4.identity()['*'](bone.localTransform)));
      } else {
        toRoot[$_set](i, T.Matrix4L().as(toRoot[$_get](bone.parentNum)['*'](bone.localTransform)));
      }
      bone.offsetTransform.copyInverse(toRoot[$_get](i));
    }
  };
  lib.UpdateAnimatedSkeleton = function UpdateAnimatedSkeleton(skeleton, globalOffsetTransform, animation, posedSkeleton, time) {
    let t0;
    let tmp = new vector_math.Matrix4.zero();
    for (let i = 0; i < dart.notNull(skeleton[$length]); i = i + 1) {
      let bone = skeleton[$_get](i);
      let t = posedSkeleton.globalTransforms[$_get](i);
      if (dart.notNull(bone.parentNum) < 0) {
        t.setIdentity();
      } else {
        t.setFrom(posedSkeleton.globalTransforms[$_get](bone.parentNum));
      }
      let a = animation.animList[$_get](i);
      if (a != null) {
        a.setBoneMatrixAtTick(time, tmp);
        t.multiply(tmp);
      } else {
        t.multiply(bone.localTransform);
      }
    }
    for (let i = 0; i < dart.notNull(skeleton[$length]); i = i + 1) {
      let t = posedSkeleton.skinningTransforms[$_get](i);
      t.setFrom(globalOffsetTransform);
      t.multiply(posedSkeleton.globalTransforms[$_get](i));
      t0 = t;
      (() => {
        t0.multiply(skeleton[$_get](i).offsetTransform);
        return t0;
      })();
    }
  };
  lib.CreateAnimationTable = function CreateAnimationTable(skeleton, globalOffsetTransform, animation, time) {
    let posedSkeleton = new lib.AnimatedSkeleton.new(skeleton[$length]);
    let data = _native_typed_data.NativeFloat32List.new(dart.notNull(skeleton[$length]) * 16 * dart.notNull(time[$length]));
    let pos = 0;
    for (let t of time) {
      lib.UpdateAnimatedSkeleton(skeleton, globalOffsetTransform, animation, posedSkeleton, t);
      for (let m of posedSkeleton.skinningTransforms) {
        for (let i = 0; i < 16; i = i + 1)
          data[$_set](pos + i, m._get(i));
        pos = pos + 16;
      }
    }
    return data;
  };
  dart.trackLibraries("packages/flutter_wgl/src/animation/lib.dart", {
    "package:flutter_wgl/src/animation/lib.dart": lib
  }, {
    "package:flutter_wgl/src/animation/lib.dart": ["skeleton_animation.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["skeleton_animation.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../Z:/packages/flutter_wgl/src/animation/lib.dart.lib.js"}');
  // Exports:
  return {
    src__animation__lib: lib
  };
}));

//# sourceMappingURL=lib.dart.lib.js.map
