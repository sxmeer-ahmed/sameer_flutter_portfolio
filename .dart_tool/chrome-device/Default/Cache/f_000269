define(['dart_sdk', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/foundation/basic_types.dart', 'packages/flutter/src/services/platform_views.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/gestures/team.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/gestures/monodrag.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/arena.dart', 'packages/flutter/src/foundation/collections.dart'], (function load__packages__flutter__src__rendering__platform_view_dart(dart_sdk, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__foundation__basic_types$46dart, packages__flutter__src__services__platform_views$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__gestures__team$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__gestures__monodrag$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__arena$46dart, packages__flutter__src__foundation__collections$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const mouse_cursor = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_cursor;
  const mouse_tracking = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_tracking;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const basic_types = packages__flutter__src__foundation__basic_types$46dart.src__foundation__basic_types;
  const platform_views = packages__flutter__src__services__platform_views$46dart.src__services__platform_views;
  const binding = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const team = packages__flutter__src__gestures__team$46dart.src__gestures__team;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const monodrag = packages__flutter__src__gestures__monodrag$46dart.src__gestures__monodrag;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const arena = packages__flutter__src__gestures__arena$46dart.src__gestures__arena;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  var platform_view = Object.create(dart.library);
  var $length = dartx.length;
  var $map = dartx.map;
  var $toSet = dartx.toSet;
  var $remove = dartx.remove;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $clear = dartx.clear;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    PlatformViewHitTestBehaviorL: () => (T.PlatformViewHitTestBehaviorL = dart.constFn(dart.legacy(platform_view.PlatformViewHitTestBehavior)))(),
    _PlatformViewStateL: () => (T._PlatformViewStateL = dart.constFn(dart.legacy(platform_view._PlatformViewState)))(),
    OffsetToOffset: () => (T.OffsetToOffset = dart.constFn(dart.fnType(ui.Offset, [ui.Offset])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    DragDownDetailsTovoid: () => (T.DragDownDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragDownDetails])))(),
    TapDownDetailsTovoid: () => (T.TapDownDetailsTovoid = dart.constFn(dart.fnType(dart.void, [tap.TapDownDetails])))(),
    FactoryOfOneSequenceGestureRecognizer: () => (T.FactoryOfOneSequenceGestureRecognizer = dart.constFn(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))(),
    FactoryOfOneSequenceGestureRecognizerToOneSequenceGestureRecognizer: () => (T.FactoryOfOneSequenceGestureRecognizerToOneSequenceGestureRecognizer = dart.constFn(dart.fnType(recognizer.OneSequenceGestureRecognizer, [T.FactoryOfOneSequenceGestureRecognizer()])))(),
    ListOfPointerEvent: () => (T.ListOfPointerEvent = dart.constFn(core.List$(events.PointerEvent)))(),
    IdentityMapOfint$ListOfPointerEvent: () => (T.IdentityMapOfint$ListOfPointerEvent = dart.constFn(_js_helper.IdentityMap$(core.int, T.ListOfPointerEvent())))(),
    LinkedHashSetOfint: () => (T.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    JSArrayOfPointerEvent: () => (T.JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(events.PointerEvent)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: platform_view.PlatformViewHitTestBehavior.prototype,
        [_name$]: "PlatformViewHitTestBehavior.opaque",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_view.PlatformViewHitTestBehavior.prototype,
        [_name$]: "PlatformViewHitTestBehavior.translucent",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: platform_view.PlatformViewHitTestBehavior.prototype,
        [_name$]: "PlatformViewHitTestBehavior.transparent",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.PlatformViewHitTestBehaviorL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_view._PlatformViewState.prototype,
        [_name$]: "_PlatformViewState.uninitialized",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform_view._PlatformViewState.prototype,
        [_name$]: "_PlatformViewState.resizing",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: platform_view._PlatformViewState.prototype,
        [_name$]: "_PlatformViewState.ready",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.constList([C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6], T._PlatformViewStateL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    }
  }, false);
  var C = Array(9).fill(void 0);
  var I = [
    "file:///C:/src/flutter/flutter/packages/flutter/lib/src/rendering/platform_view.dart",
    "package:flutter/src/rendering/platform_view.dart"
  ];
  var _name$ = dart.privateName(platform_view, "_name");
  platform_view.PlatformViewHitTestBehavior = class PlatformViewHitTestBehavior extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (platform_view.PlatformViewHitTestBehavior.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 20, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 20, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = platform_view.PlatformViewHitTestBehavior.prototype;
  dart.addTypeTests(platform_view.PlatformViewHitTestBehavior);
  dart.addTypeCaches(platform_view.PlatformViewHitTestBehavior);
  dart.setLibraryUri(platform_view.PlatformViewHitTestBehavior, I[1]);
  dart.setFieldSignature(platform_view.PlatformViewHitTestBehavior, () => ({
    __proto__: dart.getFields(platform_view.PlatformViewHitTestBehavior.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(platform_view.PlatformViewHitTestBehavior, ['toString']);
  platform_view.PlatformViewHitTestBehavior.opaque = C[0] || CT.C0;
  platform_view.PlatformViewHitTestBehavior.translucent = C[1] || CT.C1;
  platform_view.PlatformViewHitTestBehavior.transparent = C[2] || CT.C2;
  platform_view.PlatformViewHitTestBehavior.values = C[3] || CT.C3;
  platform_view._PlatformViewState = class _PlatformViewState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (platform_view._PlatformViewState.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 35, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 35, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = platform_view._PlatformViewState.prototype;
  dart.addTypeTests(platform_view._PlatformViewState);
  dart.addTypeCaches(platform_view._PlatformViewState);
  dart.setLibraryUri(platform_view._PlatformViewState, I[1]);
  dart.setFieldSignature(platform_view._PlatformViewState, () => ({
    __proto__: dart.getFields(platform_view._PlatformViewState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(platform_view._PlatformViewState, ['toString']);
  platform_view._PlatformViewState.uninitialized = C[4] || CT.C4;
  platform_view._PlatformViewState.resizing = C[5] || CT.C5;
  platform_view._PlatformViewState.ready = C[6] || CT.C6;
  platform_view._PlatformViewState.values = C[7] || CT.C7;
  var _name = dart.privateName(ui, "_name");
  var _state = dart.privateName(platform_view, "_state");
  var _clipBehavior = dart.privateName(platform_view, "_clipBehavior");
  var __RenderAndroidView__currentAndroidViewSize = dart.privateName(platform_view, "_#RenderAndroidView#_currentAndroidViewSize");
  var __RenderAndroidView__currentAndroidViewSize_isSet = dart.privateName(platform_view, "_#RenderAndroidView#_currentAndroidViewSize#isSet");
  var _clipRectLayer = dart.privateName(platform_view, "_clipRectLayer");
  var _viewController = dart.privateName(platform_view, "_viewController");
  var _onPlatformViewCreated = dart.privateName(platform_view, "_onPlatformViewCreated");
  var _sizePlatformView = dart.privateName(platform_view, "_sizePlatformView");
  var _updateGestureRecognizersWithCallBack = dart.privateName(platform_view, "_updateGestureRecognizersWithCallBack");
  var _currentAndroidViewSize = dart.privateName(platform_view, "_currentAndroidViewSize");
  var _paintTexture = dart.privateName(platform_view, "_paintTexture");
  var _hitTestBehavior = dart.privateName(platform_view, "_PlatformViewGestureMixin._hitTestBehavior");
  var _handlePointerEvent = dart.privateName(platform_view, "_PlatformViewGestureMixin._handlePointerEvent");
  var _gestureRecognizer = dart.privateName(platform_view, "_PlatformViewGestureMixin._gestureRecognizer");
  var _hitTestBehavior$ = dart.privateName(platform_view, "_hitTestBehavior");
  var _handlePointerEvent$ = dart.privateName(platform_view, "_handlePointerEvent");
  var _gestureRecognizer$ = dart.privateName(platform_view, "_gestureRecognizer");
  platform_view._PlatformViewGestureMixin = class _PlatformViewGestureMixin extends box.RenderBox {};
  platform_view._PlatformViewGestureMixin[dart.mixinOn] = RenderBox => class _PlatformViewGestureMixin extends RenderBox {
    get [_hitTestBehavior$]() {
      return this[_hitTestBehavior];
    }
    set [_hitTestBehavior$](value) {
      this[_hitTestBehavior] = value;
    }
    get [_handlePointerEvent$]() {
      return this[_handlePointerEvent];
    }
    set [_handlePointerEvent$](value) {
      this[_handlePointerEvent] = value;
    }
    get [_gestureRecognizer$]() {
      return this[_gestureRecognizer];
    }
    set [_gestureRecognizer$](value) {
      this[_gestureRecognizer] = value;
    }
    set hitTestBehavior(value) {
      if (value == null) dart.nullFailed(I[0], 688, 51, "value");
      if (value != this[_hitTestBehavior$]) {
        this[_hitTestBehavior$] = value;
        if (this.owner != null) this.markNeedsPaint();
      }
    }
    [_updateGestureRecognizersWithCallBack](gestureRecognizers, handlePointerEvent) {
      let t1, t1$;
      if (gestureRecognizers == null) dart.nullFailed(I[0], 703, 89, "gestureRecognizers");
      if (handlePointerEvent == null) dart.nullFailed(I[0], 703, 129, "handlePointerEvent");
      if (!(gestureRecognizers != null)) dart.assertFailed(null, I[0], 704, 12, "gestureRecognizers != null");
      if (!(platform_view._factoriesTypeSet(recognizer.OneSequenceGestureRecognizer, gestureRecognizers)[$length] == gestureRecognizers[$length])) dart.assertFailed("There were multiple gesture recognizer factories for the same type, there must only be a single " + "gesture recognizer factory for each gesture recognizer type.", I[0], 706, 5, "_factoriesTypeSet(gestureRecognizers).length == gestureRecognizers.length");
      if (dart.test(platform_view._factoryTypesSetEquals(recognizer.OneSequenceGestureRecognizer, gestureRecognizers, (t1 = this[_gestureRecognizer$], t1 == null ? null : t1.gestureRecognizerFactories)))) {
        return;
      }
      t1$ = this[_gestureRecognizer$];
      t1$ == null ? null : t1$.dispose();
      this[_gestureRecognizer$] = new platform_view._PlatformViewGestureRecognizer.new(handlePointerEvent, gestureRecognizers);
      this[_handlePointerEvent$] = handlePointerEvent;
    }
    hitTest(result, opts) {
      if (result == null) dart.nullFailed(I[0], 720, 33, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[0], 720, 59, "position");
      if (this[_hitTestBehavior$] == platform_view.PlatformViewHitTestBehavior.transparent || !dart.test(this.size.contains(position))) {
        return false;
      }
      result.add(new box.BoxHitTestEntry.new(this, position));
      return this[_hitTestBehavior$] == platform_view.PlatformViewHitTestBehavior.opaque;
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[0], 729, 27, "position");
      return this[_hitTestBehavior$] != platform_view.PlatformViewHitTestBehavior.transparent;
    }
    get onEnter() {
      return null;
    }
    get onExit() {
      return null;
    }
    get cursor() {
      return mouse_cursor.MouseCursor.uncontrolled;
    }
    get validForMouseTracker() {
      return true;
    }
    handleEvent(event, entry) {
      let t1;
      if (event == null) dart.nullFailed(I[0], 744, 33, "event");
      hit_test.HitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[0], 744, 53, "entry");
      if (events.PointerDownEvent.is(event)) {
        dart.nullCheck(this[_gestureRecognizer$]).addPointer(event);
      }
      if (events.PointerHoverEvent.is(event)) {
        t1 = this[_handlePointerEvent$];
        t1 == null ? null : t1(event);
      }
    }
    detach() {
      dart.nullCheck(this[_gestureRecognizer$]).reset();
      super.detach();
    }
  };
  (platform_view._PlatformViewGestureMixin[dart.mixinNew] = function() {
    this[_hitTestBehavior] = null;
    this[_handlePointerEvent] = null;
    this[_gestureRecognizer] = null;
  }).prototype = platform_view._PlatformViewGestureMixin.prototype;
  dart.addTypeTests(platform_view._PlatformViewGestureMixin);
  dart.addTypeCaches(platform_view._PlatformViewGestureMixin);
  platform_view._PlatformViewGestureMixin[dart.implements] = () => [mouse_tracking.MouseTrackerAnnotation, box.RenderBox];
  dart.setMethodSignature(platform_view._PlatformViewGestureMixin, () => ({
    __proto__: dart.getMethods(platform_view._PlatformViewGestureMixin.__proto__),
    [_updateGestureRecognizersWithCallBack]: dart.fnType(dart.void, [core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)), dart.fnType(async.Future$(dart.void), [events.PointerEvent])])
  }));
  dart.setGetterSignature(platform_view._PlatformViewGestureMixin, () => ({
    __proto__: dart.getGetters(platform_view._PlatformViewGestureMixin.__proto__),
    onEnter: dart.nullable(dart.fnType(dart.void, [events.PointerEnterEvent])),
    onExit: dart.nullable(dart.fnType(dart.void, [events.PointerExitEvent])),
    cursor: mouse_cursor.MouseCursor,
    validForMouseTracker: core.bool
  }));
  dart.setSetterSignature(platform_view._PlatformViewGestureMixin, () => ({
    __proto__: dart.getSetters(platform_view._PlatformViewGestureMixin.__proto__),
    hitTestBehavior: platform_view.PlatformViewHitTestBehavior
  }));
  dart.setLibraryUri(platform_view._PlatformViewGestureMixin, I[1]);
  dart.setFieldSignature(platform_view._PlatformViewGestureMixin, () => ({
    __proto__: dart.getFields(platform_view._PlatformViewGestureMixin.__proto__),
    [_hitTestBehavior$]: dart.fieldType(dart.nullable(platform_view.PlatformViewHitTestBehavior)),
    [_handlePointerEvent$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.void), [events.PointerEvent]))),
    [_gestureRecognizer$]: dart.fieldType(dart.nullable(platform_view._PlatformViewGestureRecognizer))
  }));
  const RenderBox__PlatformViewGestureMixin$36 = class RenderBox__PlatformViewGestureMixin extends box.RenderBox {};
  (RenderBox__PlatformViewGestureMixin$36.new = function() {
    platform_view._PlatformViewGestureMixin[dart.mixinNew].call(this);
    RenderBox__PlatformViewGestureMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox__PlatformViewGestureMixin$36.prototype;
  dart.applyMixin(RenderBox__PlatformViewGestureMixin$36, platform_view._PlatformViewGestureMixin);
  platform_view.RenderAndroidView = class RenderAndroidView extends RenderBox__PlatformViewGestureMixin$36 {
    get viewcontroller() {
      return this[_viewController];
    }
    set viewController(viewController) {
      if (viewController == null) dart.nullFailed(I[0], 107, 44, "viewController");
      if (!(this[_viewController] != null)) dart.assertFailed(null, I[0], 108, 12, "_viewController != null");
      if (!(viewController != null)) dart.assertFailed(null, I[0], 109, 12, "viewController != null");
      if (dart.equals(this[_viewController], viewController)) return;
      this[_viewController].removeOnPlatformViewCreatedListener(dart.bind(this, _onPlatformViewCreated));
      this[_viewController] = viewController;
      this[_sizePlatformView]();
      if (dart.test(this[_viewController].isCreated)) {
        this.markNeedsSemanticsUpdate();
      }
      this[_viewController].addOnPlatformViewCreatedListener(dart.bind(this, _onPlatformViewCreated));
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (value == null) dart.nullFailed(I[0], 126, 25, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 127, 12, "value != null");
      if (value != this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    [_onPlatformViewCreated](id) {
      if (id == null) dart.nullFailed(I[0], 135, 35, "id");
      this.markNeedsSemanticsUpdate();
    }
    updateGestureRecognizers(gestureRecognizers) {
      if (gestureRecognizers == null) dart.nullFailed(I[0], 155, 76, "gestureRecognizers");
      this[_updateGestureRecognizersWithCallBack](gestureRecognizers, dart.bind(this[_viewController], 'dispatchPointerEvent'));
    }
    get sizedByParent() {
      return true;
    }
    get alwaysNeedsCompositing() {
      return true;
    }
    get isRepaintBoundary() {
      return true;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 169, 40, "constraints");
      return constraints.biggest;
    }
    performResize() {
      super.performResize();
      this[_sizePlatformView]();
    }
    get [_currentAndroidViewSize]() {
      let t0;
      return dart.test(this[__RenderAndroidView__currentAndroidViewSize_isSet]) ? (t0 = this[__RenderAndroidView__currentAndroidViewSize], t0) : dart.throw(new _internal.LateError.fieldNI("_currentAndroidViewSize"));
    }
    set [_currentAndroidViewSize](t0) {
      if (t0 == null) dart.nullFailed(I[0], 179, 13, "null");
      this[__RenderAndroidView__currentAndroidViewSize_isSet] = true;
      this[__RenderAndroidView__currentAndroidViewSize] = t0;
    }
    [_sizePlatformView]() {
      return async.async(dart.void, (function* _sizePlatformView() {
        if (this[_state] == platform_view._PlatformViewState.resizing || dart.test(this.size.isEmpty)) {
          return;
        }
        this[_state] = platform_view._PlatformViewState.resizing;
        this.markNeedsPaint();
        let targetSize = null;
        do {
          targetSize = this.size;
          yield this[_viewController].setSize(targetSize);
          this[_currentAndroidViewSize] = targetSize;
        } while (!dart.equals(this.size, targetSize));
        this[_state] = platform_view._PlatformViewState.ready;
        this.markNeedsPaint();
      }).bind(this));
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 207, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 207, 46, "offset");
      if (this[_viewController].textureId == null) return;
      if ((dart.notNull(this.size.width) < dart.notNull(this[_currentAndroidViewSize].width) || dart.notNull(this.size.height) < dart.notNull(this[_currentAndroidViewSize].height)) && this.clipBehavior != ui.Clip.none) {
        this[_clipRectLayer] = context.pushClipRect(true, offset, offset['&'](this.size), dart.bind(this, _paintTexture), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
        return;
      }
      this[_clipRectLayer] = null;
      this[_paintTexture](context, offset);
    }
    [_paintTexture](context, offset) {
      if (context == null) dart.nullFailed(I[0], 224, 38, "context");
      if (offset == null) dart.nullFailed(I[0], 224, 54, "offset");
      context.addLayer(new layer.TextureLayer.new({rect: offset['&'](this[_currentAndroidViewSize]), textureId: dart.nullCheck(this[_viewController].textureId), freeze: this[_state] == platform_view._PlatformViewState.resizing}));
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(I[0], 242, 63, "config");
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = true;
      if (dart.test(this[_viewController].isCreated)) {
        config.platformViewId = this[_viewController].viewId;
      }
    }
  };
  (platform_view.RenderAndroidView.new = function(opts) {
    let viewController = opts && 'viewController' in opts ? opts.viewController : null;
    if (viewController == null) dart.nullFailed(I[0], 83, 36, "viewController");
    let hitTestBehavior = opts && 'hitTestBehavior' in opts ? opts.hitTestBehavior : null;
    if (hitTestBehavior == null) dart.nullFailed(I[0], 84, 42, "hitTestBehavior");
    let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : null;
    if (gestureRecognizers == null) dart.nullFailed(I[0], 85, 57, "gestureRecognizers");
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[8] || CT.C8;
    if (clipBehavior == null) dart.nullFailed(I[0], 86, 10, "clipBehavior");
    this[_state] = platform_view._PlatformViewState.uninitialized;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[__RenderAndroidView__currentAndroidViewSize] = null;
    this[__RenderAndroidView__currentAndroidViewSize_isSet] = false;
    this[_clipRectLayer] = null;
    if (!(viewController != null)) dart.assertFailed(null, I[0], 87, 15, "viewController != null");
    if (!(hitTestBehavior != null)) dart.assertFailed(null, I[0], 88, 15, "hitTestBehavior != null");
    if (!(gestureRecognizers != null)) dart.assertFailed(null, I[0], 89, 15, "gestureRecognizers != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[0], 90, 15, "clipBehavior != null");
    this[_viewController] = viewController;
    this[_clipBehavior] = clipBehavior;
    platform_view.RenderAndroidView.__proto__.new.call(this);
    this[_viewController].pointTransformer = dart.fn(offset => {
      if (offset == null) dart.nullFailed(I[0], 93, 48, "offset");
      return this.globalToLocal(offset);
    }, T.OffsetToOffset());
    this.updateGestureRecognizers(gestureRecognizers);
    this[_viewController].addOnPlatformViewCreatedListener(dart.bind(this, _onPlatformViewCreated));
    this.hitTestBehavior = hitTestBehavior;
  }).prototype = platform_view.RenderAndroidView.prototype;
  dart.addTypeTests(platform_view.RenderAndroidView);
  dart.addTypeCaches(platform_view.RenderAndroidView);
  dart.setMethodSignature(platform_view.RenderAndroidView, () => ({
    __proto__: dart.getMethods(platform_view.RenderAndroidView.__proto__),
    [_onPlatformViewCreated]: dart.fnType(dart.void, [core.int]),
    updateGestureRecognizers: dart.fnType(dart.void, [core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))]),
    [_sizePlatformView]: dart.fnType(async.Future$(dart.void), []),
    [_paintTexture]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset])
  }));
  dart.setGetterSignature(platform_view.RenderAndroidView, () => ({
    __proto__: dart.getGetters(platform_view.RenderAndroidView.__proto__),
    viewcontroller: platform_views.AndroidViewController,
    clipBehavior: ui.Clip,
    [_currentAndroidViewSize]: ui.Size
  }));
  dart.setSetterSignature(platform_view.RenderAndroidView, () => ({
    __proto__: dart.getSetters(platform_view.RenderAndroidView.__proto__),
    viewController: platform_views.AndroidViewController,
    clipBehavior: ui.Clip,
    [_currentAndroidViewSize]: ui.Size
  }));
  dart.setLibraryUri(platform_view.RenderAndroidView, I[1]);
  dart.setFieldSignature(platform_view.RenderAndroidView, () => ({
    __proto__: dart.getFields(platform_view.RenderAndroidView.__proto__),
    [_state]: dart.fieldType(platform_view._PlatformViewState),
    [_viewController]: dart.fieldType(platform_views.AndroidViewController),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [__RenderAndroidView__currentAndroidViewSize]: dart.fieldType(dart.nullable(ui.Size)),
    [__RenderAndroidView__currentAndroidViewSize_isSet]: dart.fieldType(core.bool),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  var hitTestBehavior$ = dart.privateName(platform_view, "RenderUiKitView.hitTestBehavior");
  var _lastPointerDownEvent = dart.privateName(platform_view, "_lastPointerDownEvent");
  var _handleGlobalPointerEvent = dart.privateName(platform_view, "_handleGlobalPointerEvent");
  platform_view.RenderUiKitView = class RenderUiKitView extends box.RenderBox {
    get hitTestBehavior() {
      return this[hitTestBehavior$];
    }
    set hitTestBehavior(value) {
      this[hitTestBehavior$] = value;
    }
    get viewController() {
      return this[_viewController];
    }
    set viewController(viewController) {
      if (viewController == null) dart.nullFailed(I[0], 297, 42, "viewController");
      if (!(viewController != null)) dart.assertFailed(null, I[0], 298, 12, "viewController != null");
      let needsSemanticsUpdate = this[_viewController].id != viewController.id;
      this[_viewController] = viewController;
      this.markNeedsPaint();
      if (needsSemanticsUpdate) {
        this.markNeedsSemanticsUpdate();
      }
    }
    updateGestureRecognizers(gestureRecognizers) {
      let t1, t1$;
      if (gestureRecognizers == null) dart.nullFailed(I[0], 313, 76, "gestureRecognizers");
      if (!(gestureRecognizers != null)) dart.assertFailed(null, I[0], 314, 12, "gestureRecognizers != null");
      if (!(platform_view._factoriesTypeSet(recognizer.OneSequenceGestureRecognizer, gestureRecognizers)[$length] == gestureRecognizers[$length])) dart.assertFailed("There were multiple gesture recognizer factories for the same type, there must only be a single " + "gesture recognizer factory for each gesture recognizer type.", I[0], 316, 5, "_factoriesTypeSet(gestureRecognizers).length == gestureRecognizers.length");
      if (dart.test(platform_view._factoryTypesSetEquals(recognizer.OneSequenceGestureRecognizer, gestureRecognizers, (t1 = this[_gestureRecognizer$], t1 == null ? null : t1.gestureRecognizerFactories)))) {
        return;
      }
      t1$ = this[_gestureRecognizer$];
      t1$ == null ? null : t1$.dispose();
      this[_gestureRecognizer$] = new platform_view._UiKitViewGestureRecognizer.new(this.viewController, gestureRecognizers);
    }
    get sizedByParent() {
      return true;
    }
    get alwaysNeedsCompositing() {
      return true;
    }
    get isRepaintBoundary() {
      return true;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 340, 40, "constraints");
      return constraints.biggest;
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 345, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 345, 46, "offset");
      context.addLayer(new layer.PlatformViewLayer.new({rect: offset['&'](this.size), viewId: this[_viewController].id}));
    }
    hitTest(result, opts) {
      if (result == null) dart.nullFailed(I[0], 353, 33, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (this.hitTestBehavior == platform_view.PlatformViewHitTestBehavior.transparent || !dart.test(this.size.contains(dart.nullCheck(position)))) return false;
      result.add(new box.BoxHitTestEntry.new(this, position));
      return this.hitTestBehavior == platform_view.PlatformViewHitTestBehavior.opaque;
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[0], 361, 27, "position");
      return this.hitTestBehavior != platform_view.PlatformViewHitTestBehavior.transparent;
    }
    handleEvent(event, entry) {
      let t1;
      if (event == null) dart.nullFailed(I[0], 364, 33, "event");
      hit_test.HitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[0], 364, 53, "entry");
      if (!events.PointerDownEvent.is(event)) {
        return;
      }
      dart.nullCheck(this[_gestureRecognizer$]).addPointer(event);
      this[_lastPointerDownEvent] = (t1 = event.original, t1 == null ? event : t1);
    }
    [_handleGlobalPointerEvent](event) {
      let t1;
      if (event == null) dart.nullFailed(I[0], 373, 47, "event");
      if (!events.PointerDownEvent.is(event)) {
        return;
      }
      if (!dart.test(ui.Offset.zero['&'](this.size).contains(this.globalToLocal(event.position)))) {
        return;
      }
      if (!dart.equals((t1 = event.original, t1 == null ? event : t1), this[_lastPointerDownEvent])) {
        this[_viewController].rejectGesture();
      }
      this[_lastPointerDownEvent] = null;
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(I[0], 391, 63, "config");
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = true;
      config.platformViewId = this[_viewController].id;
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[0], 398, 29, "owner");
      super.attach(owner);
      dart.nullCheck(binding.GestureBinding.instance).pointerRouter.addGlobalRoute(dart.bind(this, _handleGlobalPointerEvent));
    }
    detach() {
      dart.nullCheck(binding.GestureBinding.instance).pointerRouter.removeGlobalRoute(dart.bind(this, _handleGlobalPointerEvent));
      dart.nullCheck(this[_gestureRecognizer$]).reset();
      super.detach();
    }
  };
  (platform_view.RenderUiKitView.new = function(opts) {
    let viewController = opts && 'viewController' in opts ? opts.viewController : null;
    if (viewController == null) dart.nullFailed(I[0], 280, 34, "viewController");
    let hitTestBehavior = opts && 'hitTestBehavior' in opts ? opts.hitTestBehavior : null;
    if (hitTestBehavior == null) dart.nullFailed(I[0], 281, 19, "hitTestBehavior");
    let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : null;
    if (gestureRecognizers == null) dart.nullFailed(I[0], 282, 57, "gestureRecognizers");
    this[_gestureRecognizer$] = null;
    this[_lastPointerDownEvent] = null;
    this[hitTestBehavior$] = hitTestBehavior;
    if (!(viewController != null)) dart.assertFailed(null, I[0], 283, 15, "viewController != null");
    if (!(hitTestBehavior != null)) dart.assertFailed(null, I[0], 284, 15, "hitTestBehavior != null");
    if (!(gestureRecognizers != null)) dart.assertFailed(null, I[0], 285, 15, "gestureRecognizers != null");
    this[_viewController] = viewController;
    platform_view.RenderUiKitView.__proto__.new.call(this);
    this.updateGestureRecognizers(gestureRecognizers);
  }).prototype = platform_view.RenderUiKitView.prototype;
  dart.addTypeTests(platform_view.RenderUiKitView);
  dart.addTypeCaches(platform_view.RenderUiKitView);
  dart.setMethodSignature(platform_view.RenderUiKitView, () => ({
    __proto__: dart.getMethods(platform_view.RenderUiKitView.__proto__),
    updateGestureRecognizers: dart.fnType(dart.void, [core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))]),
    hitTest: dart.fnType(core.bool, [box.BoxHitTestResult], {position: dart.nullable(ui.Offset)}, {}),
    [_handleGlobalPointerEvent]: dart.fnType(dart.void, [events.PointerEvent])
  }));
  dart.setGetterSignature(platform_view.RenderUiKitView, () => ({
    __proto__: dart.getGetters(platform_view.RenderUiKitView.__proto__),
    viewController: platform_views.UiKitViewController
  }));
  dart.setSetterSignature(platform_view.RenderUiKitView, () => ({
    __proto__: dart.getSetters(platform_view.RenderUiKitView.__proto__),
    viewController: platform_views.UiKitViewController
  }));
  dart.setLibraryUri(platform_view.RenderUiKitView, I[1]);
  dart.setFieldSignature(platform_view.RenderUiKitView, () => ({
    __proto__: dart.getFields(platform_view.RenderUiKitView.__proto__),
    [_viewController]: dart.fieldType(platform_views.UiKitViewController),
    hitTestBehavior: dart.fieldType(platform_view.PlatformViewHitTestBehavior),
    [_gestureRecognizer$]: dart.fieldType(dart.nullable(platform_view._UiKitViewGestureRecognizer)),
    [_lastPointerDownEvent]: dart.fieldType(dart.nullable(events.PointerEvent))
  }));
  var ___UiKitViewGestureRecognizer__gestureRecognizers = dart.privateName(platform_view, "_#_UiKitViewGestureRecognizer#_gestureRecognizers");
  var ___UiKitViewGestureRecognizer__gestureRecognizers_isSet = dart.privateName(platform_view, "_#_UiKitViewGestureRecognizer#_gestureRecognizers#isSet");
  var _gestureRecognizers = dart.privateName(platform_view, "_gestureRecognizers");
  platform_view._UiKitViewGestureRecognizer = class _UiKitViewGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get [_gestureRecognizers]() {
      let t1;
      return dart.test(this[___UiKitViewGestureRecognizer__gestureRecognizers_isSet]) ? (t1 = this[___UiKitViewGestureRecognizer__gestureRecognizers], t1) : dart.throw(new _internal.LateError.fieldNI("_gestureRecognizers"));
    }
    set [_gestureRecognizers](t1) {
      if (t1 == null) dart.nullFailed(I[0], 448, 42, "null");
      this[___UiKitViewGestureRecognizer__gestureRecognizers_isSet] = true;
      this[___UiKitViewGestureRecognizer__gestureRecognizers] = t1;
    }
    addAllowedPointer(event) {
      if (event == null) dart.nullFailed(I[0], 453, 43, "event");
      this.startTrackingPointer(event.pointer, event.transform);
      for (let recognizer of this[_gestureRecognizers]) {
        recognizer.addPointer(event);
      }
    }
    get debugDescription() {
      return "UIKit view";
    }
    didStopTrackingLastPointer(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 464, 39, "pointer");
    }
    handleEvent(event) {
      if (event == null) dart.nullFailed(I[0], 467, 33, "event");
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 472, 26, "pointer");
      this.controller.acceptGesture();
    }
    rejectGesture(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 477, 26, "pointer");
      this.controller.rejectGesture();
    }
    reset() {
      this.resolve(arena.GestureDisposition.rejected);
    }
  };
  (platform_view._UiKitViewGestureRecognizer.new = function(controller, gestureRecognizerFactories, opts) {
    let t1;
    if (controller == null) dart.nullFailed(I[0], 418, 10, "controller");
    if (gestureRecognizerFactories == null) dart.nullFailed(I[0], 419, 10, "gestureRecognizerFactories");
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[___UiKitViewGestureRecognizer__gestureRecognizers] = null;
    this[___UiKitViewGestureRecognizer__gestureRecognizers_isSet] = false;
    this.controller = controller;
    this.gestureRecognizerFactories = gestureRecognizerFactories;
    platform_view._UiKitViewGestureRecognizer.__proto__.new.call(this, {kind: kind});
    this.team = (t1 = new team.GestureArenaTeam.new(), (() => {
      t1.captain = this;
      return t1;
    })());
    this[_gestureRecognizers] = this.gestureRecognizerFactories[$map](recognizer.OneSequenceGestureRecognizer, dart.fn(recognizerFactory => {
      let t1, t1$, t1$0;
      if (recognizerFactory == null) dart.nullFailed(I[0], 425, 46, "recognizerFactory");
      let gestureRecognizer = recognizerFactory._constructor();
      gestureRecognizer.team = this.team;
      if (long_press.LongPressGestureRecognizer.is(gestureRecognizer)) {
        t1 = gestureRecognizer;
        t1.onLongPress == null ? t1.onLongPress = dart.fn(() => {
        }, T.VoidTovoid()) : null;
      } else if (monodrag.DragGestureRecognizer.is(gestureRecognizer)) {
        t1$ = gestureRecognizer;
        t1$.onDown == null ? t1$.onDown = dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[0], 434, 41, "_");
        }, T.DragDownDetailsTovoid()) : null;
      } else if (tap.TapGestureRecognizer.is(gestureRecognizer)) {
        t1$0 = gestureRecognizer;
        t1$0.onTapDown == null ? t1$0.onTapDown = dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[0], 436, 44, "_");
        }, T.TapDownDetailsTovoid()) : null;
      }
      return gestureRecognizer;
    }, T.FactoryOfOneSequenceGestureRecognizerToOneSequenceGestureRecognizer()))[$toSet]();
  }).prototype = platform_view._UiKitViewGestureRecognizer.prototype;
  dart.addTypeTests(platform_view._UiKitViewGestureRecognizer);
  dart.addTypeCaches(platform_view._UiKitViewGestureRecognizer);
  dart.setMethodSignature(platform_view._UiKitViewGestureRecognizer, () => ({
    __proto__: dart.getMethods(platform_view._UiKitViewGestureRecognizer.__proto__),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    reset: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(platform_view._UiKitViewGestureRecognizer, () => ({
    __proto__: dart.getGetters(platform_view._UiKitViewGestureRecognizer.__proto__),
    [_gestureRecognizers]: core.Set$(recognizer.OneSequenceGestureRecognizer),
    debugDescription: core.String
  }));
  dart.setSetterSignature(platform_view._UiKitViewGestureRecognizer, () => ({
    __proto__: dart.getSetters(platform_view._UiKitViewGestureRecognizer.__proto__),
    [_gestureRecognizers]: core.Set$(recognizer.OneSequenceGestureRecognizer)
  }));
  dart.setLibraryUri(platform_view._UiKitViewGestureRecognizer, I[1]);
  dart.setFieldSignature(platform_view._UiKitViewGestureRecognizer, () => ({
    __proto__: dart.getFields(platform_view._UiKitViewGestureRecognizer.__proto__),
    gestureRecognizerFactories: dart.finalFieldType(core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))),
    [___UiKitViewGestureRecognizer__gestureRecognizers]: dart.fieldType(dart.nullable(core.Set$(recognizer.OneSequenceGestureRecognizer))),
    [___UiKitViewGestureRecognizer__gestureRecognizers_isSet]: dart.fieldType(core.bool),
    controller: dart.finalFieldType(platform_views.UiKitViewController)
  }));
  var ___PlatformViewGestureRecognizer__handlePointerEvent = dart.privateName(platform_view, "_#_PlatformViewGestureRecognizer#_handlePointerEvent");
  var ___PlatformViewGestureRecognizer__handlePointerEvent_isSet = dart.privateName(platform_view, "_#_PlatformViewGestureRecognizer#_handlePointerEvent#isSet");
  var ___PlatformViewGestureRecognizer__gestureRecognizers = dart.privateName(platform_view, "_#_PlatformViewGestureRecognizer#_gestureRecognizers");
  var ___PlatformViewGestureRecognizer__gestureRecognizers_isSet = dart.privateName(platform_view, "_#_PlatformViewGestureRecognizer#_gestureRecognizers#isSet");
  var _cacheEvent = dart.privateName(platform_view, "_cacheEvent");
  var _flushPointerCache = dart.privateName(platform_view, "_flushPointerCache");
  platform_view._PlatformViewGestureRecognizer = class _PlatformViewGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get [_handlePointerEvent$]() {
      let t2;
      return dart.test(this[___PlatformViewGestureRecognizer__handlePointerEvent_isSet]) ? (t2 = this[___PlatformViewGestureRecognizer__handlePointerEvent], t2) : dart.throw(new _internal.LateError.fieldNI("_handlePointerEvent"));
    }
    set [_handlePointerEvent$](t2) {
      if (t2 == null) dart.nullFailed(I[0], 522, 28, "null");
      this[___PlatformViewGestureRecognizer__handlePointerEvent_isSet] = true;
      this[___PlatformViewGestureRecognizer__handlePointerEvent] = t2;
    }
    get [_gestureRecognizers]() {
      let t3;
      return dart.test(this[___PlatformViewGestureRecognizer__gestureRecognizers_isSet]) ? (t3 = this[___PlatformViewGestureRecognizer__gestureRecognizers], t3) : dart.throw(new _internal.LateError.fieldNI("_gestureRecognizers"));
    }
    set [_gestureRecognizers](t3) {
      if (t3 == null) dart.nullFailed(I[0], 538, 42, "null");
      this[___PlatformViewGestureRecognizer__gestureRecognizers_isSet] = true;
      this[___PlatformViewGestureRecognizer__gestureRecognizers] = t3;
    }
    addAllowedPointer(event) {
      if (event == null) dart.nullFailed(I[0], 541, 43, "event");
      this.startTrackingPointer(event.pointer, event.transform);
      for (let recognizer of this[_gestureRecognizers]) {
        recognizer.addPointer(event);
      }
    }
    get debugDescription() {
      return "Platform view";
    }
    didStopTrackingLastPointer(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 552, 39, "pointer");
    }
    handleEvent(event) {
      let t4;
      if (event == null) dart.nullFailed(I[0], 555, 33, "event");
      if (!dart.test(this.forwardedPointers.contains(event.pointer))) {
        this[_cacheEvent](event);
      } else {
        t4 = event;
        this[_handlePointerEvent$](t4);
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 565, 26, "pointer");
      this[_flushPointerCache](pointer);
      this.forwardedPointers.add(pointer);
    }
    rejectGesture(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 571, 26, "pointer");
      this.stopTrackingPointer(pointer);
      this.cachedEvents[$remove](pointer);
    }
    [_cacheEvent](event) {
      if (event == null) dart.nullFailed(I[0], 576, 33, "event");
      if (!dart.test(this.cachedEvents[$containsKey](event.pointer))) {
        this.cachedEvents[$_set](event.pointer, T.JSArrayOfPointerEvent().of([]));
      }
      dart.nullCheck(this.cachedEvents[$_get](event.pointer))[$add](event);
    }
    [_flushPointerCache](pointer) {
      let t4;
      if (pointer == null) dart.nullFailed(I[0], 583, 31, "pointer");
      t4 = this.cachedEvents[$remove](pointer);
      t4 == null ? null : t4[$forEach](this[_handlePointerEvent$]);
    }
    stopTrackingPointer(pointer) {
      if (pointer == null) dart.nullFailed(I[0], 588, 32, "pointer");
      super.stopTrackingPointer(pointer);
      this.forwardedPointers.remove(pointer);
    }
    reset() {
      this.forwardedPointers[$forEach](dart.bind(this, 'stopTrackingPointer', super.stopTrackingPointer));
      this.forwardedPointers.clear();
      this.cachedEvents[$keys][$forEach](dart.bind(this, 'stopTrackingPointer', super.stopTrackingPointer));
      this.cachedEvents[$clear]();
      this.resolve(arena.GestureDisposition.rejected);
    }
  };
  (platform_view._PlatformViewGestureRecognizer.new = function(handlePointerEvent, gestureRecognizerFactories, opts) {
    let t2;
    if (handlePointerEvent == null) dart.nullFailed(I[0], 496, 25, "handlePointerEvent");
    if (gestureRecognizerFactories == null) dart.nullFailed(I[0], 497, 10, "gestureRecognizerFactories");
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[___PlatformViewGestureRecognizer__handlePointerEvent] = null;
    this[___PlatformViewGestureRecognizer__handlePointerEvent_isSet] = false;
    this.cachedEvents = new (T.IdentityMapOfint$ListOfPointerEvent()).new();
    this.forwardedPointers = T.LinkedHashSetOfint().new();
    this[___PlatformViewGestureRecognizer__gestureRecognizers] = null;
    this[___PlatformViewGestureRecognizer__gestureRecognizers_isSet] = false;
    this.gestureRecognizerFactories = gestureRecognizerFactories;
    platform_view._PlatformViewGestureRecognizer.__proto__.new.call(this, {kind: kind});
    this.team = (t2 = new team.GestureArenaTeam.new(), (() => {
      t2.captain = this;
      return t2;
    })());
    this[_gestureRecognizers] = this.gestureRecognizerFactories[$map](recognizer.OneSequenceGestureRecognizer, dart.fn(recognizerFactory => {
      let t2, t2$, t2$0;
      if (recognizerFactory == null) dart.nullFailed(I[0], 503, 46, "recognizerFactory");
      let gestureRecognizer = recognizerFactory._constructor();
      gestureRecognizer.team = this.team;
      if (long_press.LongPressGestureRecognizer.is(gestureRecognizer)) {
        t2 = gestureRecognizer;
        t2.onLongPress == null ? t2.onLongPress = dart.fn(() => {
        }, T.VoidTovoid()) : null;
      } else if (monodrag.DragGestureRecognizer.is(gestureRecognizer)) {
        t2$ = gestureRecognizer;
        t2$.onDown == null ? t2$.onDown = dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[0], 512, 41, "_");
        }, T.DragDownDetailsTovoid()) : null;
      } else if (tap.TapGestureRecognizer.is(gestureRecognizer)) {
        t2$0 = gestureRecognizer;
        t2$0.onTapDown == null ? t2$0.onTapDown = dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[0], 514, 44, "_");
        }, T.TapDownDetailsTovoid()) : null;
      }
      return gestureRecognizer;
    }, T.FactoryOfOneSequenceGestureRecognizerToOneSequenceGestureRecognizer()))[$toSet]();
    this[_handlePointerEvent$] = handlePointerEvent;
  }).prototype = platform_view._PlatformViewGestureRecognizer.prototype;
  dart.addTypeTests(platform_view._PlatformViewGestureRecognizer);
  dart.addTypeCaches(platform_view._PlatformViewGestureRecognizer);
  dart.setMethodSignature(platform_view._PlatformViewGestureRecognizer, () => ({
    __proto__: dart.getMethods(platform_view._PlatformViewGestureRecognizer.__proto__),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    [_cacheEvent]: dart.fnType(dart.void, [events.PointerEvent]),
    [_flushPointerCache]: dart.fnType(dart.void, [core.int]),
    reset: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(platform_view._PlatformViewGestureRecognizer, () => ({
    __proto__: dart.getGetters(platform_view._PlatformViewGestureRecognizer.__proto__),
    [_handlePointerEvent$]: dart.fnType(async.Future$(dart.void), [events.PointerEvent]),
    [_gestureRecognizers]: core.Set$(recognizer.OneSequenceGestureRecognizer),
    debugDescription: core.String
  }));
  dart.setSetterSignature(platform_view._PlatformViewGestureRecognizer, () => ({
    __proto__: dart.getSetters(platform_view._PlatformViewGestureRecognizer.__proto__),
    [_handlePointerEvent$]: dart.fnType(async.Future$(dart.void), [events.PointerEvent]),
    [_gestureRecognizers]: core.Set$(recognizer.OneSequenceGestureRecognizer)
  }));
  dart.setLibraryUri(platform_view._PlatformViewGestureRecognizer, I[1]);
  dart.setFieldSignature(platform_view._PlatformViewGestureRecognizer, () => ({
    __proto__: dart.getFields(platform_view._PlatformViewGestureRecognizer.__proto__),
    [___PlatformViewGestureRecognizer__handlePointerEvent]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.void), [events.PointerEvent]))),
    [___PlatformViewGestureRecognizer__handlePointerEvent_isSet]: dart.fieldType(core.bool),
    cachedEvents: dart.finalFieldType(core.Map$(core.int, core.List$(events.PointerEvent))),
    forwardedPointers: dart.finalFieldType(core.Set$(core.int)),
    gestureRecognizerFactories: dart.finalFieldType(core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))),
    [___PlatformViewGestureRecognizer__gestureRecognizers]: dart.fieldType(dart.nullable(core.Set$(recognizer.OneSequenceGestureRecognizer))),
    [___PlatformViewGestureRecognizer__gestureRecognizers_isSet]: dart.fieldType(core.bool)
  }));
  var _controller = dart.privateName(platform_view, "_controller");
  const RenderBox__PlatformViewGestureMixin$36$ = class RenderBox__PlatformViewGestureMixin extends box.RenderBox {};
  (RenderBox__PlatformViewGestureMixin$36$.new = function() {
    platform_view._PlatformViewGestureMixin[dart.mixinNew].call(this);
    RenderBox__PlatformViewGestureMixin$36$.__proto__.new.call(this);
  }).prototype = RenderBox__PlatformViewGestureMixin$36$.prototype;
  dart.applyMixin(RenderBox__PlatformViewGestureMixin$36$, platform_view._PlatformViewGestureMixin);
  platform_view.PlatformViewRenderBox = class PlatformViewRenderBox extends RenderBox__PlatformViewGestureMixin$36$ {
    set controller(controller) {
      if (controller == null) dart.nullFailed(I[0], 626, 41, "controller");
      if (!(controller != null)) dart.assertFailed(null, I[0], 627, 12, "controller != null");
      if (!(controller.viewId != null && dart.notNull(controller.viewId) > -1)) dart.assertFailed(null, I[0], 628, 12, "controller.viewId != null && controller.viewId > -1");
      if (dart.equals(this[_controller], controller)) {
        return;
      }
      let needsSemanticsUpdate = this[_controller].viewId != controller.viewId;
      this[_controller] = controller;
      this.markNeedsPaint();
      if (needsSemanticsUpdate) {
        this.markNeedsSemanticsUpdate();
      }
    }
    updateGestureRecognizers(gestureRecognizers) {
      if (gestureRecognizers == null) dart.nullFailed(I[0], 645, 76, "gestureRecognizers");
      this[_updateGestureRecognizersWithCallBack](gestureRecognizers, dart.bind(this[_controller], 'dispatchPointerEvent'));
    }
    get sizedByParent() {
      return true;
    }
    get alwaysNeedsCompositing() {
      return true;
    }
    get isRepaintBoundary() {
      return true;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 661, 40, "constraints");
      return constraints.biggest;
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 666, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 666, 46, "offset");
      if (!(this[_controller].viewId != null)) dart.assertFailed(null, I[0], 667, 12, "_controller.viewId != null");
      context.addLayer(new layer.PlatformViewLayer.new({rect: offset['&'](this.size), viewId: this[_controller].viewId}));
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(I[0], 675, 63, "config");
      super.describeSemanticsConfiguration(config);
      if (!(this[_controller].viewId != null)) dart.assertFailed(null, I[0], 677, 12, "_controller.viewId != null");
      config.isSemanticBoundary = true;
      config.platformViewId = this[_controller].viewId;
    }
  };
  (platform_view.PlatformViewRenderBox.new = function(opts) {
    let controller = opts && 'controller' in opts ? opts.controller : null;
    if (controller == null) dart.nullFailed(I[0], 612, 37, "controller");
    let hitTestBehavior = opts && 'hitTestBehavior' in opts ? opts.hitTestBehavior : null;
    if (hitTestBehavior == null) dart.nullFailed(I[0], 613, 42, "hitTestBehavior");
    let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : null;
    if (gestureRecognizers == null) dart.nullFailed(I[0], 614, 57, "gestureRecognizers");
    if (!(controller != null && controller.viewId != null && dart.notNull(controller.viewId) > -1)) dart.assertFailed(null, I[0], 615, 16, "controller != null && controller.viewId != null && controller.viewId > -1");
    if (!(hitTestBehavior != null)) dart.assertFailed(null, I[0], 616, 16, "hitTestBehavior != null");
    if (!(gestureRecognizers != null)) dart.assertFailed(null, I[0], 617, 16, "gestureRecognizers != null");
    this[_controller] = controller;
    platform_view.PlatformViewRenderBox.__proto__.new.call(this);
    this.hitTestBehavior = hitTestBehavior;
    this.updateGestureRecognizers(gestureRecognizers);
  }).prototype = platform_view.PlatformViewRenderBox.prototype;
  dart.addTypeTests(platform_view.PlatformViewRenderBox);
  dart.addTypeCaches(platform_view.PlatformViewRenderBox);
  dart.setMethodSignature(platform_view.PlatformViewRenderBox, () => ({
    __proto__: dart.getMethods(platform_view.PlatformViewRenderBox.__proto__),
    updateGestureRecognizers: dart.fnType(dart.void, [core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))])
  }));
  dart.setSetterSignature(platform_view.PlatformViewRenderBox, () => ({
    __proto__: dart.getSetters(platform_view.PlatformViewRenderBox.__proto__),
    controller: platform_views.PlatformViewController
  }));
  dart.setLibraryUri(platform_view.PlatformViewRenderBox, I[1]);
  dart.setFieldSignature(platform_view.PlatformViewRenderBox, () => ({
    __proto__: dart.getFields(platform_view.PlatformViewRenderBox.__proto__),
    [_controller]: dart.fieldType(platform_views.PlatformViewController)
  }));
  platform_view._factoryTypesSetEquals = function _factoryTypesSetEquals(T, a, b) {
    if (dart.equals(a, b)) {
      return true;
    }
    if (a == null || b == null) {
      return false;
    }
    return collections.setEquals(core.Type, platform_view._factoriesTypeSet(T, a), platform_view._factoriesTypeSet(T, b));
  };
  platform_view._factoriesTypeSet = function _factoriesTypeSet(T, factories) {
    if (factories == null) dart.nullFailed(I[0], 51, 48, "factories");
    return factories[$map](core.Type, dart.fn(factory => {
      if (factory == null) dart.nullFailed(I[0], 52, 42, "factory");
      return factory.type;
    }, dart.fnType(core.Type, [basic_types.Factory$(T)])))[$toSet]();
  };
  dart.trackLibraries("packages/flutter/src/rendering/platform_view.dart", {
    "package:flutter/src/rendering/platform_view.dart": platform_view
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["platform_view.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../Z:/packages/flutter/src/rendering/platform_view.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__platform_view: platform_view
  };
}));

//# sourceMappingURL=platform_view.dart.lib.js.map
