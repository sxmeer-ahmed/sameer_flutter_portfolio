define(['dart_sdk', 'packages/flutter_wgl/src/core/lib.dart', 'packages/flutter_wgl/src/shader/lib.dart', 'packages/vector_math/vector_math.dart', 'packages/flutter_wgl/src/misc/lib.dart', 'packages/flutter_wgl/src/webhelper/lib.dart'], (function load__packages__portefeuille__webgl_animation_dart(dart_sdk, packages__flutter_wgl__src__core__lib$46dart, packages__flutter_wgl__src__shader__lib$46dart, packages__vector_math__vector_math$46dart, packages__flutter_wgl__src__misc__lib$46dart, packages__flutter_wgl__src__webhelper__lib$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const html = dart_sdk.html;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const lib = packages__flutter_wgl__src__core__lib$46dart.src__core__lib;
  const lib$ = packages__flutter_wgl__src__shader__lib$46dart.src__shader__lib;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  const lib$0 = packages__flutter_wgl__src__misc__lib$46dart.src__misc__lib;
  const lib$1 = packages__flutter_wgl__src__webhelper__lib$46dart.src__webhelper__lib;
  var webgl_animation = Object.create(dart.library);
  var $setAll = dartx.setAll;
  var $context2D = dartx.context2D;
  var $getImageData = dartx.getImageData;
  var $length = dartx.length;
  var $_set = dartx._set;
  var $putImageData = dartx.putImageData;
  var $animationFrame = dartx.animationFrame;
  var $addAll = dartx.addAll;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    JSArrayOfdoubleL: () => (T.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T.doubleL())))(),
    CanvasElementL: () => (T.CanvasElementL = dart.constFn(dart.legacy(html.CanvasElement)))(),
    UniformGroupL: () => (T.UniformGroupL = dart.constFn(dart.legacy(lib.UniformGroup)))(),
    JSArrayOfUniformGroupL: () => (T.JSArrayOfUniformGroupL = dart.constFn(_interceptors.JSArray$(T.UniformGroupL())))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))(),
    numLTovoid: () => (T.numLTovoid = dart.constFn(dart.fnType(dart.void, [T.numL()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = ["package:portefeuille/webgl_animation.dart"];
  var instancedVertexShader = dart.privateName(webgl_animation, "WGLAnimation.instancedVertexShader");
  var instancedFragmentShader = dart.privateName(webgl_animation, "WGLAnimation.instancedFragmentShader");
  var preparationVertexShader = dart.privateName(webgl_animation, "WGLAnimation.preparationVertexShader");
  var preparationFragmentShader = dart.privateName(webgl_animation, "WGLAnimation.preparationFragmentShader");
  var dirLight = dart.privateName(webgl_animation, "WGLAnimation.dirLight");
  webgl_animation.WGLAnimation = class WGLAnimation extends core.Object {
    get instancedVertexShader() {
      return this[instancedVertexShader];
    }
    set instancedVertexShader(value) {
      super.instancedVertexShader = value;
    }
    get instancedFragmentShader() {
      return this[instancedFragmentShader];
    }
    set instancedFragmentShader(value) {
      super.instancedFragmentShader = value;
    }
    get preparationVertexShader() {
      return this[preparationVertexShader];
    }
    set preparationVertexShader(value) {
      super.preparationVertexShader = value;
    }
    get preparationFragmentShader() {
      return this[preparationFragmentShader];
    }
    set preparationFragmentShader(value) {
      super.preparationFragmentShader = value;
    }
    get dirLight() {
      return this[dirLight];
    }
    set dirLight(value) {
      super.dirLight = value;
    }
    static get instance() {
      return webgl_animation.WGLAnimation._instance;
    }
    addInstanceData(md, rand, count) {
      let scales = _native_typed_data.NativeFloat32List.new(dart.notNull(count) * 1);
      let translations = _native_typed_data.NativeFloat32List.new(dart.notNull(count) * 3);
      let rotations = _native_typed_data.NativeFloat32List.new(dart.notNull(count) * 4);
      for (let i = 0; i < dart.notNull(count); i = i + 1) {
        let t = vector_math.Vector3.random(rand)['-'](vector_math.Vector3.new(0.5, 0.5, 0.5));
        t.scale(60.0);
        translations[$setAll](i * 3, t.storage);
        let u = vector_math.Vector3.random(rand);
        let q = vector_math.Quaternion.axisAngle(u, 2.0 * dart.notNull(rand.nextDouble()) * 3.141592653589793);
        rotations[$setAll](i * 4, q.storage);
        scales[$setAll](i, T.JSArrayOfdoubleL().of([2.0 + dart.notNull(rand.nextDouble()) * 4.0]));
      }
      md.AddAttribute("iaRotation", rotations, 4);
      md.AddAttribute("iaTranslation", translations, 3);
      md.AddAttribute("iaScale", scales, 1);
    }
    makePrepareFb(cgl, width, height) {
      let tex = new lib.TypedTexture.new(cgl, "float", width, height, 34836, lib.TexturePropertiesFramebuffer);
      let depthTexture = new lib.TypedTexture.new(cgl, "frame::depth", width, height, 33190, lib.TexturePropertiesShadowMap);
      return new lib.Framebuffer.new(cgl, tex, depthTexture);
    }
    makeNoiseTexture(cgl, rand) {
      let canvas = html.CanvasElement.new();
      canvas.width = 512;
      canvas.height = 512;
      let context = canvas[$context2D];
      let image = context[$getImageData](0, 0, canvas.width, canvas.height);
      for (let i = 0; i < dart.notNull(image.data[$length]); i = i + 4) {
        let v = 30 + dart.notNull(rand.nextInt(100));
        image.data[$_set](i + 0, v);
        image.data[$_set](i + 1, v);
        image.data[$_set](i + 2, v);
        image.data[$_set](i + 3, 255);
      }
      context[$putImageData](image, 0, 0);
      return new lib.ImageTexture.new(cgl, "noise", canvas, lib.TexturePropertiesMipmap);
    }
    build() {
      let t0, t0$, t0$0, t0$1;
      let canvas = T.CanvasElementL().as(html.document.querySelector("#webgl-canvas"));
      let cgl = (t0 = new lib.FlutterWGL.new(canvas, {faceCulling: false}), (() => {
        t0.clearColor(0.172, 0.165, 0.165, 1.0);
        return t0;
      })());
      let illumination = (t0$ = new lib.Illumination.new(), (() => {
        t0$.AddLight(new lib.DirectionalLight.new("dir", this.dirLight, lib$0.ColorWhite['*'](0.5), lib$0.ColorWhite, 100.0));
        return t0$;
      })());
      let ext = cgl.getExtension("EXT_color_buffer_float");
      if (ext == null) {
        html.window.alert("extension not available: EXT_color_buffer_float");
      }
      let orbit = new lib$1.OrbitCamera.new(70.0, 0.0, 0.0, canvas);
      let perspective = new lib.Perspective.new(orbit, 0.1, 1000.0);
      let width = canvas.clientWidth;
      let height = canvas.clientHeight;
      canvas.width = width;
      canvas.height = height;
      perspective.AdjustAspect(width, height);
      let rand = math.Random.new(1);
      let progPreparation = new lib.RenderProgram.new("preparation", cgl, this.preparationVertexShader, this.preparationFragmentShader);
      let progInstanced = new lib.RenderProgram.new("instanced", cgl, this.instancedVertexShader, this.instancedFragmentShader);
      let cubes = lib$0.ShapeWedge(progInstanced, {x: 0.1, y: 0.1, z: 0.1});
      this.addInstanceData(cubes, rand, 500);
      core.print("instances: " + dart.str(cubes) + ".GetNumInstances()}");
      let prepare = (t0$0 = new webgl_animation.Phase.new(progPreparation, cubes, this.makePrepareFb(cgl, width, height)), (() => {
        t0$0.mat.SetUniform("uModelMatrix", vector_math.Matrix4.identity());
        return t0$0;
      })());
      let render = (t0$1 = new webgl_animation.Phase.new(progInstanced, cubes, new lib.Framebuffer.Screen(cgl)), (() => {
        t0$1.mat.SetUniform("uModelMatrix", vector_math.Matrix4.identity());
        t0$1.mat.SetUniform("uShininess", 10.0);
        t0$1.mat.SetUniform("uTexture2", this.makeNoiseTexture(cgl, rand));
        t0$1.mat.SetUniform("uTexture", prepare.fb.colorTexture);
        return t0$1;
      })());
      let _lastTimeMs = 0.0;
      function animate(timeMs) {
        let t0;
        let elapsed = dart.notNull(timeMs) - _lastTimeMs;
        _lastTimeMs = dart.notNull(timeMs) + 0.0;
        t0 = orbit;
        t0.azimuth = dart.notNull(t0.azimuth) + 0.001;
        orbit.animate(elapsed);
        prepare.mat.ForceUniform("uTime", _lastTimeMs / 2000.0);
        prepare.Run(width, height, T.JSArrayOfUniformGroupL().of([perspective]));
        render.mat.ForceUniform("uTime", _lastTimeMs / 2000.0);
        render.Run(width, height, T.JSArrayOfUniformGroupL().of([perspective, illumination]));
        html.window[$animationFrame].then(dart.void, animate);
      }
      dart.fn(animate, T.numLTovoid());
      animate(0.0);
    }
  };
  (webgl_animation.WGLAnimation._privateConstructor = function() {
    let t0, t0$, t0$0, t0$1;
    this[instancedVertexShader] = (t0 = new lib.ShaderObject.new("finalV"), (() => {
      t0.AddAttributeVars(T.JSArrayOfStringL().of(["aPosition", "aNormal", "aTexUV"]));
      t0.AddAttributeVars(T.JSArrayOfStringL().of(["iaRotation", "iaTranslation", "iaScale"]));
      t0.AddVaryingVars(T.JSArrayOfStringL().of(["vColor", "vNormal", "vTexUV", "vPosition"]));
      t0.AddUniformVars(T.JSArrayOfStringL().of(["uPerspectiveViewMatrix", "uModelMatrix", "uTime"]));
      t0.SetBody(T.JSArrayOfStringL().of(["vec3 rotate_vertex_position(vec3 pos, vec4 rot) { \n    rot.xyz *= sin(0.5 * rot.w * " + "uTime" + ") /  length(rot.xyz);\n    rot.w = cos(0.5 * rot.w * " + "uTime" + ");\n    return pos + 2.0 * cross(rot.xyz, cross(rot.xyz, pos) + rot.w * pos);\n}\n\nvoid main() {\n  {\n    vec3 p = " + "aPosition" + " * " + "iaScale" + ";\n    p = rotate_vertex_position(p, " + "iaRotation" + ");\n    p = p + " + "iaTranslation" + ";\n    gl_Position = " + "uPerspectiveViewMatrix" + " * " + "uModelMatrix" + " * vec4(p, 1);\n  }\n  {\n      vec3 n = " + "aNormal" + ";\n      n = rotate_vertex_position(n, " + "iaRotation" + ");\n      " + "vNormal" + " = normalize(n);\n  }\n  " + "vTexUV" + " = " + "aTexUV" + ";\n  " + "vPosition" + " = gl_Position.xyz;\n}\n"]));
      return t0;
    })());
    this[instancedFragmentShader] = (t0$ = new lib.ShaderObject.new("finalF"), (() => {
      t0$.AddVaryingVars(T.JSArrayOfStringL().of(["vColor", "vNormal", "vTexUV", "vPosition"]));
      t0$.AddUniformVars(T.JSArrayOfStringL().of(["uTexture", "uTexture2", "uLightDescs", "uLightTypes", "uShininess", "uEyePosition"]));
      t0$.SetBody(T.JSArrayOfStringL().of(["float Edge(sampler2D t, ivec2 p) {\n\t\tvec4 hEdge = vec4(0.0);\n\t\thEdge -= texelFetch(t, ivec2(p.x - 1, p.y - 1), 0) * 1.0;\n\t\thEdge -= texelFetch(t, ivec2(p.x - 1, p.y    ), 0) * 2.0;\n\t\thEdge -= texelFetch(t, ivec2(p.x - 1, p.y + 1), 0) * 1.0;\n\t\thEdge += texelFetch(t, ivec2(p.x + 1, p.y - 1), 0) * 1.0;\n\t\thEdge += texelFetch(t, ivec2(p.x + 1, p.y    ), 0) * 2.0;\n\t\thEdge += texelFetch(t, ivec2(p.x + 1, p.y + 1), 0) * 1.0;\n\t\tvec4 vEdge = vec4(0.0);\n\t\tvEdge -= texelFetch(t, ivec2(p.x - 1, p.y - 1), 0) * 1.0;\n\t\tvEdge -= texelFetch(t, ivec2(p.x    , p.y - 1), 0) * 2.0;\n\t\tvEdge -= texelFetch(t, ivec2(p.x + 1, p.y - 1), 0) * 1.0;\n\t\tvEdge += texelFetch(t, ivec2(p.x - 1, p.y + 1), 0) * 1.0;\n\t\tvEdge += texelFetch(t, ivec2(p.x    , p.y + 1), 0) * 2.0;\n\t\tvEdge += texelFetch(t, ivec2(p.x + 1, p.y + 1), 0) * 1.0;\n\t\tvec3 edge = sqrt((hEdge.rgb * hEdge.rgb) + (vEdge.rgb * vEdge.rgb));\n\t\treturn length(edge);\n}\n\nvoid main() {\n  ColorComponents acc = CombinedLight(" + "vPosition" + ",\n                                      " + "vNormal" + ",\n                                      " + "uEyePosition" + ",\n                                      " + "uLightDescs" + ",\n                                      " + "uLightTypes" + ",\n                                      " + "uShininess" + ");\n                                    \n  float edge = Edge(" + "uTexture" + ", ivec2(gl_FragCoord.xy));\n  vec4 info = texelFetch(" + "uTexture" + ", ivec2(gl_FragCoord.xy), 0);\n  if (edge > 0.3) {\n      //" + "oFragColor" + ".rgb = vec3(0.0); \n      " + "oFragColor" + ".rgb = vec3(0.5 - edge); \n     // " + "oFragColor" + ".rgb = vec3(edge / (100.0 * info.w));\n    return;\n  } \n    \n  " + "oFragColor" + ".rgb = texture(" + "uTexture2" + ", " + "vTexUV" + ").rgb * 0.5 + \n                      acc.diffuse +\n                      acc.specular;\n}\n  "]), {prolog: T.JSArrayOfStringL().of([lib$.StdLibShader])});
      return t0$;
    })());
    this[preparationVertexShader] = (t0$0 = new lib.ShaderObject.new("preparationV"), (() => {
      t0$0.AddAttributeVars(T.JSArrayOfStringL().of(["aPosition", "aNormal", "aTexUV"]));
      t0$0.AddAttributeVars(T.JSArrayOfStringL().of(["iaRotation", "iaTranslation", "iaScale"]));
      t0$0.AddVaryingVars(T.JSArrayOfStringL().of(["vNormal"]));
      t0$0.AddUniformVars(T.JSArrayOfStringL().of(["uPerspectiveViewMatrix", "uModelMatrix", "uTime"]));
      t0$0.SetBody(T.JSArrayOfStringL().of(["vec3 rotate_vertex_position(vec3 pos, vec4 rot) { \n    rot.xyz *= sin(0.5 * rot.w * " + "uTime" + ") /  length(rot.xyz);\n    rot.w = cos(0.5 * rot.w * " + "uTime" + ");\n    return pos + 2.0 * cross(rot.xyz, cross(rot.xyz, pos) + rot.w * pos);\n}\n\nvoid main() {\n    {\n      vec3 p = " + "aPosition" + " * " + "iaScale" + ";\n      p = rotate_vertex_position(p, " + "iaRotation" + ");\n      p = p + " + "iaTranslation" + ";\n      gl_Position = " + "uPerspectiveViewMatrix" + " * " + "uModelMatrix" + " * vec4(p, 1);\n    }\n    {\n      vec3 n = " + "aNormal" + ";\n      n = rotate_vertex_position(n, " + "iaRotation" + ");\n      " + "vNormal" + " = normalize(n);\n    }\n}\n"]));
      return t0$0;
    })());
    this[preparationFragmentShader] = (t0$1 = new lib.ShaderObject.new("preparationF"), (() => {
      t0$1.AddVaryingVars(T.JSArrayOfStringL().of(["vNormal"]));
      t0$1.SetBody(T.JSArrayOfStringL().of(["void main() {\n  " + "oFragColor" + " = vec4(" + "vNormal" + ", gl_FragCoord.w);\n}\n  "]));
      return t0$1;
    })());
    this[dirLight] = vector_math.Vector3.new(-30.0, 0.0, -30.0);
    ;
  }).prototype = webgl_animation.WGLAnimation.prototype;
  dart.addTypeTests(webgl_animation.WGLAnimation);
  dart.addTypeCaches(webgl_animation.WGLAnimation);
  dart.setMethodSignature(webgl_animation.WGLAnimation, () => ({
    __proto__: dart.getMethods(webgl_animation.WGLAnimation.__proto__),
    addInstanceData: dart.fnType(dart.void, [dart.legacy(lib.MeshData), dart.legacy(math.Random), dart.legacy(core.int)]),
    makePrepareFb: dart.fnType(dart.legacy(lib.Framebuffer), [dart.legacy(lib.FlutterWGL), dart.legacy(core.int), dart.legacy(core.int)]),
    makeNoiseTexture: dart.fnType(dart.legacy(lib.Texture), [dart.legacy(lib.FlutterWGL), dart.legacy(math.Random)]),
    build: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(webgl_animation.WGLAnimation, I[0]);
  dart.setFieldSignature(webgl_animation.WGLAnimation, () => ({
    __proto__: dart.getFields(webgl_animation.WGLAnimation.__proto__),
    instancedVertexShader: dart.finalFieldType(dart.legacy(lib.ShaderObject)),
    instancedFragmentShader: dart.finalFieldType(dart.legacy(lib.ShaderObject)),
    preparationVertexShader: dart.finalFieldType(dart.legacy(lib.ShaderObject)),
    preparationFragmentShader: dart.finalFieldType(dart.legacy(lib.ShaderObject)),
    dirLight: dart.finalFieldType(dart.legacy(vector_math.Vector3))
  }));
  dart.defineLazy(webgl_animation.WGLAnimation, {
    /*webgl_animation.WGLAnimation._instance*/get _instance() {
      return new webgl_animation.WGLAnimation._privateConstructor();
    }
  }, true);
  var fb$ = dart.privateName(webgl_animation, "Phase.fb");
  var mat = dart.privateName(webgl_animation, "Phase.mat");
  var program$ = dart.privateName(webgl_animation, "Phase.program");
  var md$ = dart.privateName(webgl_animation, "Phase.md");
  webgl_animation.Phase = class Phase extends core.Object {
    get fb() {
      return this[fb$];
    }
    set fb(value) {
      super.fb = value;
    }
    get mat() {
      return this[mat];
    }
    set mat(value) {
      super.mat = value;
    }
    get program() {
      return this[program$];
    }
    set program(value) {
      super.program = value;
    }
    get md() {
      return this[md$];
    }
    set md(value) {
      super.md = value;
    }
    Run(width, height, extra = null) {
      this.fb.Activate(17664, 0, 0, width, height);
      let uniforms = T.JSArrayOfUniformGroupL().of([this.mat]);
      if (extra != null) {
        uniforms[$addAll](extra);
      }
      this.program.Draw(this.md, uniforms);
    }
  };
  (webgl_animation.Phase.new = function(program, md, fb) {
    this[mat] = new lib.Material.new("mat");
    this[program$] = program;
    this[md$] = md;
    this[fb$] = fb;
    ;
  }).prototype = webgl_animation.Phase.prototype;
  dart.addTypeTests(webgl_animation.Phase);
  dart.addTypeCaches(webgl_animation.Phase);
  dart.setMethodSignature(webgl_animation.Phase, () => ({
    __proto__: dart.getMethods(webgl_animation.Phase.__proto__),
    Run: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.List$(dart.legacy(lib.UniformGroup)))])
  }));
  dart.setLibraryUri(webgl_animation.Phase, I[0]);
  dart.setFieldSignature(webgl_animation.Phase, () => ({
    __proto__: dart.getFields(webgl_animation.Phase.__proto__),
    fb: dart.finalFieldType(dart.legacy(lib.Framebuffer)),
    mat: dart.finalFieldType(dart.legacy(lib.Material)),
    program: dart.finalFieldType(dart.legacy(lib.RenderProgram)),
    md: dart.finalFieldType(dart.legacy(lib.MeshData))
  }));
  dart.trackLibraries("packages/portefeuille/webgl_animation.dart", {
    "package:portefeuille/webgl_animation.dart": webgl_animation
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["webgl_animation.dart"],"names":[],"mappings":"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","file":"../../../packages/portefeuille/webgl_animation.dart.lib.js"}');
  // Exports:
  return {
    webgl_animation: webgl_animation
  };
}));

//# sourceMappingURL=webgl_animation.dart.lib.js.map
