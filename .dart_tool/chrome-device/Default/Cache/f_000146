define(['dart_sdk', 'packages/vector_math/vector_math.dart', 'packages/flutter_wgl/src/animation/lib.dart', 'packages/flutter_wgl/src/core/lib.dart', 'packages/flutter_wgl/src/scene/lib.dart', 'packages/flutter_wgl/src/shape/lib.dart', 'packages/flutter_wgl/src/shader/lib.dart'], (function load__packages__flutter_wgl__src__misc__lib_dart(dart_sdk, packages__vector_math__vector_math$46dart, packages__flutter_wgl__src__animation__lib$46dart, packages__flutter_wgl__src__core__lib$46dart, packages__flutter_wgl__src__scene__lib$46dart, packages__flutter_wgl__src__shape__lib$46dart, packages__flutter_wgl__src__shader__lib$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const html = dart_sdk.html;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const web_gl = dart_sdk.web_gl;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  const lib = packages__flutter_wgl__src__animation__lib$46dart.src__animation__lib;
  const lib$ = packages__flutter_wgl__src__core__lib$46dart.src__core__lib;
  const lib$0 = packages__flutter_wgl__src__scene__lib$46dart.src__scene__lib;
  const lib$1 = packages__flutter_wgl__src__shape__lib$46dart.src__shape__lib;
  const lib$2 = packages__flutter_wgl__src__shader__lib$46dart.src__shader__lib;
  var lib$3 = Object.create(dart.library);
  var $length = dartx.length;
  var $modulo = dartx['%'];
  var $color = dartx.color;
  var $fontFamily = dartx.fontFamily;
  var $fontSize = dartx.fontSize;
  var $lineHeight = dartx.lineHeight;
  var $padding = dartx.padding;
  var $textAlign = dartx.textAlign;
  var $background = dartx.background;
  var $append = dartx.append;
  var $innerHtml = dartx.innerHtml;
  var $height = dartx.height;
  var $text = dartx.text;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $ceil = dartx.ceil;
  var $truncate = dartx.truncate;
  var $getContext = dartx.getContext;
  var $arc = dartx.arc;
  var $_set = dartx._set;
  var $onResize = dartx.onResize;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $fontWeight = dartx.fontWeight;
  var $width = dartx.width;
  var $float = dartx.float;
  var $opacity = dartx.opacity;
  var $floor = dartx.floor;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ElementL: () => (T.ElementL = dart.constFn(dart.legacy(html.Element)))(),
    CanvasRenderingContext2DL: () => (T.CanvasRenderingContext2DL = dart.constFn(dart.legacy(html.CanvasRenderingContext2D)))(),
    UniformGroupL: () => (T.UniformGroupL = dart.constFn(dart.legacy(lib$.UniformGroup)))(),
    JSArrayOfUniformGroupL: () => (T.JSArrayOfUniformGroupL = dart.constFn(_interceptors.JSArray$(T.UniformGroupL())))(),
    TextureL: () => (T.TextureL = dart.constFn(dart.legacy(web_gl.Texture)))(),
    DrawStatsL: () => (T.DrawStatsL = dart.constFn(dart.legacy(lib$.DrawStats)))(),
    JSArrayOfDrawStatsL: () => (T.JSArrayOfDrawStatsL = dart.constFn(_interceptors.JSArray$(T.DrawStatsL())))(),
    Vector3L: () => (T.Vector3L = dart.constFn(dart.legacy(vector_math.Vector3)))(),
    JSArrayOfVector3L: () => (T.JSArrayOfVector3L = dart.constFn(_interceptors.JSArray$(T.Vector3L())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    DirectionalLightL: () => (T.DirectionalLightL = dart.constFn(dart.legacy(lib$.DirectionalLight)))(),
    SpotLightL: () => (T.SpotLightL = dart.constFn(dart.legacy(lib$.SpotLight)))(),
    PointLightL: () => (T.PointLightL = dart.constFn(dart.legacy(lib$.PointLight)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "package:flutter_wgl/src/misc/lib.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/git/flutter_wgl-888ff9df99e7c8d564f2c79cad33a729828cdbbc/lib/src/misc/light_visualizer.dart"
  ];
  var mesh = dart.privateName(lib$3, "BoneVisualizer.mesh");
  var _globalOffsetTransform = dart.privateName(lib$3, "_globalOffsetTransform");
  var _mdWire = dart.privateName(lib$3, "_mdWire");
  var _animatedSkeleton = dart.privateName(lib$3, "_animatedSkeleton");
  var _skeleton$ = dart.privateName(lib$3, "_skeleton");
  var _anim$ = dart.privateName(lib$3, "_anim");
  lib$3.BoneVisualizer = class BoneVisualizer extends core.Object {
    get mesh() {
      return this[mesh];
    }
    set mesh(value) {
      this[mesh] = value;
    }
    Update(time) {
      lib.UpdateAnimatedSkeleton(this[_skeleton$], this[_globalOffsetTransform], this[_anim$], this[_animatedSkeleton], time[$modulo](this[_anim$].duration));
      let bonePos = lib$3.BonePosFromAnimatedSkeleton(this[_skeleton$], this[_animatedSkeleton]);
      this[_mdWire].ChangeVertices(lib$.FlattenVector3List(bonePos));
    }
  };
  (lib$3.BoneVisualizer.new = function(prog, mat, _skeleton, _anim) {
    this[_globalOffsetTransform] = vector_math.Matrix4.identity();
    this[_mdWire] = null;
    this[_animatedSkeleton] = null;
    this[mesh] = null;
    this[_skeleton$] = _skeleton;
    this[_anim$] = _anim;
    this[_animatedSkeleton] = new lib.AnimatedSkeleton.new(this[_skeleton$][$length]);
    lib.UpdateAnimatedSkeleton(this[_skeleton$], this[_globalOffsetTransform], this[_anim$], this[_animatedSkeleton], 0.0);
    this[_mdWire] = lib$.LineEndPointsToMeshData("wire", prog, lib$3.BonePosFromAnimatedSkeleton(this[_skeleton$], this[_animatedSkeleton]));
    this.mesh = new lib$0.Node.new(this[_mdWire].name, this[_mdWire], mat);
  }).prototype = lib$3.BoneVisualizer.prototype;
  dart.addTypeTests(lib$3.BoneVisualizer);
  dart.addTypeCaches(lib$3.BoneVisualizer);
  dart.setMethodSignature(lib$3.BoneVisualizer, () => ({
    __proto__: dart.getMethods(lib$3.BoneVisualizer.__proto__),
    Update: dart.fnType(dart.void, [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(lib$3.BoneVisualizer, I[0]);
  dart.setFieldSignature(lib$3.BoneVisualizer, () => ({
    __proto__: dart.getFields(lib$3.BoneVisualizer.__proto__),
    [_globalOffsetTransform]: dart.fieldType(dart.legacy(vector_math.Matrix4)),
    [_mdWire]: dart.fieldType(dart.legacy(lib$.MeshData)),
    [_skeleton$]: dart.fieldType(dart.legacy(core.List$(dart.legacy(lib.Bone)))),
    [_anim$]: dart.fieldType(dart.legacy(lib.SkeletalAnimation)),
    [_animatedSkeleton]: dart.fieldType(dart.legacy(lib.AnimatedSkeleton)),
    mesh: dart.fieldType(dart.legacy(lib$0.Node))
  }));
  var _text = dart.privateName(lib$3, "_text");
  var _extra = dart.privateName(lib$3, "_extra");
  var _root$ = dart.privateName(lib$3, "_root");
  var _graph = dart.privateName(lib$3, "_graph");
  lib$3.Stats = class Stats extends core.Object {
    ChangeExtra(s) {
      this[_extra][$innerHtml] = s;
    }
    AddRawValue(v) {
      if (dart.notNull(v) < 0) v = 0;
      if (dart.notNull(v) > 30) v = 30;
      let e = T.ElementL().as(this[_graph].firstChild);
      e.style[$height] = dart.str(v) + "px";
      this[_graph][$append](e);
    }
  };
  (lib$3.Stats.new = function(_root, fg, bg) {
    let t0;
    this[_text] = lib$3._MakeText("@@@@");
    this[_extra] = html.Element.div();
    this[_root$] = _root;
    this[_graph] = lib$3._MakeGraph(fg, bg, 90, 30);
    if (this[_root$] == null) dart.throw("no element provided");
    t0 = this[_root$].style;
    (() => {
      t0[$color] = fg;
      t0[$fontFamily] = "Helvetica,Arial,sans-serif";
      t0[$fontSize] = "9px";
      t0[$lineHeight] = "15px";
      t0[$padding] = "0 0 3px 3px";
      t0[$textAlign] = "left";
      t0[$background] = bg;
      return t0;
    })();
    this[_root$][$append](this[_text]);
    this[_root$][$append](this[_graph]);
    this[_root$][$append](this[_extra]);
  }).prototype = lib$3.Stats.prototype;
  dart.addTypeTests(lib$3.Stats);
  dart.addTypeCaches(lib$3.Stats);
  dart.setMethodSignature(lib$3.Stats, () => ({
    __proto__: dart.getMethods(lib$3.Stats.__proto__),
    ChangeExtra: dart.fnType(dart.void, [dart.legacy(core.String)]),
    AddRawValue: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(lib$3.Stats, I[0]);
  dart.setFieldSignature(lib$3.Stats, () => ({
    __proto__: dart.getFields(lib$3.Stats.__proto__),
    [_root$]: dart.finalFieldType(dart.legacy(html.Element)),
    [_text]: dart.finalFieldType(dart.legacy(html.Element)),
    [_extra]: dart.finalFieldType(dart.legacy(html.Element)),
    [_graph]: dart.finalFieldType(dart.legacy(html.Element))
  }));
  var _frames = dart.privateName(lib$3, "_frames");
  var _lastSample = dart.privateName(lib$3, "_lastSample");
  lib$3.StatsFps = class StatsFps extends lib$3.Stats {
    UpdateFrameCount(now, extra = "") {
      this[_frames] = dart.notNull(this[_frames]) + 1;
      if (dart.notNull(now) - dart.notNull(this[_lastSample]) < 1000) return;
      let fps = dart.notNull(this[_frames]) * 1000.0 / 1000;
      this[_frames] = 0;
      this[_lastSample] = now;
      this[_text][$text] = fps[$toStringAsFixed](2) + " fps";
      this[_extra][$innerHtml] = extra;
      this.AddRawValue((30 * fps[$ceil]() / 90)[$truncate]());
    }
  };
  (lib$3.StatsFps.new = function(root, fg, bg) {
    this[_frames] = 0;
    this[_lastSample] = 0.0;
    lib$3.StatsFps.__proto__.new.call(this, root, fg, bg);
    ;
  }).prototype = lib$3.StatsFps.prototype;
  dart.addTypeTests(lib$3.StatsFps);
  dart.addTypeCaches(lib$3.StatsFps);
  dart.setMethodSignature(lib$3.StatsFps, () => ({
    __proto__: dart.getMethods(lib$3.StatsFps.__proto__),
    UpdateFrameCount: dart.fnType(dart.void, [dart.legacy(core.double)], [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(lib$3.StatsFps, I[0]);
  dart.setFieldSignature(lib$3.StatsFps, () => ({
    __proto__: dart.getFields(lib$3.StatsFps.__proto__),
    [_frames]: dart.fieldType(dart.legacy(core.int)),
    [_lastSample]: dart.fieldType(dart.legacy(core.double))
  }));
  lib$3.Utils = class Utils extends core.Object {
    static createParticleTexture(cgl, name = "Utils::Particles") {
      return new lib$.ImageTexture.new(cgl, name, lib$3.Utils.createParticleCanvas());
    }
    static createParticleCanvas() {
      let d = 64;
      let canvas = html.CanvasElement.new({width: d, height: d});
      let ctx = T.CanvasRenderingContext2DL().as(canvas[$getContext]("2d"));
      let x = (d / 2)[$truncate]();
      let y = (d / 2)[$truncate]();
      let gradient = ctx.createRadialGradient(x, y, 1, x, y, 22);
      gradient.addColorStop(0, "gray");
      gradient.addColorStop(1, "black");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, d, d);
      gradient = ctx.createRadialGradient(x, y, 1, x, y, 6);
      gradient.addColorStop(0, "white");
      gradient.addColorStop(1, "gray");
      ctx.globalAlpha = 0.9;
      ctx.fillStyle = gradient;
      ctx[$arc](x, y, 4, 0, 2 * 3.141592653589793);
      ctx.fill();
      return canvas;
    }
    static MakeStarMesh(prog, numPoints, dimension) {
      let t0;
      let name = "stars_" + dart.str(numPoints);
      let pos = _native_typed_data.NativeFloat32List.new(dart.notNull(numPoints) * 3);
      for (let i = 0; i < dart.notNull(numPoints) * 3; i = i + 1) {
        pos[$_set](i, (dart.notNull(lib$3.Utils.rand.nextDouble()) - 0.5) * dart.notNull(dimension));
      }
      t0 = prog.MakeMeshData(name, 0);
      return (() => {
        t0.AddVertices(pos);
        return t0;
      })();
    }
    static MakeStarMaterial(cgl, size = 1000) {
      let t0;
      t0 = new lib$.Material.Transparent("stars", lib$.BlendEquationMix);
      return (() => {
        t0.SetUniform("uTexture", lib$3.Utils.createParticleTexture(cgl));
        t0.SetUniform("uPointSize", size);
        return t0;
      })();
    }
    static MakeParticles(prog, numPoints, dimension = 100) {
      let mat = lib$3.Utils.MakeStarMaterial(prog.getContext());
      let md = lib$3.Utils.MakeStarMesh(prog, numPoints, dimension);
      return new lib$0.Node.new(md.name, md, mat);
    }
  };
  (lib$3.Utils.new = function() {
    ;
  }).prototype = lib$3.Utils.prototype;
  dart.addTypeTests(lib$3.Utils);
  dart.addTypeCaches(lib$3.Utils);
  dart.setLibraryUri(lib$3.Utils, I[0]);
  dart.defineLazy(lib$3.Utils, {
    /*lib$3.Utils.id*/get id() {
      return 1;
    },
    set id(_) {},
    /*lib$3.Utils.rand*/get rand() {
      return math.Random.new();
    },
    set rand(_) {}
  }, true);
  var _canvas$ = dart.privateName(lib$3, "_canvas");
  var _perspective$ = dart.privateName(lib$3, "_perspective");
  lib$3.RenderPhaseResizeAware = class RenderPhaseResizeAware extends lib$0.RenderPhase {
    resolutionChange(ev) {
      let w = this[_canvas$].clientWidth;
      let h = this[_canvas$].clientHeight;
      this[_canvas$].width = w;
      this[_canvas$].height = h;
      core.print("size change " + dart.str(w) + " " + dart.str(h));
      this[_perspective$].AdjustAspect(w, h);
      this.viewPortW = w;
      this.viewPortH = h;
    }
  };
  (lib$3.RenderPhaseResizeAware.new = function(name, cgl, _canvas, _perspective) {
    this[_canvas$] = _canvas;
    this[_perspective$] = _perspective;
    lib$3.RenderPhaseResizeAware.__proto__.new.call(this, name, cgl);
    this.resolutionChange(null);
    html.window[$onResize].listen(dart.bind(this, 'resolutionChange'));
  }).prototype = lib$3.RenderPhaseResizeAware.prototype;
  dart.addTypeTests(lib$3.RenderPhaseResizeAware);
  dart.addTypeCaches(lib$3.RenderPhaseResizeAware);
  dart.setMethodSignature(lib$3.RenderPhaseResizeAware, () => ({
    __proto__: dart.getMethods(lib$3.RenderPhaseResizeAware.__proto__),
    resolutionChange: dart.fnType(dart.void, [dart.legacy(html.Event)])
  }));
  dart.setLibraryUri(lib$3.RenderPhaseResizeAware, I[0]);
  dart.setFieldSignature(lib$3.RenderPhaseResizeAware, () => ({
    __proto__: dart.getFields(lib$3.RenderPhaseResizeAware.__proto__),
    [_canvas$]: dart.finalFieldType(dart.legacy(html.CanvasElement)),
    [_perspective$]: dart.finalFieldType(dart.legacy(lib$.Perspective))
  }));
  var _cgl$ = dart.privateName(lib$3, "_cgl");
  lib$3.PerspectiveResizeAware = class PerspectiveResizeAware extends lib$.Perspective {
    resolutionChange(ev) {
      let w = this[_canvas$].clientWidth;
      let h = this[_canvas$].clientHeight;
      this[_canvas$].width = w;
      this[_canvas$].height = h;
      core.print("size change " + dart.str(w) + " " + dart.str(h));
      this.AdjustAspect(w, h);
      this[_cgl$].viewport(0, 0, w, h);
    }
  };
  (lib$3.PerspectiveResizeAware.new = function(_cgl, _canvas, camera, near, far) {
    this[_cgl$] = _cgl;
    this[_canvas$] = _canvas;
    lib$3.PerspectiveResizeAware.__proto__.new.call(this, camera, near, far);
    this.resolutionChange(null);
    html.window[$onResize].listen(dart.bind(this, 'resolutionChange'));
  }).prototype = lib$3.PerspectiveResizeAware.prototype;
  dart.addTypeTests(lib$3.PerspectiveResizeAware);
  dart.addTypeCaches(lib$3.PerspectiveResizeAware);
  dart.setMethodSignature(lib$3.PerspectiveResizeAware, () => ({
    __proto__: dart.getMethods(lib$3.PerspectiveResizeAware.__proto__),
    resolutionChange: dart.fnType(dart.void, [dart.legacy(html.Event)])
  }));
  dart.setLibraryUri(lib$3.PerspectiveResizeAware, I[0]);
  dart.setFieldSignature(lib$3.PerspectiveResizeAware, () => ({
    __proto__: dart.getFields(lib$3.PerspectiveResizeAware.__proto__),
    [_canvas$]: dart.finalFieldType(dart.legacy(html.CanvasElement)),
    [_cgl$]: dart.finalFieldType(dart.legacy(lib$.FlutterWGL))
  }));
  var _depthTexture = dart.privateName(lib$3, "_depthTexture");
  var _phaseCompute = dart.privateName(lib$3, "_phaseCompute");
  var _shadowBuffer = dart.privateName(lib$3, "_shadowBuffer");
  var _programCompute = dart.privateName(lib$3, "_programCompute");
  var _phaseVisualize = dart.privateName(lib$3, "_phaseVisualize");
  var _uniforms = dart.privateName(lib$3, "_uniforms");
  var _programVisualize = dart.privateName(lib$3, "_programVisualize");
  var _mapSize = dart.privateName(lib$3, "_mapSize");
  lib$3.ShadowMap = class ShadowMap extends core.Object {
    SetVisualizationViewPort(x, y, w, h) {
      let t0;
      t0 = this[_phaseVisualize];
      (() => {
        t0.viewPortX = x;
        t0.viewPortY = y;
        t0.viewPortW = w;
        t0.viewPortH = h;
        return t0;
      })();
    }
    AddShadowCaster(node) {
      this[_programCompute].add(node);
    }
    ClearShadowCasters() {
      this[_programCompute].removeAll();
    }
    Compute(lightMatrix) {
      this[_uniforms].ForceUniform("uLightPerspectiveViewMatrix", lightMatrix);
      this[_phaseCompute].Draw();
    }
    Visualize() {
      this[_cgl$].bindTexture(3553, T.TextureL().as(this[_depthTexture].GetTexture()));
      this[_cgl$].texParameteri(3553, 34892, 0);
      this[_cgl$].texParameteri(3553, 10240, 9728);
      this[_cgl$].texParameteri(3553, 10241, 9728);
      this[_cgl$].bindTexture(3553, null);
      this[_phaseVisualize].Draw(T.JSArrayOfDrawStatsL().of([]));
      this[_cgl$].bindTexture(3553, T.TextureL().as(this[_depthTexture].GetTexture()));
      this[_cgl$].texParameteri(3553, 34892, 34894);
      this[_cgl$].texParameteri(3553, 10240, 9729);
      this[_cgl$].texParameteri(3553, 10241, 9729);
      this[_cgl$].bindTexture(3553, null);
    }
    GetMapSize() {
      return this[_mapSize];
    }
    GetMapTexture() {
      return this[_depthTexture];
    }
  };
  (lib$3.ShadowMap.new = function(_cgl, w, h, near, far, opts) {
    let t0, t0$, t0$0;
    let format = opts && 'format' in opts ? opts.format : 33190;
    this[_depthTexture] = null;
    this[_phaseCompute] = null;
    this[_shadowBuffer] = null;
    this[_programCompute] = null;
    this[_phaseVisualize] = null;
    this[_uniforms] = new lib$.UniformGroup.new("uniforms");
    this[_programVisualize] = null;
    this[_mapSize] = null;
    this[_cgl$] = _cgl;
    this[_mapSize] = vector_math.Vector2.new(dart.notNull(w) + 0.0, dart.notNull(h) + 0.0);
    let dummy = new lib$.TypedTexture.new(this[_cgl$], "frame::color", w, h, 32856, lib$.TexturePropertiesFramebuffer);
    this[_depthTexture] = new lib$.TypedTexture.new(this[_cgl$], "frame::depth", w, h, format, lib$.TexturePropertiesShadowMap);
    this[_shadowBuffer] = new lib$.Framebuffer.new(this[_cgl$], dummy, this[_depthTexture]);
    this[_phaseCompute] = (t0 = new lib$0.RenderPhase.new("compute-shadow", this[_cgl$], this[_shadowBuffer]), (() => {
      t0.viewPortW = w;
      t0.viewPortH = h;
      return t0;
    })());
    t0$ = this[_uniforms];
    (() => {
      t0$.SetUniform("uTexture", this.GetMapTexture());
      t0$.SetUniform("uCutOff", 0.0);
      t0$.SetUniform("uCameraNear", near);
      t0$.SetUniform("uCameraFar", far);
      return t0$;
    })();
    this[_programCompute] = new lib$0.Scene.new("shadowCompute", new lib$.RenderProgram.new("shadowCompute", this[_cgl$], lib$3.shadowVertexShaderDepth, lib$3.shadowFragmentShaderDepth), T.JSArrayOfUniformGroupL().of([this[_uniforms]]));
    this[_phaseCompute].add(this[_programCompute]);
    this[_phaseVisualize] = (t0$0 = new lib$0.RenderPhase.new("visualize-shadow", this[_cgl$]), (() => {
      t0$0.clearColorBuffer = false;
      return t0$0;
    })());
    this[_programVisualize] = new lib$0.Scene.new("shadowVisualize", new lib$.RenderProgram.new("shadowVisualize", this[_cgl$], lib$3.visualizeShadowmapVertexShaderLinearDepth16, lib$3.visualizeShadowmapFragmentShaderLinearDepth16), T.JSArrayOfUniformGroupL().of([this[_uniforms]]));
    this[_programVisualize].add(lib$3.UnitNode(this[_programVisualize].program));
    this[_phaseVisualize].add(this[_programVisualize]);
  }).prototype = lib$3.ShadowMap.prototype;
  dart.addTypeTests(lib$3.ShadowMap);
  dart.addTypeCaches(lib$3.ShadowMap);
  dart.setMethodSignature(lib$3.ShadowMap, () => ({
    __proto__: dart.getMethods(lib$3.ShadowMap.__proto__),
    SetVisualizationViewPort: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    AddShadowCaster: dart.fnType(dart.void, [dart.legacy(lib$0.Node)]),
    ClearShadowCasters: dart.fnType(dart.void, []),
    Compute: dart.fnType(dart.void, [dart.legacy(vector_math.Matrix4)]),
    Visualize: dart.fnType(dart.void, []),
    GetMapSize: dart.fnType(dart.legacy(vector_math.Vector2), []),
    GetMapTexture: dart.fnType(dart.legacy(lib$.Texture), [])
  }));
  dart.setLibraryUri(lib$3.ShadowMap, I[0]);
  dart.setFieldSignature(lib$3.ShadowMap, () => ({
    __proto__: dart.getFields(lib$3.ShadowMap.__proto__),
    [_cgl$]: dart.finalFieldType(dart.legacy(lib$.FlutterWGL)),
    [_depthTexture]: dart.fieldType(dart.legacy(lib$.Texture)),
    [_phaseCompute]: dart.fieldType(dart.legacy(lib$0.RenderPhase)),
    [_shadowBuffer]: dart.fieldType(dart.legacy(lib$.Framebuffer)),
    [_programCompute]: dart.fieldType(dart.legacy(lib$0.Scene)),
    [_phaseVisualize]: dart.fieldType(dart.legacy(lib$0.RenderPhase)),
    [_uniforms]: dart.fieldType(dart.legacy(lib$.UniformGroup)),
    [_programVisualize]: dart.fieldType(dart.legacy(lib$0.Scene)),
    [_mapSize]: dart.fieldType(dart.legacy(vector_math.Vector2))
  }));
  lib$3.BonePosFromSkeleton = function BonePosFromSkeleton(bones) {
    let out = T.JSArrayOfVector3L().of([]);
    for (let i = 1; i < dart.notNull(bones[$length]); i = i + 1) {
      let a = bones[$_get](i);
      let b = bones[$_get](a.parentNum);
      out[$add](a.localTransform.getTranslation());
      out[$add](b.localTransform.getTranslation());
    }
    core.print("skeleton bone " + dart.str(out[$length]));
    return out;
  };
  lib$3.BonePosFromAnimatedSkeleton = function BonePosFromAnimatedSkeleton(bones, posed, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let out = T.JSArrayOfVector3L().of([]);
    for (let i = 0; i < dart.notNull(bones[$length]); i = i + 1) {
      let parent = bones[$_get](i).parentNum;
      if (parent === -1) continue;
      out[$add](posed.globalTransforms[$_get](i).getTranslation()['*'](scale));
      out[$add](posed.globalTransforms[$_get](parent).getTranslation()['*'](scale));
    }
    return out;
  };
  lib$3.ShapeCube = function ShapeCube(prog, opts) {
    let x = opts && 'x' in opts ? opts.x : 1;
    let y = opts && 'y' in opts ? opts.y : 1;
    let z = opts && 'z' in opts ? opts.z : 1;
    let uMin = opts && 'uMin' in opts ? opts.uMin : 0;
    let uMax = opts && 'uMax' in opts ? opts.uMax : 1;
    let vMin = opts && 'vMin' in opts ? opts.vMin : 0;
    let vMax = opts && 'vMax' in opts ? opts.vMax : 1;
    let computeNormals = opts && 'computeNormals' in opts ? opts.computeNormals : true;
    let gb = lib$1.CubeGeometry({x: x, y: y, z: z, uMin: uMin, uMax: uMax, vMin: vMin, vMax: vMax});
    return lib$.GeometryBuilderToMeshData("cube", prog, gb);
  };
  lib$3.ShapeWedge = function ShapeWedge(prog, opts) {
    let x = opts && 'x' in opts ? opts.x : 1;
    let y = opts && 'y' in opts ? opts.y : 1;
    let z = opts && 'z' in opts ? opts.z : 1;
    let uMin = opts && 'uMin' in opts ? opts.uMin : 0;
    let uMax = opts && 'uMax' in opts ? opts.uMax : 1;
    let vMin = opts && 'vMin' in opts ? opts.vMin : 0;
    let vMax = opts && 'vMax' in opts ? opts.vMax : 1;
    let gb = lib$1.WedgeGeometry({x: x, y: y, z: z, uMin: uMin, uMax: uMax, vMin: vMin, vMax: vMax});
    return lib$.GeometryBuilderToMeshData("wedge", prog, gb);
  };
  lib$3.ShapeCylinder = function ShapeCylinder(prog, radTop, radBot, height, radialSubdivisions, computeNormals = true) {
    let gb = lib$1.CylinderGeometry(radTop, radBot, height, radialSubdivisions, computeNormals);
    return lib$.GeometryBuilderToMeshData("cylinder-" + dart.str(radialSubdivisions), prog, gb);
  };
  lib$3.ShapeIcosahedron = function ShapeIcosahedron(prog, opts) {
    let subdivisions = opts && 'subdivisions' in opts ? opts.subdivisions : 4;
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let computeNormals = opts && 'computeNormals' in opts ? opts.computeNormals : true;
    let gb = lib$1.IcosahedronGeometry({subdivisions: subdivisions, scale: scale, computeNormals: computeNormals});
    return lib$.GeometryBuilderToMeshData("icosahedron-" + dart.str(subdivisions), prog, gb);
  };
  lib$3.ShapeTorusKnot = function ShapeTorusKnot(prog, opts) {
    let radius = opts && 'radius' in opts ? opts.radius : 20;
    let tubeRadius = opts && 'tubeRadius' in opts ? opts.tubeRadius : 4;
    let segmentsR = opts && 'segmentsR' in opts ? opts.segmentsR : 128;
    let segmentsT = opts && 'segmentsT' in opts ? opts.segmentsT : 16;
    let p = opts && 'p' in opts ? opts.p : 2;
    let q = opts && 'q' in opts ? opts.q : 3;
    let heightScale = opts && 'heightScale' in opts ? opts.heightScale : 1;
    let computeNormals = opts && 'computeNormals' in opts ? opts.computeNormals : true;
    let gb = lib$1.TorusKnotGeometry({radius: radius, tubeRadius: tubeRadius, segmentsR: segmentsR, segmentsT: segmentsT, p: p, q: q, heightScale: heightScale, computeNormals: computeNormals});
    return lib$.GeometryBuilderToMeshData("torusknot", prog, gb);
  };
  lib$3.ShapeQuad = function ShapeQuad(prog, size) {
    let gb = lib$1.QuadGeometry(size);
    return lib$.GeometryBuilderToMeshData("quad", prog, gb);
  };
  lib$3.ShapeGrid = function ShapeGrid(prog, xstrips, ystrips, xlen, ylen) {
    let gb = lib$1.GridGeometry(xstrips, ystrips, xlen, ylen);
    return lib$.GeometryBuilderToMeshData("strips", prog, gb);
  };
  lib$3.UnitNode = function UnitNode(prog) {
    let UnitQuad = lib$3.ShapeQuad(prog, 1);
    return new lib$0.Node.new("unit-mesh", UnitQuad, lib$3.EmptyMaterial);
  };
  lib$3._MakeText = function _MakeText(initial) {
    let t0;
    let text = html.Element.div();
    t0 = text.style;
    (() => {
      t0[$fontWeight] = "bold";
      return t0;
    })();
    text[$text] = initial;
    return text;
  };
  lib$3._MakeGraph = function _MakeGraph(fg, bg, bars, height) {
    let t0, t0$;
    let graph = html.Element.div();
    t0 = graph.style;
    (() => {
      t0[$width] = dart.str(bars) + "px";
      t0[$height] = dart.str(height) + "px";
      t0[$color] = fg;
      t0[$background] = fg;
      return t0;
    })();
    for (let i = 0; i < dart.notNull(bars); i = i + 1) {
      let e = html.Element.span();
      t0$ = e.style;
      (() => {
        t0$[$width] = "1px";
        t0$[$height] = dart.str(height) + "px";
        t0$[$float] = "left";
        t0$[$opacity] = "0.9";
        t0$[$background] = bg;
        return t0$;
      })();
      graph[$append](e);
    }
    return graph;
  };
  lib$3.EmptyLightVisualizer = function EmptyLightVisualizer(prog, name) {
    let md = prog.MakeMeshData(name, 1);
    md.AddVertices(_native_typed_data.NativeFloat32List.new(3));
    md.AddFaces(T.JSArrayOfintL().of([0, 0]));
    return md;
  };
  lib$3.UpdateDirectionalLightVisualizer = function UpdateDirectionalLightVisualizer(md, dim, delta, dir) {
    let t0, t0$;
    if (dir.y === 0.0) {
      return;
    }
    let d = dart.notNull(dim) * 0.5;
    let end = dart.notNull(delta) * (d / dart.notNull(delta))[$floor]();
    let start = -end;
    let dir2y = dir['*'](d)['/'](dir.y);
    let points = T.JSArrayOfVector3L().of([]);
    for (let x = start; x <= end; x = x + dart.notNull(delta)) {
      for (let z = start; z <= end; z = z + dart.notNull(delta)) {
        points[$add]((t0 = vector_math.Vector3.new(x, 0.0, z), (() => {
          t0.add(dir2y);
          return t0;
        })()));
        points[$add]((t0$ = vector_math.Vector3.new(x, 0.0, z), (() => {
          t0$.sub(dir2y);
          return t0$;
        })()));
      }
    }
    for (let i = 0; i < 8; i = i + 1) {
      let x = (i & 1) === 1 ? 1 : -1;
      let y = (i & 2) === 2 ? 1 : -1;
      let z = (i & 4) === 4 ? 1 : -1;
      if (x > 0) {
        points[$add](vector_math.Vector3.new(x * d, y * d, z * d));
        points[$add](vector_math.Vector3.new(-x * d, y * d, z * d));
      }
      if (y > 0) {
        points[$add](vector_math.Vector3.new(x * d, y * d, z * d));
        points[$add](vector_math.Vector3.new(x * d, -y * d, z * d));
      }
      if (z > 0) {
        points[$add](vector_math.Vector3.new(x * d, y * d, z * d));
        points[$add](vector_math.Vector3.new(x * d, y * d, -z * d));
      }
    }
    md.ChangeVertices(lib$.FlattenVector3List(points));
    let faces = T.ListOfintL().new(points[$length]);
    for (let i = 0; i < dart.notNull(points[$length]); i = i + 1)
      faces[$_set](i, i);
    md.ChangeFaces(faces);
  };
  lib$3.GetOrthogonalVector3 = function GetOrthogonalVector3(dir) {
    if (dir.x !== 0.0) {
      if (dir.y !== 0.0) return vector_math.Vector3.new(-dart.notNull(dir.y), dir.x, 0.0);
      if (dir.z !== 0.0) return vector_math.Vector3.new(-dart.notNull(dir.z), 0.0, dir.x);
      return vector_math.Vector3.new(0.0, 1.0, 1.0);
    } else {
      if (dir.y === 0.0) return vector_math.Vector3.new(1.0, 1.0, 0.0);
      if (dir.z === 0.0) return vector_math.Vector3.new(1.0, 0.0, 1.0);
      return vector_math.Vector3.new(0.0, -dart.notNull(dir.z), dir.y);
    }
  };
  lib$3.UpdateSpotLightVisualizer = function UpdateSpotLightVisualizer(md, pos, dir, range, angle) {
    let t0, t0$;
    let kSpines = 8;
    let center = pos['+'](dir.normalized()['*'](range));
    let points = T.JSArrayOfVector3L().of([pos, center]);
    let ortho = (t0 = lib$3.GetOrthogonalVector3(dir), (() => {
      t0.normalize();
      t0.scale(math.tan(angle) * dart.notNull(range));
      return t0;
    })());
    for (let i = 0; i < kSpines; i = i + 1) {
      let p = (t0$ = ortho.clone(), (() => {
        t0$.applyAxisAngle(dir, i * 2.0 * 3.141592653589793 / kSpines);
        t0$.add(center);
        return t0$;
      })());
      points[$add](p);
    }
    let faces = T.JSArrayOfintL().of([]);
    for (let i = 1; i < dart.notNull(points[$length]); i = i + 1) {
      faces[$add](0);
      faces[$add](i);
    }
    for (let i = 3; i < dart.notNull(points[$length]); i = i + 1) {
      faces[$add](i - 1);
      faces[$add](i);
    }
    faces[$add](dart.notNull(points[$length]) - 1);
    faces[$add](2);
    for (let i = 2; i < dart.notNull(points[$length]); i = i + 1) {
      if (i[$modulo](2) === 0) {
        faces[$add](1);
        faces[$add](i);
      }
    }
    md.ChangeVertices(lib$.FlattenVector3List(points));
    md.ChangeFaces(faces);
  };
  lib$3.UpdatePointLightVisualizer2 = function UpdatePointLightVisualizer2(md, pos, range) {
    let points = T.JSArrayOfVector3L().of([]);
    let faces = T.JSArrayOfintL().of([]);
    for (let v of lib$1.IcosahedronVertexList) {
      faces[$add](points[$length]);
      faces[$add](lib$1.IcosahedronVertexList[$length]);
      points[$add](pos['+'](v['*'](range)));
    }
    points[$add](pos);
    for (let f of lib$1.IcosahedronFaceList) {
      faces[$add](f.a);
      faces[$add](f.b);
      faces[$add](f.b);
      faces[$add](f.c);
      faces[$add](f.c);
      faces[$add](f.a);
    }
    md.AddVertices(lib$.FlattenVector3List(points));
    md.ChangeFaces(faces);
  };
  lib$3.UpdatePointLightVisualizer = function UpdatePointLightVisualizer(md, pos, range) {
    let points = T.JSArrayOfVector3L().of([]);
    let faces = T.JSArrayOfintL().of([]);
    for (let v of lib$1.IcosahedronVertexList) {
      faces[$add](points[$length]);
      faces[$add](lib$1.IcosahedronVertexList[$length]);
      points[$add](pos['+'](v['*'](range)));
    }
    points[$add](pos);
    md.ChangeVertices(lib$.FlattenVector3List(points));
    md.ChangeFaces(faces);
  };
  lib$3.UpdateLightVisualizer = function UpdateLightVisualizer(md, light) {
    if (T.DirectionalLightL().is(light)) {
      let dl = light;
      lib$3.UpdateDirectionalLightVisualizer(md, dl.dim, dart.notNull(dl.dim) / 4, dl.dir);
    } else if (T.SpotLightL().is(light)) {
      let sl = light;
      lib$3.UpdateSpotLightVisualizer(md, sl.pos, sl.dir, sl.range, sl.angle);
    } else if (T.PointLightL().is(light)) {
      let pl = light;
      lib$3.UpdatePointLightVisualizer(md, pl.pos, pl.range);
    } else {
      if (!false) dart.assertFailed("unknown light: " + dart.str(dart.runtimeType(light)), I[1], 153, 12, "false");
    }
  };
  lib$3.LightVisualizer = function LightVisualizer(prog, light) {
    let md = lib$3.EmptyLightVisualizer(prog, "dirLightViz");
    lib$3.UpdateLightVisualizer(md, light);
    return md;
  };
  dart.defineLazy(lib$3, {
    /*lib$3._numBars*/get _numBars() {
      return 90;
    },
    /*lib$3._graphHeight*/get _graphHeight() {
      return 30;
    },
    /*lib$3._maxFps*/get _maxFps() {
      return 90;
    },
    /*lib$3._SAMPLE_RATE_MS*/get _SAMPLE_RATE_MS() {
      return 1000;
    },
    /*lib$3.EmptyMaterial*/get EmptyMaterial() {
      return new lib$.Material.new("empty-mat");
    },
    /*lib$3.ColorWhite*/get ColorWhite() {
      return vector_math.Vector3.new(1.0, 1.0, 1.0);
    },
    /*lib$3.ColorGray8*/get ColorGray8() {
      return vector_math.Vector3.new(0.8, 0.8, 0.8);
    },
    /*lib$3.ColorGray6*/get ColorGray6() {
      return vector_math.Vector3.new(0.6, 0.6, 0.6);
    },
    /*lib$3.ColorGray4*/get ColorGray4() {
      return vector_math.Vector3.new(0.4, 0.4, 0.4);
    },
    /*lib$3.ColorGray2*/get ColorGray2() {
      return vector_math.Vector3.new(0.2, 0.2, 0.2);
    },
    /*lib$3.ColorBlack*/get ColorBlack() {
      return vector_math.Vector3.new(0.0, 0.0, 0.0);
    },
    /*lib$3.ColorBlue*/get ColorBlue() {
      return vector_math.Vector3.new(0.0, 0.0, 1.0);
    },
    /*lib$3.ColorLiteBlue*/get ColorLiteBlue() {
      return vector_math.Vector3.new(0.0, 0.0, 0.5);
    },
    /*lib$3.ColorRed*/get ColorRed() {
      return vector_math.Vector3.new(1.0, 0.0, 0.0);
    },
    /*lib$3.ColorLiteRed*/get ColorLiteRed() {
      return vector_math.Vector3.new(0.5, 0.0, 0.0);
    },
    /*lib$3.ColorGreen*/get ColorGreen() {
      return vector_math.Vector3.new(0.0, 1.0, 0.0);
    },
    /*lib$3.ColorLiteGreen*/get ColorLiteGreen() {
      return vector_math.Vector3.new(0.0, 0.5, 0.0);
    },
    /*lib$3.ColorYellow*/get ColorYellow() {
      return vector_math.Vector3.new(1.0, 1.0, 0.0);
    },
    /*lib$3.ColorLiteYellow*/get ColorLiteYellow() {
      return vector_math.Vector3.new(0.5, 0.5, 0.0);
    },
    /*lib$3.ColorMagenta*/get ColorMagenta() {
      return vector_math.Vector3.new(1.0, 0.0, 1.0);
    },
    /*lib$3.ColorLiteMagenta*/get ColorLiteMagenta() {
      return vector_math.Vector3.new(0.5, 0.0, 0.5);
    },
    /*lib$3.ColorCyan*/get ColorCyan() {
      return vector_math.Vector3.new(0.0, 1.0, 1.0);
    },
    /*lib$3.ColorLiteCyan*/get ColorLiteCyan() {
      return vector_math.Vector3.new(0.0, 0.5, 0.5);
    },
    /*lib$3.ShadowMapShaderLib*/get ShadowMapShaderLib() {
      return "\nfloat GetShadow(vec3 depth, sampler2DShadow shadowMap, float bias1, float bias2) {\n    depth.z = depth.z - bias1;\n    return texture(shadowMap, depth);\n    //return 1.0 - smoothstep(bias1, bias2, depth.z - d);\n}\n";
    },
    /*lib$3.shadowVertexShaderDepth*/get shadowVertexShaderDepth() {
      let t0;
      return t0 = new lib$.ShaderObject.new("ShadowMapV"), (() => {
        t0.AddAttributeVars(T.JSArrayOfStringL().of(["aPosition"]));
        t0.AddUniformVars(T.JSArrayOfStringL().of(["uLightPerspectiveViewMatrix", "uModelMatrix"]));
        t0.SetBody(T.JSArrayOfStringL().of(["void main() {\n    gl_Position = " + "uLightPerspectiveViewMatrix" + " * " + "uModelMatrix" + " *\n                  vec4(" + "aPosition" + ", 1.0);\n}\n    "]));
        return t0;
      })();
    },
    /*lib$3.shadowFragmentShaderDepth*/get shadowFragmentShaderDepth() {
      let t0;
      return t0 = new lib$.ShaderObject.new("ShadowMapF"), (() => {
        t0.SetBodyWithMain(T.JSArrayOfStringL().of(["oFragColor" + ".r = 1.0;"]));
        return t0;
      })();
    },
    /*lib$3.visualizeShadowmapVertexShaderLinearDepth16*/get visualizeShadowmapVertexShaderLinearDepth16() {
      let t0;
      return t0 = new lib$.ShaderObject.new("copyV"), (() => {
        t0.AddAttributeVars(T.JSArrayOfStringL().of(["aPosition", "aTexUV"]));
        t0.AddVaryingVars(T.JSArrayOfStringL().of(["vTexUV"]));
        t0.SetBody(T.JSArrayOfStringL().of([lib$2.NullVertexShaderWithTextureForwardString]));
        return t0;
      })();
    },
    /*lib$3.visualizeShadowmapFragmentShaderLinearDepth16*/get visualizeShadowmapFragmentShaderLinearDepth16() {
      let t0;
      return t0 = new lib$.ShaderObject.new("copyF"), (() => {
        t0.AddVaryingVars(T.JSArrayOfStringL().of(["vTexUV"]));
        t0.AddUniformVars(T.JSArrayOfStringL().of(["uTexture", "uCutOff", "uCameraFar", "uCameraNear"]));
        t0.SetBody(T.JSArrayOfStringL().of(["void main() {     \n   float d = texture(" + "uTexture" + ",  " + "vTexUV" + ").x;\n   float near = " + "uCameraNear" + ";\n   float far = " + "uCameraFar" + ";\n   float gray = (2.0 * near) / (far + near - d * (far - near));\n   " + "oFragColor" + ".rgb = vec3(gray);\n   // " + "oFragColor" + ".rgb = vec3(d >= " + "uCutOff" + " ? d : 0.0);\n   // " + "oFragColor" + ".rgb = vec3(d);\n}\n"]));
        return t0;
      })();
    }
  }, true);
  dart.trackLibraries("packages/flutter_wgl/src/misc/lib.dart", {
    "package:flutter_wgl/src/misc/lib.dart": lib$3
  }, {
    "package:flutter_wgl/src/misc/lib.dart": ["bone_visualizer.dart", "light_visualizer.dart", "fps_meter.dart", "example_helper.dart", "shadowmap.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["bone_visualizer.dart","fps_meter.dart","example_helper.dart","shadowmap.dart","light_visualizer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../Z:/packages/flutter_wgl/src/misc/lib.dart.lib.js"}');
  // Exports:
  return {
    src__misc__lib: lib$3
  };
}));

//# sourceMappingURL=lib.dart.lib.js.map
